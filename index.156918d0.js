(function () {
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire0c8a"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire0c8a"] = parcelRequire;
}
parcelRequire.register("jXMeB", function(module, exports) {
/*!
  * Bootstrap event-handler.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ (function(global, factory) {
    module.exports = factory();
})(module.exports, function() {
    'use strict';
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const getjQuery = ()=>{
        const { jQuery: jQuery  } = window;
        if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) return jQuery;
        return null;
    };
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
    const stripNameRegex = /\..*/;
    const stripUidRegex = /::\d+$/;
    const eventRegistry = {}; // Events storage
    let uidEvent = 1;
    const customEvents = {
        mouseenter: 'mouseover',
        mouseleave: 'mouseout'
    };
    const customEventsRegex = /^(mouseenter|mouseleave)/i;
    const nativeEvents = new Set([
        'click',
        'dblclick',
        'mouseup',
        'mousedown',
        'contextmenu',
        'mousewheel',
        'DOMMouseScroll',
        'mouseover',
        'mouseout',
        'mousemove',
        'selectstart',
        'selectend',
        'keydown',
        'keypress',
        'keyup',
        'orientationchange',
        'touchstart',
        'touchmove',
        'touchend',
        'touchcancel',
        'pointerdown',
        'pointermove',
        'pointerup',
        'pointerleave',
        'pointercancel',
        'gesturestart',
        'gesturechange',
        'gestureend',
        'focus',
        'blur',
        'change',
        'reset',
        'select',
        'submit',
        'focusin',
        'focusout',
        'load',
        'unload',
        'beforeunload',
        'resize',
        'move',
        'DOMContentLoaded',
        'readystatechange',
        'error',
        'abort',
        'scroll'
    ]);
    /**
   * ------------------------------------------------------------------------
   * Private methods
   * ------------------------------------------------------------------------
   */ function getUidEvent(element, uid) {
        return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
    }
    function getEvent(element) {
        const uid = getUidEvent(element);
        element.uidEvent = uid;
        eventRegistry[uid] = eventRegistry[uid] || {};
        return eventRegistry[uid];
    }
    function bootstrapHandler(element, fn) {
        return function handler(event) {
            event.delegateTarget = element;
            if (handler.oneOff) EventHandler.off(element, event.type, fn);
            return fn.apply(element, [
                event
            ]);
        };
    }
    function bootstrapDelegationHandler(element, selector, fn) {
        return function handler(event) {
            const domElements = element.querySelectorAll(selector);
            for(let { target: target  } = event; target && target !== this; target = target.parentNode){
                for(let i = domElements.length; i--;)if (domElements[i] === target) {
                    event.delegateTarget = target;
                    if (handler.oneOff) EventHandler.off(element, event.type, selector, fn);
                    return fn.apply(target, [
                        event
                    ]);
                }
            } // To please ESLint
            return null;
        };
    }
    function findHandler(events, handler, delegationSelector = null) {
        const uidEventList = Object.keys(events);
        for(let i = 0, len = uidEventList.length; i < len; i++){
            const event = events[uidEventList[i]];
            if (event.originalHandler === handler && event.delegationSelector === delegationSelector) return event;
        }
        return null;
    }
    function normalizeParams(originalTypeEvent, handler, delegationFn) {
        const delegation = typeof handler === 'string';
        const originalHandler = delegation ? delegationFn : handler;
        let typeEvent = getTypeEvent(originalTypeEvent);
        const isNative = nativeEvents.has(typeEvent);
        if (!isNative) typeEvent = originalTypeEvent;
        return [
            delegation,
            originalHandler,
            typeEvent
        ];
    }
    function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
        if (typeof originalTypeEvent !== 'string' || !element) return;
        if (!handler) {
            handler = delegationFn;
            delegationFn = null;
        } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
        // this prevents the handler from being dispatched the same way as mouseover or mouseout does
        if (customEventsRegex.test(originalTypeEvent)) {
            const wrapFn = (fn)=>{
                return function(event) {
                    if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) return fn.call(this, event);
                };
            };
            if (delegationFn) delegationFn = wrapFn(delegationFn);
            else handler = wrapFn(handler);
        }
        const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
        const events = getEvent(element);
        const handlers = events[typeEvent] || (events[typeEvent] = {});
        const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);
        if (previousFn) {
            previousFn.oneOff = previousFn.oneOff && oneOff;
            return;
        }
        const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
        const fn1 = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
        fn1.delegationSelector = delegation ? handler : null;
        fn1.originalHandler = originalHandler;
        fn1.oneOff = oneOff;
        fn1.uidEvent = uid;
        handlers[uid] = fn1;
        element.addEventListener(typeEvent, fn1, delegation);
    }
    function removeHandler(element, events, typeEvent, handler, delegationSelector) {
        const fn = findHandler(events[typeEvent], handler, delegationSelector);
        if (!fn) return;
        element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
        delete events[typeEvent][fn.uidEvent];
    }
    function removeNamespacedHandlers(element, events, typeEvent, namespace) {
        const storeElementEvent = events[typeEvent] || {};
        Object.keys(storeElementEvent).forEach((handlerKey)=>{
            if (handlerKey.includes(namespace)) {
                const event = storeElementEvent[handlerKey];
                removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
            }
        });
    }
    function getTypeEvent(event) {
        // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
        event = event.replace(stripNameRegex, '');
        return customEvents[event] || event;
    }
    const EventHandler = {
        on (element, event, handler, delegationFn) {
            addHandler(element, event, handler, delegationFn, false);
        },
        one (element, event, handler, delegationFn) {
            addHandler(element, event, handler, delegationFn, true);
        },
        off (element, originalTypeEvent, handler, delegationFn) {
            if (typeof originalTypeEvent !== 'string' || !element) return;
            const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
            const inNamespace = typeEvent !== originalTypeEvent;
            const events = getEvent(element);
            const isNamespace = originalTypeEvent.startsWith('.');
            if (typeof originalHandler !== 'undefined') {
                // Simplest case: handler is passed, remove that listener ONLY.
                if (!events || !events[typeEvent]) return;
                removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
                return;
            }
            if (isNamespace) Object.keys(events).forEach((elementEvent)=>{
                removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
            });
            const storeElementEvent = events[typeEvent] || {};
            Object.keys(storeElementEvent).forEach((keyHandlers)=>{
                const handlerKey = keyHandlers.replace(stripUidRegex, '');
                if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
                    const event = storeElementEvent[keyHandlers];
                    removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
                }
            });
        },
        trigger (element, event, args) {
            if (typeof event !== 'string' || !element) return null;
            const $ = getjQuery();
            const typeEvent = getTypeEvent(event);
            const inNamespace = event !== typeEvent;
            const isNative = nativeEvents.has(typeEvent);
            let jQueryEvent;
            let bubbles = true;
            let nativeDispatch = true;
            let defaultPrevented = false;
            let evt = null;
            if (inNamespace && $) {
                jQueryEvent = $.Event(event, args);
                $(element).trigger(jQueryEvent);
                bubbles = !jQueryEvent.isPropagationStopped();
                nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
                defaultPrevented = jQueryEvent.isDefaultPrevented();
            }
            if (isNative) {
                evt = document.createEvent('HTMLEvents');
                evt.initEvent(typeEvent, bubbles, true);
            } else evt = new CustomEvent(event, {
                bubbles: bubbles,
                cancelable: true
            });
             // merge custom information in our event
            if (typeof args !== 'undefined') Object.keys(args).forEach((key)=>{
                Object.defineProperty(evt, key, {
                    get () {
                        return args[key];
                    }
                });
            });
            if (defaultPrevented) evt.preventDefault();
            if (nativeDispatch) element.dispatchEvent(evt);
            if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') jQueryEvent.preventDefault();
            return evt;
        }
    };
    return EventHandler;
});

});

parcelRequire.register("fuvDV", function(module, exports) {
/*!
  * Bootstrap manipulator.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ (function(global, factory) {
    module.exports = factory();
})(module.exports, function() {
    'use strict';
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ function normalizeData(val) {
        if (val === 'true') return true;
        if (val === 'false') return false;
        if (val === Number(val).toString()) return Number(val);
        if (val === '' || val === 'null') return null;
        return val;
    }
    function normalizeDataKey(key) {
        return key.replace(/[A-Z]/g, (chr)=>`-${chr.toLowerCase()}`
        );
    }
    const Manipulator = {
        setDataAttribute (element, key, value) {
            element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
        },
        removeDataAttribute (element, key) {
            element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
        },
        getDataAttributes (element) {
            if (!element) return {};
            const attributes = {};
            Object.keys(element.dataset).filter((key)=>key.startsWith('bs')
            ).forEach((key)=>{
                let pureKey = key.replace(/^bs/, '');
                pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
                attributes[pureKey] = normalizeData(element.dataset[key]);
            });
            return attributes;
        },
        getDataAttribute (element, key) {
            return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
        },
        offset (element) {
            const rect = element.getBoundingClientRect();
            return {
                top: rect.top + window.pageYOffset,
                left: rect.left + window.pageXOffset
            };
        },
        position (element) {
            return {
                top: element.offsetTop,
                left: element.offsetLeft
            };
        }
    };
    return Manipulator;
});

});

parcelRequire.register("3QEeg", function(module, exports) {
/*!
  * Bootstrap selector-engine.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ (function(global, factory) {
    module.exports = factory();
})(module.exports, function() {
    'use strict';
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const isElement = (obj)=>{
        if (!obj || typeof obj !== 'object') return false;
        if (typeof obj.jquery !== 'undefined') obj = obj[0];
        return typeof obj.nodeType !== 'undefined';
    };
    const isVisible = (element)=>{
        if (!isElement(element) || element.getClientRects().length === 0) return false;
        return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
    };
    const isDisabled = (element)=>{
        if (!element || element.nodeType !== Node.ELEMENT_NODE) return true;
        if (element.classList.contains('disabled')) return true;
        if (typeof element.disabled !== 'undefined') return element.disabled;
        return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
    };
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const NODE_TEXT = 3;
    const SelectorEngine = {
        find (selector, element = document.documentElement) {
            return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
        },
        findOne (selector, element = document.documentElement) {
            return Element.prototype.querySelector.call(element, selector);
        },
        children (element, selector) {
            return [].concat(...element.children).filter((child)=>child.matches(selector)
            );
        },
        parents (element, selector) {
            const parents = [];
            let ancestor = element.parentNode;
            while(ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT){
                if (ancestor.matches(selector)) parents.push(ancestor);
                ancestor = ancestor.parentNode;
            }
            return parents;
        },
        prev (element, selector) {
            let previous = element.previousElementSibling;
            while(previous){
                if (previous.matches(selector)) return [
                    previous
                ];
                previous = previous.previousElementSibling;
            }
            return [];
        },
        next (element, selector) {
            let next = element.nextElementSibling;
            while(next){
                if (next.matches(selector)) return [
                    next
                ];
                next = next.nextElementSibling;
            }
            return [];
        },
        focusableChildren (element) {
            const focusables = [
                'a',
                'button',
                'input',
                'textarea',
                'select',
                'details',
                '[tabindex]',
                '[contenteditable="true"]'
            ].map((selector)=>`${selector}:not([tabindex^="-"])`
            ).join(', ');
            return this.find(focusables, element).filter((el)=>!isDisabled(el) && isVisible(el)
            );
        }
    };
    return SelectorEngine;
});

});

parcelRequire.register("hGOAQ", function(module, exports) {


/*!
  * Bootstrap base-component.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ (function(global, factory) {
    module.exports = factory((parcelRequire("6VgCa")), (parcelRequire("jXMeB")));
})(module.exports, function(Data, EventHandler) {
    'use strict';
    const _interopDefaultLegacy = (e)=>e && typeof e === 'object' && 'default' in e ? e : {
            default: e
        }
    ;
    const Data__default = /*#__PURE__*/ _interopDefaultLegacy(Data);
    const EventHandler__default = /*#__PURE__*/ _interopDefaultLegacy(EventHandler);
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const MILLISECONDS_MULTIPLIER = 1000;
    const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)
    const getTransitionDurationFromElement = (element)=>{
        if (!element) return 0;
         // Get transition-duration of the element
        let { transitionDuration: transitionDuration , transitionDelay: transitionDelay  } = window.getComputedStyle(element);
        const floatTransitionDuration = Number.parseFloat(transitionDuration);
        const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found
        if (!floatTransitionDuration && !floatTransitionDelay) return 0;
         // If multiple durations are defined, take the first
        transitionDuration = transitionDuration.split(',')[0];
        transitionDelay = transitionDelay.split(',')[0];
        return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    };
    const triggerTransitionEnd = (element)=>{
        element.dispatchEvent(new Event(TRANSITION_END));
    };
    const isElement = (obj)=>{
        if (!obj || typeof obj !== 'object') return false;
        if (typeof obj.jquery !== 'undefined') obj = obj[0];
        return typeof obj.nodeType !== 'undefined';
    };
    const getElement = (obj)=>{
        if (isElement(obj)) // it's a jQuery object or a node element
        return obj.jquery ? obj[0] : obj;
        if (typeof obj === 'string' && obj.length > 0) return document.querySelector(obj);
        return null;
    };
    const execute = (callback)=>{
        if (typeof callback === 'function') callback();
    };
    const executeAfterTransition = (callback, transitionElement, waitForTransition = true)=>{
        if (!waitForTransition) {
            execute(callback);
            return;
        }
        const durationPadding = 5;
        const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
        let called = false;
        const handler = ({ target: target  })=>{
            if (target !== transitionElement) return;
            called = true;
            transitionElement.removeEventListener(TRANSITION_END, handler);
            execute(callback);
        };
        transitionElement.addEventListener(TRANSITION_END, handler);
        setTimeout(()=>{
            if (!called) triggerTransitionEnd(transitionElement);
        }, emulatedDuration);
    };
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const VERSION = '5.1.3';
    class BaseComponent {
        dispose() {
            Data__default.default.remove(this._element, this.constructor.DATA_KEY);
            EventHandler__default.default.off(this._element, this.constructor.EVENT_KEY);
            Object.getOwnPropertyNames(this).forEach((propertyName)=>{
                this[propertyName] = null;
            });
        }
        _queueCallback(callback, element, isAnimated = true) {
            executeAfterTransition(callback, element, isAnimated);
        }
        /** Static */ static getInstance(element) {
            return Data__default.default.get(getElement(element), this.DATA_KEY);
        }
        static getOrCreateInstance(element, config = {}) {
            return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
        }
        static get VERSION() {
            return VERSION;
        }
        static get NAME() {
            throw new Error('You have to implement the static method "NAME", for each component!');
        }
        static get DATA_KEY() {
            return `bs.${this.NAME}`;
        }
        static get EVENT_KEY() {
            return `.${this.DATA_KEY}`;
        }
        constructor(element){
            element = getElement(element);
            if (!element) return;
            this._element = element;
            Data__default.default.set(this._element, this.constructor.DATA_KEY, this);
        }
    }
    return BaseComponent;
});

});
parcelRequire.register("6VgCa", function(module, exports) {
/*!
  * Bootstrap data.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ (function(global, factory) {
    module.exports = factory();
})(module.exports, function() {
    'use strict';
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const elementMap = new Map();
    const data = {
        set (element, key, instance) {
            if (!elementMap.has(element)) elementMap.set(element, new Map());
            const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
            // can be removed later when multiple key/instances are fine to be used
            if (!instanceMap.has(key) && instanceMap.size !== 0) {
                // eslint-disable-next-line no-console
                console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
                return;
            }
            instanceMap.set(key, instance);
        },
        get (element, key) {
            if (elementMap.has(element)) return elementMap.get(element).get(key) || null;
            return null;
        },
        remove (element, key) {
            if (!elementMap.has(element)) return;
            const instanceMap = elementMap.get(element);
            instanceMap.delete(key); // free up element references if there are no instances left for an element
            if (instanceMap.size === 0) elementMap.delete(element);
        }
    };
    return data;
});

});


parcelRequire.register("5GmJx", function(module, exports) {
'use strict';


// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    // istanbul ignore if
    if (typeof BigInt === 'undefined') return;
    const blake = (parcelRequire("E2LX7"));
    const nacl = (parcelRequire("aEibP"));
    const workMin = BigInt('0xfffffe0000000000');
    const preamble = '0000000000000000000000000000000000000000000000000000000000000006';
    const prefixDivisors = {
        ban_: {
            minorDivisor: BigInt('1000000000000000000000000000'),
            majorDivisor: BigInt('100000000000000000000000000000'),
            majorName: 'banano',
            minorName: 'banoshi'
        },
        nano_: {
            minorDivisor: BigInt('1000000000000000000000000'),
            majorDivisor: BigInt('1000000000000000000000000000000'),
            majorName: 'nano',
            minorName: 'nanoshi'
        }
    };
    const ACCOUNT_ALPHABET_REGEX_STR = '^[13456789abcdefghijkmnopqrstuwxyz]+$';
    const SEED_ALPHABET_REGEX_STR = '^[0123456789abcdefABCDEF]{64}$';
    const LOG_SEND = false;
    const LOG_SEND_PROCESS = false;
    const LOG_RECEIVE = false;
    const LOG_OPEN = false;
    const LOG_CHANGE = false;
    const LOG_IS_WORK_VALID = false;
    const LOG_GET_HASH_CPU_WORKER = false;
    /**
   * Converts an amount into a raw amount.
   *
   * @memberof BananoUtil
   * @param {string} amountStr the amount, as a string.
   * @param {string} amountPrefix the amount, as a string.
   * @return {string} the banano as a raw value.
   */ const getRawStrFromMajorAmountStr = (amountStr, amountPrefix)=>{
        /* istanbul ignore if */ if (amountStr == undefined) throw Error('amountStr is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        /* istanbul ignore if */ if (typeof amountStr !== 'string') throw Error(`'${amountStr}' is not a string.`);
        const decimalPlace = amountStr.indexOf('.');
        let divisor = BigInt('1');
        // console.log('STARTED getRawStrFromAmountStr', bananoStr, decimalPlace, divisor);
        if (decimalPlace !== -1) {
            amountStr = amountStr.replace('.', '');
            const decimalsAfter = amountStr.length - decimalPlace;
            // console.log('INTERIM getRawStrFromAmountStr decimalsAfter', decimalsAfter);
            divisor = BigInt('10') ** BigInt(decimalsAfter);
        }
        // console.log('INTERIM getRawStrFromAmountStr', bananoStr, decimalPlace, divisor);
        const amountBi = BigInt(amountStr);
        // console.log('INTERIM getRawStrFromAmountStr banano   ', banano);
        // console.log('INTERIM getRawStrFromAmountStr bananoDiv', majorDivisor);
        /* istanbul ignore if */ if (prefixDivisors[amountPrefix] == undefined) throw Error(`'${amountPrefix}' is not an amountPrefix. (${[
            ...Object.keys(prefixDivisors), 
        ]})`);
        const majorDivisor = prefixDivisors[amountPrefix].majorDivisor;
        const amountRaw = amountBi * majorDivisor / divisor;
        // console.log('INTERIM getRawStrFromAmountStr bananoRaw', bananoRaw);
        // const parts = getAmountPartsFromRaw(bananoRaw.toString());
        // console.log('SUCCESS getRawStrFromAmountStr', bananoStr, bananoRaw, parts);
        return amountRaw.toString();
    };
    /**
   * Converts a banoshi amount into a raw amount.
   *
   * @memberof BananoUtil
   * @param {string} amountStr the banoshi, as a string.
   * @param {string} amountPrefix the amount prefix, as a string.
   * @return {string} the banano as a raw value.
   */ const getRawStrFromMinorAmountStr = (amountStr, amountPrefix)=>{
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const amount = BigInt(amountStr);
        const prefixDivisor = prefixDivisors[amountPrefix];
        const minorDivisor = prefixDivisor.minorDivisor;
        const amountRaw = amount * minorDivisor;
        return amountRaw.toString();
    };
    /**
   * @typedef {Object} BananoParts
   * @property {string} banano - The amount of banano.
   * @property {string} banoshi - The amount of banoshi (not counting whole banano).
   * @property {string} raw - The amount of raw (not counting whole banano and whole banoshi).
   */ /**
   * Get the banano parts (banano, banoshi, raw) for a given raw value.
   *
   * @memberof BananoUtil
   * @param {string} amountRawStr the raw amount, as a string.
   * @param {string} amountPrefix the amount prefix, as a string.
   * @return {BananoParts} the banano parts.
   */ const getAmountPartsFromRaw = (amountRawStr, amountPrefix)=>{
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const amountRaw = BigInt(amountRawStr);
        //    console.log(`bananoRaw:    ${bananoRaw}`);
        const prefixDivisor = prefixDivisors[amountPrefix];
        const majorDivisor = prefixDivisor.majorDivisor;
        const minorDivisor = prefixDivisor.minorDivisor;
        //    console.log(`bananoDivisor:   ${bananoDivisor}`);
        const major = amountRaw / majorDivisor;
        //    console.log(`banano:${banano}`);
        const majorRawRemainder = amountRaw - major * majorDivisor;
        const minor = majorRawRemainder / minorDivisor;
        const amountRawRemainder = majorRawRemainder - minor * minorDivisor;
        const bananoParts = {};
        bananoParts.majorName = prefixDivisor.majorName;
        bananoParts.minorName = prefixDivisor.minorName;
        bananoParts[prefixDivisor.majorName] = major.toString();
        bananoParts[prefixDivisor.minorName] = minor.toString();
        bananoParts.raw = amountRawRemainder.toString();
        return bananoParts;
    };
    const hexToBytes = (hex)=>{
        const ret = new Uint8Array(hex.length / 2);
        for(let i = 0; i < ret.length; i++)ret[i] = parseInt(hex.substring(i * 2, i * 2 + 2), 16);
        return ret;
    };
    const bytesToHex = (bytes)=>{
        return Array.prototype.map.call(bytes, (x)=>('00' + x.toString(16)).slice(-2)
        ).join('').toUpperCase();
    };
    const hash1 = (block)=>{
        /* istanbul ignore if */ if (block === undefined) throw Error('block is a required parameter.');
        /* istanbul ignore if */ if (block.account === undefined) throw Error('block.account is a required parameter.');
        /* istanbul ignore if */ if (block.previous === undefined) throw Error('block.previous is a required parameter.');
        /* istanbul ignore if */ if (block.representative === undefined) throw Error('block.representative is a required parameter.');
        /* istanbul ignore if */ if (block.balance === undefined) throw Error('block.balance is a required parameter.');
        /* istanbul ignore if */ if (block.link === undefined) throw Error('block.link is a required parameter.');
        const context = blake.blake2bInit(32, null);
        blake.blake2bUpdate(context, hexToBytes(preamble));
        blake.blake2bUpdate(context, hexToBytes(getAccountPublicKey(block.account)));
        blake.blake2bUpdate(context, hexToBytes(block.previous));
        blake.blake2bUpdate(context, hexToBytes(getAccountPublicKey(block.representative)));
        // console.log( `block.balance:${block.balance}` );
        let balanceToPad = BigInt(block.balance).toString(16);
        // console.log( `pre  balanceToPad:${balanceToPad}` );
        while(balanceToPad.length < 32)balanceToPad = '0' + balanceToPad;
        // console.log( `post balanceToPad:${balanceToPad}` );
        const balance = hexToBytes(balanceToPad);
        // console.log( `balance:${balance}` );
        blake.blake2bUpdate(context, balance);
        blake.blake2bUpdate(context, hexToBytes(block.link));
        const hash = bytesToHex(blake.blake2bFinal(context));
        return hash;
    };
    const uint5ToUint4 = (uint5)=>{
        const length = uint5.length / 4 * 5;
        const uint4 = new Uint8Array(length);
        for(let i = 1; i <= length; i++){
            const n = i - 1;
            const m = i % 5;
            const z = n - (i - m) / 5;
            const right = uint5[z - 1] << 5 - m;
            const left = uint5[z] >> m;
            uint4[n] = (left + right) % 16;
        }
        return uint4;
    };
    const arrayCrop = (array)=>{
        const length = array.length - 1;
        const croppedArray = new Uint8Array(length);
        for(let i = 0; i < length; i++)croppedArray[i] = array[i + 1];
        return croppedArray;
    };
    const uint4ToHex = (uint4)=>{
        let hex = '';
        for(let i = 0; i < uint4.length; i++)hex += uint4[i].toString(16).toUpperCase();
        return hex;
    };
    const uint8ToUint4 = (uintValue)=>{
        const uint4 = new Uint8Array(uintValue.length * 2);
        for(let i = 0; i < uintValue.length; i++){
            uint4[i * 2] = uintValue[i] / 16 | 0;
            uint4[i * 2 + 1] = uintValue[i] % 16;
        }
        return uint4;
    };
    const equalArrays = (array1, array2)=>{
        for(let i = 0; i < array1.length; i++){
            if (array1[i] != array2[i]) return false;
        }
        return true;
    };
    const uint4ToUint8 = (uintValue)=>{
        const length = uintValue.length / 2;
        const uint8 = new Uint8Array(length);
        for(let i = 0; i < length; i++)uint8[i] = uintValue[i * 2] * 16 + uintValue[i * 2 + 1];
        return uint8;
    };
    const stringToUint5 = (string)=>{
        const letterList = '13456789abcdefghijkmnopqrstuwxyz'.split('');
        const length = string.length;
        const stringArray = string.split('');
        const uint5 = new Uint8Array(length);
        for(let i = 0; i < length; i++)uint5[i] = letterList.indexOf(stringArray[i]);
        return uint5;
    };
    const isAccountSuffixValid = (accountSuffix)=>{
        const regex = new RegExp(ACCOUNT_ALPHABET_REGEX_STR);
        const isValid = regex.test(accountSuffix);
        const retval = {};
        retval.valid = isValid;
        if (isValid) retval.message = '';
        else retval.message = `does not match regex '${ACCOUNT_ALPHABET_REGEX_STR}'`;
        return retval;
    };
    /**
   * Get the public key for a given account.
   *
   * @memberof BananoUtil
   * @param {string} account the account.
   * @return {string} the public key.
   */ const getAccountPublicKey = (account)=>{
        if (account === undefined) throw Error(`Undefined BANANO Account`);
        if (account.startsWith === undefined) throw Error(`Not a string: '${account}'`);
        let accountCrop;
        if (account.startsWith('camo')) {
            if (!account.startsWith('camo_1') && !account.startsWith('camo_3') || account.length !== 65) throw Error(`Invalid CAMO BANANO Account prefix '${account}'`);
            accountCrop = account.substring(5, 65);
        } else if (account.startsWith('nano')) {
            if (!account.startsWith('nano_1') && !account.startsWith('nano_3') || account.length !== 65) throw Error(`Invalid NANO Account prefix '${account}'`);
            accountCrop = account.substring(5, 65);
        } else {
            if (!account.startsWith('ban_1') && !account.startsWith('ban_3') || account.length !== 64) throw Error(`Invalid BANANO Account prefix '${account}'`);
            accountCrop = account.substring(4, 64);
        }
        const isAccountValid = isAccountSuffixValid(accountCrop);
        if (!isAccountValid.valid) throw Error(`Invalid BANANO Account '${account}', ${isAccountValid.message}`);
        const keyUint4 = arrayCrop(uint5ToUint4(stringToUint5(accountCrop.substring(0, 52))));
        const hashUint4 = uint5ToUint4(stringToUint5(accountCrop.substring(52, 60)));
        const keyArray = uint4ToUint8(keyUint4);
        const blakeHash = blake.blake2b(keyArray, null, 5).reverse();
        const left = hashUint4;
        const right = uint8ToUint4(blakeHash);
        if (!equalArrays(left, right)) {
            const leftStr = uint5ToString(uint4ToUint5(left));
            const rightStr = uint5ToString(uint4ToUint5(right));
            throw Error(`Incorrect checksum ${leftStr} <> ${rightStr}`);
        }
        return uint4ToHex(keyUint4);
    };
    const hexToUint8 = (hexValue)=>{
        const length = hexValue.length / 2 | 0;
        const uint8 = new Uint8Array(length);
        for(let i = 0; i < length; i++)uint8[i] = parseInt(hexValue.substr(i * 2, 2), 16);
        return uint8;
    };
    const decToHex = (decValue, bytes = null)=>{
        const dec = decValue.toString().split('');
        const sum = [];
        let hex = '';
        const hexArray = [];
        let i;
        let s;
        while(dec.length){
            s = 1 * dec.shift();
            for(i = 0; s || i < sum.length; i++){
                s += (sum[i] || 0) * 10;
                sum[i] = s % 16;
                s = (s - sum[i]) / 16;
            }
        }
        while(sum.length)hexArray.push(sum.pop().toString(16));
        hex = hexArray.join('');
        if (hex.length % 2 != 0) hex = '0' + hex;
        if (bytes > hex.length / 2) {
            const diff = bytes - hex.length / 2;
            for(let j = 0; j < diff; j++)hex = '00' + hex;
        }
        return hex;
    };
    const generateAccountSecretKeyBytes = (seedBytes, accountIndex)=>{
        const accountBytes = hexToUint8(decToHex(accountIndex, 4));
        const context = blake.blake2bInit(32);
        blake.blake2bUpdate(context, seedBytes);
        blake.blake2bUpdate(context, accountBytes);
        const newKey = blake.blake2bFinal(context);
        return newKey;
    };
    const uint4ToUint5 = (uintValue)=>{
        const length = uintValue.length / 5 * 4;
        const uint5 = new Uint8Array(length);
        for(let i = 1; i <= length; i++){
            const n = i - 1;
            const m = i % 4;
            const z = n + (i - m) / 4;
            const right = uintValue[z] << m;
            let left;
            if ((length - i) % 4 == 0) left = uintValue[z - 1] << 4;
            else left = uintValue[z + 1] >> 4 - m;
            uint5[n] = (left + right) % 32;
        }
        return uint5;
    };
    /**
   * Get the account suffix for a given public key (everything but ban_ or camo_ or nano_).
   *
   * @memberof BananoUtil
   * @param {string} publicKey the public key.
   * @return {string} the account suffix.
   */ const getAccountSuffix = (publicKey)=>{
        const keyBytes = uint4ToUint8(hexToUint4(publicKey)); // For some reason here we go from u, to hex, to 4, to 8??
        const checksum = uint5ToString(uint4ToUint5(uint8ToUint4(blake.blake2b(keyBytes, null, 5).reverse())));
        const account = uint5ToString(uint4ToUint5(hexToUint4(`0${publicKey}`)));
        return `${account}${checksum}`;
    };
    /**
   * Get the account for a given public key.
   *
   * @memberof BananoUtil
   * @param {string} publicKey the public key.
   * @param {string} accountPrefix the prefix. ban_ or nano_.
   * @return {string} the account.
   */ const getAccount = (publicKey, accountPrefix)=>{
        /* istanbul ignore if */ if (accountPrefix == undefined) throw Error('accountPrefix is a required parameter.');
        const accountSuffix = getAccountSuffix(publicKey);
        return `${accountPrefix}${accountSuffix}`;
    };
    const uint5ToString = (uint5)=>{
        const letterList = '13456789abcdefghijkmnopqrstuwxyz'.split('');
        let string = '';
        for(let i = 0; i < uint5.length; i++)string += letterList[uint5[i]];
        return string;
    };
    const hexToUint4 = (hexValue)=>{
        const uint4 = new Uint8Array(hexValue.length);
        for(let i = 0; i < hexValue.length; i++)uint4[i] = parseInt(hexValue.substr(i, 1), 16);
        return uint4;
    };
    const signHash = (privateKey, hash)=>{
        //    console.log( `sign ${JSON.stringify( block )}` );
        const hashBytes = hexToBytes(hash);
        //    console.log( `hashBytes[${hashBytes.length}]:${hashBytes}` );
        const privateKeyBytes = hexToBytes(privateKey);
        //    console.log( `privateKeyBytes[${privateKeyBytes.length}]:${privateKeyBytes}` );
        const signed = nacl.sign.detached(hashBytes, privateKeyBytes);
        const signature = bytesToHex(signed);
        return signature;
    };
    const verify = (hash, signature, publicKey)=>{
        const hashBytes = hexToBytes(hash);
        const signatureBytes = hexToBytes(signature);
        const publicKeyBytes = hexToBytes(publicKey);
        return nacl.sign.detached.verify(hashBytes, signatureBytes, publicKeyBytes);
    };
    const sign = async (privateKey, block)=>{
        if (typeof privateKey == 'object') {
            const hwResponse = await privateKey.signBlock(block);
            return hwResponse.signature;
        } else return signHash(privateKey, hash1(block));
    };
    const generateAccountKeyPair = (accountSecretKeyBytes)=>{
        return nacl.sign.keyPair.fromSecretKey(accountSecretKeyBytes);
    };
    /**
   * returns true if the work (in bytes) for the hash (in bytes) is valid.
   *
   * @memberof BananoUtil
   * @param {string} hashBytes the hash bytes to check.
   * @param {string} workBytes the work bytes to check.
   * @return {boolean} true if the work is valid for the hash.
   */ const isWorkValid = (hashBytes, workBytes)=>{
        const context = blake.blake2bInit(8);
        blake.blake2bUpdate(context, workBytes);
        blake.blake2bUpdate(context, hashBytes);
        const output = blake.blake2bFinal(context).reverse();
        const outputHex = bytesToHex(output);
        const outputBigInt = BigInt('0x' + outputHex);
        const retval = outputBigInt >= workMin;
        /* istanbul ignore if */ if (LOG_IS_WORK_VALID) console.log(`isWorkValid ${outputBigInt} >= ${workMin} ? ${retval}`);
        return retval;
    };
    const incrementBytes = (bytes)=>{
        let x = bytes.length - 1;
        for(; x >= 0; x--)if (bytes[x] ^ 0xff) {
            bytes[x]++;
            return;
        } else bytes[x] = 0;
    };
    /**
   * creates a new Uint8Array(8) to calculate work bytes.
   *
   * @memberof BananoUtil
   * @return {Uint8Array} the bytes in a Uint8Array.
   */ const getZeroedWorkBytes = ()=>{
        return new Uint8Array(8);
    };
    const getHashCPUWorker = (hash, workBytes)=>{
        /* istanbul ignore if */ if (LOG_GET_HASH_CPU_WORKER) console.log('STARTED getHashCPUWorker', hash, bytesToHex(workBytes));
        /* istanbul ignore if */ if (hash === undefined) throw Error('hash is a required parameter.');
        /* istanbul ignore if */ if (workBytes === undefined) throw Error('workBytes is a required parameter.');
        const hashBytes = hexToBytes(hash);
        // const startTime = process.hrtime.bigint();
        let isWorkValidFlag = isWorkValid(hashBytes, workBytes);
        // let isWorkValidNanos = process.hrtime.bigint() - startTime;
        // let incrementBytesNanos = BigInt(0);
        while(!isWorkValidFlag){
            // const startTime0 = process.hrtime.bigint();
            incrementBytes(workBytes);
            // incrementBytesNanos += process.hrtime.bigint() - startTime0;
            // const startTime1 = process.hrtime.bigint();
            isWorkValidFlag = isWorkValid(hashBytes, workBytes);
        // isWorkValidNanos += process.hrtime.bigint() - startTime1;
        }
        const retval = bytesToHex(workBytes.reverse());
        /* istanbul ignore if */ if (LOG_GET_HASH_CPU_WORKER) console.log('SUCCESS getHashCPUWorker', hash, bytesToHex(startWorkBytes), retval);
        return retval;
    };
    /**
   * Get the public key for a given private key.
   *
   * @memberof BananoUtil
   * @param {string} privateKey the private key.
   * @return {string} the public key.
   */ const getPublicKey = async (privateKey)=>{
        if (typeof privateKey == 'object') return await privateKey.getPublicKey();
        const accountKeyPair = generateAccountKeyPair(hexToBytes(privateKey));
        return bytesToHex(accountKeyPair.publicKey);
    };
    /**
   * validates a seed.
   *
   * @memberof BananoUtil
   * @param {string} seed the seed to use to validate.
   * @param {string} seedIx the index to use with the seed.
   * @return {object} {valid:[true/false] message:[if false, why]}.
   */ const isSeedValid = (seed)=>{
        const regex = new RegExp(SEED_ALPHABET_REGEX_STR);
        const isValid = regex.test(seed);
        const retval = {};
        retval.valid = isValid;
        if (isValid) retval.message = '';
        else retval.message = `does not match regex '${SEED_ALPHABET_REGEX_STR}'`;
        return retval;
    };
    /**
   * Get the private key for a given seed.
   *
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @return {string} the private key.
   */ const getPrivateKey = (seed, seedIx)=>{
        /* istanbul ignore if */ if (seed === undefined) throw Error('seed is a required parameter.');
        /* istanbul ignore if */ if (seedIx === undefined) throw Error('seedIx is a required parameter.');
        const isValid = isSeedValid(seed);
        if (!isValid.valid) throw Error(`Invalid BANANO seed '${seed}', ${isValid.message}`);
        const seedBytes = hexToBytes(seed);
        const accountBytes = generateAccountSecretKeyBytes(seedBytes, seedIx);
        return bytesToHex(accountBytes);
    };
    const send = async (bananodeApi, seed, seedIx, destAccount, amountRaw, successCallback, failureCallback, accountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (seed === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (seedIx === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (destAccount === undefined) throw Error('destAccount is a required parameter.');
        /* istanbul ignore if */ if (amountRaw === undefined) throw Error('amountRaw is a required parameter.');
        /* istanbul ignore if */ if (successCallback === undefined) throw Error('successCallback is a required parameter.');
        /* istanbul ignore if */ if (failureCallback === undefined) throw Error('failureCallback is a required parameter.');
        /* istanbul ignore if */ if (accountPrefix === undefined) throw Error('accountPrefix is a required parameter.');
        /* istanbul ignore if */ if (LOG_SEND) console.log(`STARTED send ${seed} ${seedIx}`);
        const privateKey = getPrivateKey(seed, seedIx);
        /* istanbul ignore if */ if (LOG_SEND) console.log(`INTERIM send ${seed} ${seedIx} ${privateKey}`);
        await sendFromPrivateKey(bananodeApi, privateKey, destAccount, amountRaw, accountPrefix).then((hash)=>{
            /* istanbul ignore if */ if (LOG_SEND) console.log(`SUCCESS send ${seed} ${seedIx} ${hash}`);
            successCallback(hash);
        }).catch((error)=>{
            /* istanbul ignore if */ if (LOG_SEND) console.log('FAILURE send', error);
            failureCallback(error);
        });
    };
    const sendFromPrivateKey = async (bananodeApi, privateKey, destAccount, amountRaw, accountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (destAccount === undefined) throw Error('destAccount is a required parameter.');
        /* istanbul ignore if */ if (amountRaw === undefined) throw Error('amountRaw is a required parameter.');
        /* istanbul ignore if */ if (accountPrefix === undefined) throw Error('accountPrefix is a required parameter.');
        return await sendFromPrivateKeyWithRepresentative(bananodeApi, privateKey, destAccount, amountRaw, undefined, accountPrefix);
    };
    const sendFromPrivateKeyWithRepresentative = async (bananodeApi, privateKey, destAccount, amountRaw, newRepresentative, accountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (destAccount === undefined) throw Error('destAccount is a required parameter.');
        /* istanbul ignore if */ if (amountRaw === undefined) throw Error('amountRaw is a required parameter.');
        /* istanbul ignore if */ if (accountPrefix === undefined) throw Error('accountPrefix is a required parameter.');
        return await sendFromPrivateKeyWithRepresentativeAndPrevious(bananodeApi, privateKey, destAccount, amountRaw, newRepresentative, undefined, accountPrefix);
    };
    const sendFromPrivateKeyWithRepresentativeAndPrevious = async (bananodeApi, privateKey, destAccount, amountRaw, newRepresentative, newPrevious, accountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (destAccount === undefined) throw Error('destAccount is a required parameter.');
        /* istanbul ignore if */ if (amountRaw === undefined) throw Error('amountRaw is a required parameter.');
        /* istanbul ignore if */ if (accountPrefix === undefined) throw Error('accountPrefix is a required parameter.');
        // newRepresentative is optional.
        // newPrevious is optional.
        /* istanbul ignore if */ if (LOG_SEND) console.log(`STARTED sendFromPrivateKeyWithRepresentativeAndPrevious ${destAccount} ${amountRaw}`);
        /* istanbul ignore if */ if (LOG_SEND) console.log(`STARTED getPublicKey ${privateKey}`);
        const publicKey = await getPublicKey(privateKey);
        /* istanbul ignore if */ if (LOG_SEND) console.log(`STARTED getPublicAccountID ${publicKey}`);
        const accountAddress = getAccount(publicKey, accountPrefix);
        /* istanbul ignore if */ if (LOG_SEND) console.log(`STARTED getAccountInfo ${destAccount} ${amountRaw}`);
        const accountInfo = await bananodeApi.getAccountInfo(accountAddress);
        if (accountInfo == undefined) throw Error(`The server's account info cannot be retrieved, please try again.`);
        /* istanbul ignore if */ if (LOG_SEND) console.log(`SUCCESS getAccountInfo ${accountAddress} ${JSON.stringify(accountInfo)}`);
        const balanceRaw = accountInfo.balance;
        if (balanceRaw == undefined) throw Error(`The server's account balance cannot be retrieved, please try again.`);
        if (BigInt(balanceRaw) < BigInt(amountRaw)) {
            const balance = getAmountPartsFromRaw(balanceRaw, accountPrefix);
            const amount = getAmountPartsFromRaw(amountRaw, accountPrefix);
            const balanceMajorAmount = balance[balance.majorName];
            const amountMajorAmount = amount[amount.majorName];
            //        console.log( `balance:${JSON.stringify( balance )}` );
            throw Error(`The server's account balance of ${balanceMajorAmount} ${balance.majorName}s is too small, cannot withdraw ${amountMajorAmount} ${balance.majorName}s. In raw ${balanceRaw} < ${amountRaw}.`);
        }
        const remaining = BigInt(balanceRaw) - BigInt(amountRaw);
        const remainingDecimal = remaining.toString(10);
        let remainingPadded = remaining.toString(16);
        // Left pad with 0's
        while(remainingPadded.length < 32)remainingPadded = '0' + remainingPadded;
        let representative;
        if (newRepresentative !== undefined) representative = newRepresentative;
        else representative = await bananodeApi.getAccountRepresentative(accountAddress);
        /* istanbul ignore if */ if (LOG_SEND) console.log(`INTERIM send representative ${representative}`);
        let previous;
        if (newPrevious !== undefined) previous = newPrevious;
        else previous = accountInfo.frontier;
        /* istanbul ignore if */ if (LOG_SEND) console.log(`INTERIM send previous ${previous}`);
        if (previous == '') {
            /* istanbul ignore if */ if (LOG_SEND) console.log(`FAILURE previous == ''`);
            return undefined;
        } else {
            // const hashBytes = hexToBytes(previous);
            const block = {};
            block.type = 'state';
            block.account = accountAddress;
            block.previous = previous;
            block.representative = representative;
            block.balance = remainingDecimal;
            const work = await bananodeApi.getGeneratedWork(previous);
            block.work = work;
            /* istanbul ignore if */ if (LOG_SEND) console.log('STARTED getAccountPublicKey', destAccount);
            block.link = getAccountPublicKey(destAccount);
            /* istanbul ignore if */ if (LOG_SEND) console.log('SUCCESS getAccountPublicKey', destAccount);
            /* istanbul ignore if */ if (LOG_SEND) console.log('STARTED sign');
            block.signature = await sign(privateKey, block);
            /* istanbul ignore if */ if (LOG_SEND) console.log('SUCCESS sign');
            /* istanbul ignore if */ if (LOG_SEND || LOG_SEND_PROCESS) console.log(`STARTED process`, block);
            const processResponse = await bananodeApi.process(block, 'send');
            /* istanbul ignore if */ if (LOG_SEND || LOG_SEND_PROCESS) console.log(`SUCCESS process`, processResponse);
            return processResponse;
        }
    };
    const open = async (bananodeApi, privateKey, publicKey, representative, pending, pendingValueRaw, accountPrefix)=>{
        const work = await bananodeApi.getGeneratedWork(publicKey);
        const accountAddress = getAccount(publicKey, accountPrefix);
        const block = {};
        block.type = 'state';
        block.account = accountAddress;
        block.previous = '0000000000000000000000000000000000000000000000000000000000000000';
        block.representative = representative;
        block.balance = pendingValueRaw;
        block.link = pending;
        block.work = work;
        block.signature = await sign(privateKey, block);
        // console.log( 'open', block );
        try {
            const processResponse = await bananodeApi.process(block, 'open');
            /* istanbul ignore if */ if (LOG_OPEN) console.log('SUCCESS open', processResponse);
            return processResponse;
        } catch (e) {
            /* istanbul ignore if */ if (LOG_OPEN) console.log('FAILURE open', JSON.stringify(e));
            throw Error(e.message);
        }
    };
    const change = async (bananodeApi, privateKey, representative, accountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (representative === undefined) throw Error('representative is a required parameter.');
        const publicKey = await getPublicKey(privateKey);
        const accountAddress = getAccount(publicKey, accountPrefix);
        const accountInfo = await bananodeApi.getAccountInfo(accountAddress);
        /* istanbul ignore if */ if (accountInfo == undefined) throw Error(`The server's account info cannot be retrieved, please try again.`);
        const previous = accountInfo.frontier;
        const work = await bananodeApi.getGeneratedWork(previous);
        const balanceRaw = accountInfo.balance;
        /* istanbul ignore if */ if (balanceRaw == undefined) throw Error(`The server's account balance cannot be retrieved, please try again.`);
        const remaining = BigInt(balanceRaw);
        const remainingDecimal = remaining.toString(10);
        const block = {};
        block.type = 'state';
        block.account = accountAddress;
        block.previous = previous;
        block.representative = representative;
        block.balance = remainingDecimal;
        block.link = '0000000000000000000000000000000000000000000000000000000000000000';
        block.work = work;
        block.signature = await sign(privateKey, block);
        /* istanbul ignore if */ if (LOG_CHANGE) console.log('STARTED change', block);
        try {
            const processResponse = await bananodeApi.process(block, 'change');
            /* istanbul ignore if */ if (LOG_CHANGE) console.log('SUCCESS change', processResponse);
            return processResponse;
        } catch (e) {
            /* istanbul ignore if */ if (LOG_RECEIVE) console.log('FAILURE receive', JSON.stringify(e));
            throw Error(e.message);
        }
    };
    const receive = async (bananodeApi, privateKey, publicKey, representative, previous, hash, valueRaw, accountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (publicKey === undefined) throw Error('publicKey is a required parameter.');
        /* istanbul ignore if */ if (representative === undefined) throw Error('representative is a required parameter.');
        /* istanbul ignore if */ if (previous === undefined) throw Error('previous is a required parameter.');
        /* istanbul ignore if */ if (hash === undefined) throw Error('hash is a required parameter.');
        /* istanbul ignore if */ if (valueRaw === undefined) throw Error('valueRaw is a required parameter.');
        const work = await bananodeApi.getGeneratedWork(previous);
        const accountAddress = getAccount(publicKey, accountPrefix);
        const block = {};
        block.type = 'state';
        block.account = accountAddress;
        block.previous = previous;
        block.representative = representative;
        block.balance = valueRaw;
        block.link = hash;
        block.work = work;
        block.signature = await sign(privateKey, block);
        /* istanbul ignore if */ if (LOG_RECEIVE) console.log('STARTED receive', block);
        try {
            const processResponse = await bananodeApi.process(block, 'receive');
            /* istanbul ignore if */ if (LOG_RECEIVE) console.log('SUCCESS receive', processResponse);
            return processResponse;
        } catch (e) {
            /* istanbul ignore if */ // console.log('FAILURE receive', e.message);
            throw Error(e.message);
        }
    };
    /**
   * @typedef {Object} AccountValidationInfo
   * @property {string} message - The message describing why the account is valid or not.
   * @property {boolean} valid - True if account is valid.
   */ /**
  * Returns an object saying if the banano account is valid or not.

  * If the account is not valid, the message describes why it is not valid.
  *
  * @memberof BananoUtil
  * @param {string} account the account.
  * @return {AccountValidationInfo} an object saying if the account is valid, and why.
  */ const getBananoAccountValidationInfo = (account)=>{
        if (account === null) return {
            message: 'Invalid BANANO Account (null)',
            valid: false
        };
        if (account === undefined) return {
            message: 'Invalid BANANO Account (undefined)',
            valid: false
        };
        if (account.length == 64) {
            if (!account.startsWith('ban_1') && !account.startsWith('ban_3')) return {
                message: 'Invalid BANANO Account (does not start with ban_1 or ban_3)',
                valid: false
            };
        } else return {
            message: 'Invalid BANANO Account (not 64 characters)',
            valid: false
        };
        const accountCrop = account.substring(4, 64);
        const isValid = /^[13456789abcdefghijkmnopqrstuwxyz]+$/.test(accountCrop);
        if (!isValid) return {
            message: `Invalid BANANO account (characters after ban_ must be one of:13456789abcdefghijkmnopqrstuwxyz)`,
            valid: false
        };
        try {
            getAccountPublicKey(account);
        } catch (error) {
            return {
                message: `Invalid BANANO account (${error.message})`,
                valid: false
            };
        }
        return {
            message: 'valid',
            valid: true
        };
    };
    /**
   * Returns an object saying if the nano account is valid or not.
   * If the account is not valid, the message describes why it is not valid.
   *
   * @memberof BananoUtil
   * @param {string} account the account.
   * @return {AccountValidationInfo} an object saying if the account is valid, and why.
   */ const getNanoAccountValidationInfo = (account)=>{
        if (account === null) return {
            message: 'Invalid NANO Account (null)',
            valid: false
        };
        if (account === undefined) return {
            message: 'Invalid NANO Account (undefined)',
            valid: false
        };
        if (account.length == 65) {
            if (!account.startsWith('nano_1') && !account.startsWith('nano_3')) return {
                message: 'Invalid NANO Account (does not start with nano_1 or nano_3)',
                valid: false
            };
        } else return {
            message: 'Invalid NANO Account (not 65 characters)',
            valid: false
        };
        const accountCrop = account.substring(5, 65);
        const isValid = /^[13456789abcdefghijkmnopqrstuwxyz]+$/.test(accountCrop);
        if (!isValid) return {
            message: `Invalid NANO account (characters after nano_ must be one of:13456789abcdefghijkmnopqrstuwxyz)`,
            valid: false
        };
        try {
            getAccountPublicKey(account);
        } catch (error) {
            return {
                message: `Invalid NANO account (${error.message})`,
                valid: false
            };
        }
        return {
            message: 'valid',
            valid: true
        };
    };
    const isAccountOpen = async (bananodeApi, account)=>{
        const history = await bananodeApi.getAccountHistory(account, 1);
        const historyHistory = history.history;
        const historyHistoryLength = historyHistory.length;
        return historyHistoryLength !== 0;
    };
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.decToHex = decToHex;
        exports.incrementBytes = incrementBytes;
        exports.getNanoAccountValidationInfo = getNanoAccountValidationInfo;
        exports.getBananoAccountValidationInfo = getBananoAccountValidationInfo;
        exports.receive = receive;
        exports.open = open;
        exports.change = change;
        exports.getRawStrFromMajorAmountStr = getRawStrFromMajorAmountStr;
        exports.getRawStrFromMinorAmountStr = getRawStrFromMinorAmountStr;
        exports.getAccount = getAccount;
        exports.getPublicKey = getPublicKey;
        exports.getPrivateKey = getPrivateKey;
        exports.hash = hash1;
        exports.sign = sign;
        exports.signHash = signHash;
        exports.verify = verify;
        exports.getAccountPublicKey = getAccountPublicKey;
        exports.send = send;
        exports.getHashCPUWorker = getHashCPUWorker;
        exports.getZeroedWorkBytes = getZeroedWorkBytes;
        exports.bytesToHex = bytesToHex;
        exports.hexToBytes = hexToBytes;
        exports.isWorkValid = isWorkValid;
        exports.getAmountPartsFromRaw = getAmountPartsFromRaw;
        exports.sendFromPrivateKey = sendFromPrivateKey;
        exports.sendFromPrivateKeyWithRepresentative = sendFromPrivateKeyWithRepresentative;
        exports.sendFromPrivateKeyWithRepresentativeAndPrevious = sendFromPrivateKeyWithRepresentativeAndPrevious;
        exports.getAccountSuffix = getAccountSuffix;
        exports.isAccountSuffixValid = isAccountSuffixValid;
        exports.isAccountOpen = isAccountOpen;
        exports.isSeedValid = isSeedValid;
        return exports;
    })();
    // istanbul ignore else
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.bananocoin.bananojs.bananoUtil = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});
parcelRequire.register("E2LX7", function(module, exports) {

// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    // Blake2B in pure Javascript
    // Adapted from the reference implementation in RFC7693
    // Ported to Javascript by DC - https://github.com/dcposch
    const util = (parcelRequire("7U8KF"));
    // 64-bit unsigned addition
    // Sets v[a,a+1] += v[b,b+1]
    // v should be a Uint32Array
    function ADD64AA(v, a, b) {
        const o0 = v[a] + v[b];
        let o1 = v[a + 1] + v[b + 1];
        if (o0 >= 0x100000000) o1++;
        v[a] = o0;
        v[a + 1] = o1;
    }
    // 64-bit unsigned addition
    // Sets v[a,a+1] += b
    // b0 is the low 32 bits of b, b1 represents the high 32 bits
    function ADD64AC(v, a, b0, b1) {
        let o0 = v[a] + b0;
        if (b0 < 0) o0 += 0x100000000;
        let o1 = v[a + 1] + b1;
        if (o0 >= 0x100000000) o1++;
        v[a] = o0;
        v[a + 1] = o1;
    }
    // Little-endian byte access
    function B2B_GET32(arr, i) {
        return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
    }
    // G Mixing function
    // The ROTRs are inlined for speed
    function B2B_G(a, b, c, d, ix, iy) {
        const x0 = m[ix];
        const x1 = m[ix + 1];
        const y0 = m[iy];
        const y1 = m[iy + 1];
        ADD64AA(v1, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
        ADD64AC(v1, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits
        // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
        let xor0 = v1[d] ^ v1[a];
        let xor1 = v1[d + 1] ^ v1[a + 1];
        v1[d] = xor1;
        v1[d + 1] = xor0;
        ADD64AA(v1, c, d);
        // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
        xor0 = v1[b] ^ v1[c];
        xor1 = v1[b + 1] ^ v1[c + 1];
        v1[b] = xor0 >>> 24 ^ xor1 << 8;
        v1[b + 1] = xor1 >>> 24 ^ xor0 << 8;
        ADD64AA(v1, a, b);
        ADD64AC(v1, a, y0, y1);
        // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
        xor0 = v1[d] ^ v1[a];
        xor1 = v1[d + 1] ^ v1[a + 1];
        v1[d] = xor0 >>> 16 ^ xor1 << 16;
        v1[d + 1] = xor1 >>> 16 ^ xor0 << 16;
        ADD64AA(v1, c, d);
        // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
        xor0 = v1[b] ^ v1[c];
        xor1 = v1[b + 1] ^ v1[c + 1];
        v1[b] = xor1 >>> 31 ^ xor0 << 1;
        v1[b + 1] = xor0 >>> 31 ^ xor1 << 1;
    }
    // Initialization Vector
    const BLAKE2B_IV32 = new Uint32Array([
        0xF3BCC908,
        0x6A09E667,
        0x84CAA73B,
        0xBB67AE85,
        0xFE94F82B,
        0x3C6EF372,
        0x5F1D36F1,
        0xA54FF53A,
        0xADE682D1,
        0x510E527F,
        0x2B3E6C1F,
        0x9B05688C,
        0xFB41BD6B,
        0x1F83D9AB,
        0x137E2179,
        0x5BE0CD19, 
    ]);
    const SIGMA8 = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        14,
        10,
        4,
        8,
        9,
        15,
        13,
        6,
        1,
        12,
        0,
        2,
        11,
        7,
        5,
        3,
        11,
        8,
        12,
        0,
        5,
        2,
        15,
        13,
        10,
        14,
        3,
        6,
        7,
        1,
        9,
        4,
        7,
        9,
        3,
        1,
        13,
        12,
        11,
        14,
        2,
        6,
        5,
        10,
        4,
        0,
        15,
        8,
        9,
        0,
        5,
        7,
        2,
        4,
        10,
        15,
        14,
        1,
        11,
        12,
        6,
        8,
        3,
        13,
        2,
        12,
        6,
        10,
        0,
        11,
        8,
        3,
        4,
        13,
        7,
        5,
        15,
        14,
        1,
        9,
        12,
        5,
        1,
        15,
        14,
        13,
        4,
        10,
        0,
        7,
        6,
        3,
        9,
        2,
        8,
        11,
        13,
        11,
        7,
        14,
        12,
        1,
        3,
        9,
        5,
        0,
        15,
        4,
        8,
        6,
        2,
        10,
        6,
        15,
        14,
        9,
        11,
        3,
        0,
        8,
        12,
        2,
        13,
        7,
        1,
        4,
        10,
        5,
        10,
        2,
        8,
        4,
        7,
        6,
        1,
        5,
        15,
        11,
        9,
        14,
        3,
        12,
        13,
        0,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        14,
        10,
        4,
        8,
        9,
        15,
        13,
        6,
        1,
        12,
        0,
        2,
        11,
        7,
        5,
        3, 
    ];
    // These are offsets into a uint64 buffer.
    // Multiply them all by 2 to make them offsets into a uint32 buffer,
    // because this is Javascript and we don't have uint64s
    const SIGMA82 = new Uint8Array(SIGMA8.map(function(x) {
        return x * 2;
    }));
    // Compression function. 'last' flag indicates last block.
    // Note we're representing 16 uint64s as 32 uint32s
    var v1 = new Uint32Array(32);
    var m = new Uint32Array(32);
    function blake2bCompress(ctx, last) {
        let i = 0;
        // init work variables
        for(i = 0; i < 16; i++){
            v1[i] = ctx.h[i];
            v1[i + 16] = BLAKE2B_IV32[i];
        }
        // low 64 bits of offset
        v1[24] = v1[24] ^ ctx.t;
        v1[25] = v1[25] ^ ctx.t / 0x100000000;
        // high 64 bits not supported, offset may not be higher than 2**53-1
        // last block flag set ?
        if (last) {
            v1[28] = ~v1[28];
            v1[29] = ~v1[29];
        }
        // get little-endian words
        for(i = 0; i < 32; i++)m[i] = B2B_GET32(ctx.b, 4 * i);
        // twelve rounds of mixing
        // uncomment the DebugPrint calls to log the computation
        // and match the RFC sample documentation
        // util.debugPrint('          m[16]', m, 64)
        for(i = 0; i < 12; i++){
            // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
            B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
            B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
            B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
            B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
            B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
            B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
            B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
            B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
        }
        // util.debugPrint('   (i=12) v[16]', v, 64)
        for(i = 0; i < 16; i++)ctx.h[i] = ctx.h[i] ^ v1[i] ^ v1[i + 16];
    // util.debugPrint('h[8]', ctx.h, 64)
    }
    // Creates a BLAKE2b hashing context
    // Requires an output length between 1 and 64 bytes
    // Takes an optional Uint8Array key
    function blake2bInit(outlen, key) {
        if (outlen === 0 || outlen > 64) throw new Error('Illegal output length, expected 0 < length <= 64');
        if (key && key.length > 64) throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64');
        // state, 'param block'
        const ctx = {
            b: new Uint8Array(128),
            h: new Uint32Array(16),
            t: 0,
            c: 0,
            outlen: outlen
        };
        // initialize hash state
        for(let i = 0; i < 16; i++)ctx.h[i] = BLAKE2B_IV32[i];
        const keylen = key ? key.length : 0;
        ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen;
        // key the hash, if applicable
        if (key) {
            blake2bUpdate(ctx, key);
            // at the end
            ctx.c = 128;
        }
        return ctx;
    }
    // Updates a BLAKE2b streaming hash
    // Requires hash context and Uint8Array (byte array)
    function blake2bUpdate(ctx, input) {
        for(let i = 0; i < input.length; i++){
            if (ctx.c === 128) {
                ctx.t += ctx.c; // add counters
                blake2bCompress(ctx, false); // compress (not last)
                ctx.c = 0; // counter to zero
            }
            ctx.b[ctx.c++] = input[i];
        }
    }
    // Completes a BLAKE2b streaming hash
    // Returns a Uint8Array containing the message digest
    function blake2bFinal(ctx) {
        ctx.t += ctx.c; // mark last block offset
        while(ctx.c < 128)ctx.b[ctx.c++] = 0;
        blake2bCompress(ctx, true); // final block flag = 1
        // little endian convert and store
        const out = new Uint8Array(ctx.outlen);
        for(let i = 0; i < ctx.outlen; i++)out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
        return out;
    }
    // Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
    //
    // Returns a n-byte Uint8Array
    //
    // Parameters:
    // - input - the input bytes, as a string, Buffer or Uint8Array
    // - key - optional key Uint8Array, up to 64 bytes
    // - outlen - optional output length in bytes, default 64
    function blake2b(input, key, outlen) {
        // preprocess inputs
        outlen = outlen || 64;
        input = util.normalizeInput(input);
        // do the math
        const ctx = blake2bInit(outlen, key);
        blake2bUpdate(ctx, input);
        return blake2bFinal(ctx);
    }
    // Computes the BLAKE2B hash of a string or byte array
    //
    // Returns an n-byte hash in hex, all lowercase
    //
    // Parameters:
    // - input - the input bytes, as a string, Buffer, or Uint8Array
    // - key - optional key Uint8Array, up to 64 bytes
    // - outlen - optional output length in bytes, default 64
    function blake2bHex(input, key, outlen) {
        const output = blake2b(input, key, outlen);
        return util.toHex(output);
    }
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.blake2b = blake2b;
        exports.blake2bHex = blake2bHex;
        exports.blake2bInit = blake2bInit;
        exports.blake2bUpdate = blake2bUpdate;
        exports.blake2bFinal = blake2bFinal;
        return exports;
    })();
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.blakejs = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});
parcelRequire.register("7U8KF", function(module, exports) {

var $gGU47 = parcelRequire("gGU47");
var $5c148d4b870fa5e7$require$Buffer = $gGU47.Buffer;
// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';
    // For convenience, let people hash a string, not just a Uint8Array
    function normalizeInput(input) {
        let ret;
        if (input instanceof Uint8Array) ret = input;
        else if (input instanceof $5c148d4b870fa5e7$require$Buffer) ret = new Uint8Array(input);
        else if (typeof input === 'string') ret = new Uint8Array($5c148d4b870fa5e7$require$Buffer.from(input, 'utf8'));
        else throw new Error(ERROR_MSG_INPUT);
        return ret;
    }
    // Converts a Uint8Array to a hexadecimal string
    // For example, toHex([255, 0, 255]) returns "ff00ff"
    function toHex(bytes) {
        return Array.prototype.map.call(bytes, function(n) {
            return (n < 16 ? '0' : '') + n.toString(16);
        }).join('');
    }
    // Converts any value in [0...2^32-1] to an 8-character hex string
    function uint32ToHex(val) {
        return (0x100000000 + val).toString(16).substring(1);
    }
    // For debugging: prints out hash state in the same format as the RFC
    // sample computation exactly, so that you can diff
    function debugPrint(label, arr, size) {
        let msg = '\n' + label + ' = ';
        for(let i = 0; i < arr.length; i += 2){
            if (size === 32) {
                msg += uint32ToHex(arr[i]).toUpperCase();
                msg += ' ';
                msg += uint32ToHex(arr[i + 1]).toUpperCase();
            } else if (size === 64) {
                msg += uint32ToHex(arr[i + 1]).toUpperCase();
                msg += uint32ToHex(arr[i]).toUpperCase();
            } else throw new Error('Invalid size ' + size);
            if (i % 6 === 4) msg += '\n' + new Array(label.length + 4).join(' ');
            else if (i < arr.length - 2) msg += ' ';
        }
        console.log(msg);
    }
    // For performance testing: generates N bytes of input, hashes M times
    // Measures and prints MB/second hash performance each time
    function testSpeed(hashFn, N, M) {
        let startMs = new Date().getTime();
        const input = new Uint8Array(N);
        for(var i = 0; i < N; i++)input[i] = i % 256;
        const genMs = new Date().getTime();
        console.log('Generated random input in ' + (genMs - startMs) + 'ms');
        startMs = genMs;
        for(i = 0; i < M; i++){
            const hashHex = hashFn(input);
            const hashMs = new Date().getTime();
            const ms = hashMs - startMs;
            startMs = hashMs;
            console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
            console.log(Math.round(N / 1048576 / (ms / 1000) * 100) / 100 + ' MB PER SECOND');
        }
    }
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.normalizeInput = normalizeInput;
        exports.toHex = toHex;
        exports.debugPrint = debugPrint;
        exports.testSpeed = testSpeed;
        return exports;
    })();
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.blakejsUtil = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});
parcelRequire.register("gGU47", function(module, exports) {

$parcel$export(module.exports, "Buffer", function () { return $c26c0eff31d13e46$export$a143d493d941bafc; }, function (v) { return $c26c0eff31d13e46$export$a143d493d941bafc = v; });
$parcel$export(module.exports, "SlowBuffer", function () { return $c26c0eff31d13e46$export$e4cf37d7f6fb9e0a; }, function (v) { return $c26c0eff31d13e46$export$e4cf37d7f6fb9e0a = v; });
$parcel$export(module.exports, "INSPECT_MAX_BYTES", function () { return $c26c0eff31d13e46$export$f99ded8fe4b79145; }, function (v) { return $c26c0eff31d13e46$export$f99ded8fe4b79145 = v; });
$parcel$export(module.exports, "kMaxLength", function () { return $c26c0eff31d13e46$export$599f31c3813fae4d; }, function (v) { return $c26c0eff31d13e46$export$599f31c3813fae4d = v; });
var $c26c0eff31d13e46$export$a143d493d941bafc;
var $c26c0eff31d13e46$export$e4cf37d7f6fb9e0a;
var $c26c0eff31d13e46$export$f99ded8fe4b79145;
var $c26c0eff31d13e46$export$599f31c3813fae4d;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';

var $5wxBn = parcelRequire("5wxBn");

var $3LXLJ = parcelRequire("3LXLJ");
var $c26c0eff31d13e46$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
 ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
$c26c0eff31d13e46$export$a143d493d941bafc = $c26c0eff31d13e46$var$Buffer;
$c26c0eff31d13e46$export$e4cf37d7f6fb9e0a = $c26c0eff31d13e46$var$SlowBuffer;
$c26c0eff31d13e46$export$f99ded8fe4b79145 = 50;
var $c26c0eff31d13e46$var$K_MAX_LENGTH = 0x7fffffff;
$c26c0eff31d13e46$export$599f31c3813fae4d = $c26c0eff31d13e46$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $c26c0eff31d13e46$var$Buffer.TYPED_ARRAY_SUPPORT = $c26c0eff31d13e46$var$typedArraySupport();
if (!$c26c0eff31d13e46$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $c26c0eff31d13e46$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($c26c0eff31d13e46$var$Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!$c26c0eff31d13e46$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($c26c0eff31d13e46$var$Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!$c26c0eff31d13e46$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $c26c0eff31d13e46$var$createBuffer(length) {
    if (length > $c26c0eff31d13e46$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $c26c0eff31d13e46$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $c26c0eff31d13e46$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return $c26c0eff31d13e46$var$allocUnsafe(arg);
    }
    return $c26c0eff31d13e46$var$from(arg, encodingOrOffset, length);
}
$c26c0eff31d13e46$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $c26c0eff31d13e46$var$from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return $c26c0eff31d13e46$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $c26c0eff31d13e46$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($c26c0eff31d13e46$var$isInstance(value, ArrayBuffer) || value && $c26c0eff31d13e46$var$isInstance(value.buffer, ArrayBuffer)) return $c26c0eff31d13e46$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && ($c26c0eff31d13e46$var$isInstance(value, SharedArrayBuffer) || value && $c26c0eff31d13e46$var$isInstance(value.buffer, SharedArrayBuffer))) return $c26c0eff31d13e46$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $c26c0eff31d13e46$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $c26c0eff31d13e46$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $c26c0eff31d13e46$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $c26c0eff31d13e46$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $c26c0eff31d13e46$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($c26c0eff31d13e46$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($c26c0eff31d13e46$var$Buffer, Uint8Array);
function $c26c0eff31d13e46$var$assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $c26c0eff31d13e46$var$alloc(size, fill, encoding) {
    $c26c0eff31d13e46$var$assertSize(size);
    if (size <= 0) return $c26c0eff31d13e46$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? $c26c0eff31d13e46$var$createBuffer(size).fill(fill, encoding) : $c26c0eff31d13e46$var$createBuffer(size).fill(fill);
    return $c26c0eff31d13e46$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $c26c0eff31d13e46$var$Buffer.alloc = function(size, fill, encoding) {
    return $c26c0eff31d13e46$var$alloc(size, fill, encoding);
};
function $c26c0eff31d13e46$var$allocUnsafe(size) {
    $c26c0eff31d13e46$var$assertSize(size);
    return $c26c0eff31d13e46$var$createBuffer(size < 0 ? 0 : $c26c0eff31d13e46$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $c26c0eff31d13e46$var$Buffer.allocUnsafe = function(size) {
    return $c26c0eff31d13e46$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $c26c0eff31d13e46$var$Buffer.allocUnsafeSlow = function(size) {
    return $c26c0eff31d13e46$var$allocUnsafe(size);
};
function $c26c0eff31d13e46$var$fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!$c26c0eff31d13e46$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = $c26c0eff31d13e46$var$byteLength(string, encoding) | 0;
    var buf = $c26c0eff31d13e46$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $c26c0eff31d13e46$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $c26c0eff31d13e46$var$checked(array.length) | 0;
    var buf = $c26c0eff31d13e46$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $c26c0eff31d13e46$var$fromArrayView(arrayView) {
    if ($c26c0eff31d13e46$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $c26c0eff31d13e46$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $c26c0eff31d13e46$var$fromArrayLike(arrayView);
}
function $c26c0eff31d13e46$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $c26c0eff31d13e46$var$Buffer.prototype);
    return buf;
}
function $c26c0eff31d13e46$var$fromObject(obj) {
    if ($c26c0eff31d13e46$var$Buffer.isBuffer(obj)) {
        var len = $c26c0eff31d13e46$var$checked(obj.length) | 0;
        var buf = $c26c0eff31d13e46$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || $c26c0eff31d13e46$var$numberIsNaN(obj.length)) return $c26c0eff31d13e46$var$createBuffer(0);
        return $c26c0eff31d13e46$var$fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $c26c0eff31d13e46$var$fromArrayLike(obj.data);
}
function $c26c0eff31d13e46$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $c26c0eff31d13e46$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $c26c0eff31d13e46$var$K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function $c26c0eff31d13e46$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $c26c0eff31d13e46$var$Buffer.alloc(+length);
}
$c26c0eff31d13e46$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $c26c0eff31d13e46$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$c26c0eff31d13e46$var$Buffer.compare = function compare(a, b) {
    if ($c26c0eff31d13e46$var$isInstance(a, Uint8Array)) a = $c26c0eff31d13e46$var$Buffer.from(a, a.offset, a.byteLength);
    if ($c26c0eff31d13e46$var$isInstance(b, Uint8Array)) b = $c26c0eff31d13e46$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$c26c0eff31d13e46$var$Buffer.isBuffer(a) || !$c26c0eff31d13e46$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$c26c0eff31d13e46$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
$c26c0eff31d13e46$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $c26c0eff31d13e46$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $c26c0eff31d13e46$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($c26c0eff31d13e46$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $c26c0eff31d13e46$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$c26c0eff31d13e46$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $c26c0eff31d13e46$var$byteLength(string, encoding) {
    if ($c26c0eff31d13e46$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $c26c0eff31d13e46$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return $c26c0eff31d13e46$var$utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return $c26c0eff31d13e46$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $c26c0eff31d13e46$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
$c26c0eff31d13e46$var$Buffer.byteLength = $c26c0eff31d13e46$var$byteLength;
function $c26c0eff31d13e46$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return $c26c0eff31d13e46$var$hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return $c26c0eff31d13e46$var$utf8Slice(this, start, end);
        case 'ascii':
            return $c26c0eff31d13e46$var$asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return $c26c0eff31d13e46$var$latin1Slice(this, start, end);
        case 'base64':
            return $c26c0eff31d13e46$var$base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $c26c0eff31d13e46$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$c26c0eff31d13e46$var$Buffer.prototype._isBuffer = true;
function $c26c0eff31d13e46$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$c26c0eff31d13e46$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)$c26c0eff31d13e46$var$swap(this, i, i + 1);
    return this;
};
$c26c0eff31d13e46$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        $c26c0eff31d13e46$var$swap(this, i, i + 3);
        $c26c0eff31d13e46$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$c26c0eff31d13e46$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        $c26c0eff31d13e46$var$swap(this, i, i + 7);
        $c26c0eff31d13e46$var$swap(this, i + 1, i + 6);
        $c26c0eff31d13e46$var$swap(this, i + 2, i + 5);
        $c26c0eff31d13e46$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$c26c0eff31d13e46$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return $c26c0eff31d13e46$var$utf8Slice(this, 0, length);
    return $c26c0eff31d13e46$var$slowToString.apply(this, arguments);
};
$c26c0eff31d13e46$var$Buffer.prototype.toLocaleString = $c26c0eff31d13e46$var$Buffer.prototype.toString;
$c26c0eff31d13e46$var$Buffer.prototype.equals = function equals(b) {
    if (!$c26c0eff31d13e46$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return $c26c0eff31d13e46$var$Buffer.compare(this, b) === 0;
};
$c26c0eff31d13e46$var$Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = $c26c0eff31d13e46$export$f99ded8fe4b79145;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if ($c26c0eff31d13e46$var$customInspectSymbol) $c26c0eff31d13e46$var$Buffer.prototype[$c26c0eff31d13e46$var$customInspectSymbol] = $c26c0eff31d13e46$var$Buffer.prototype.inspect;
$c26c0eff31d13e46$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($c26c0eff31d13e46$var$isInstance(target, Uint8Array)) target = $c26c0eff31d13e46$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$c26c0eff31d13e46$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $c26c0eff31d13e46$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($c26c0eff31d13e46$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = $c26c0eff31d13e46$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($c26c0eff31d13e46$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $c26c0eff31d13e46$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $c26c0eff31d13e46$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function $c26c0eff31d13e46$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
$c26c0eff31d13e46$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$c26c0eff31d13e46$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $c26c0eff31d13e46$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$c26c0eff31d13e46$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $c26c0eff31d13e46$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $c26c0eff31d13e46$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($c26c0eff31d13e46$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $c26c0eff31d13e46$var$utf8Write(buf, string, offset, length) {
    return $c26c0eff31d13e46$var$blitBuffer($c26c0eff31d13e46$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $c26c0eff31d13e46$var$asciiWrite(buf, string, offset, length) {
    return $c26c0eff31d13e46$var$blitBuffer($c26c0eff31d13e46$var$asciiToBytes(string), buf, offset, length);
}
function $c26c0eff31d13e46$var$base64Write(buf, string, offset, length) {
    return $c26c0eff31d13e46$var$blitBuffer($c26c0eff31d13e46$var$base64ToBytes(string), buf, offset, length);
}
function $c26c0eff31d13e46$var$ucs2Write(buf, string, offset, length) {
    return $c26c0eff31d13e46$var$blitBuffer($c26c0eff31d13e46$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$c26c0eff31d13e46$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return $c26c0eff31d13e46$var$hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return $c26c0eff31d13e46$var$utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return $c26c0eff31d13e46$var$asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return $c26c0eff31d13e46$var$base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $c26c0eff31d13e46$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
$c26c0eff31d13e46$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $c26c0eff31d13e46$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $5wxBn.fromByteArray(buf);
    else return $5wxBn.fromByteArray(buf.slice(start, end));
}
function $c26c0eff31d13e46$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $c26c0eff31d13e46$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $c26c0eff31d13e46$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $c26c0eff31d13e46$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $c26c0eff31d13e46$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $c26c0eff31d13e46$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $c26c0eff31d13e46$var$asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $c26c0eff31d13e46$var$latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $c26c0eff31d13e46$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += $c26c0eff31d13e46$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $c26c0eff31d13e46$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$c26c0eff31d13e46$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $c26c0eff31d13e46$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $c26c0eff31d13e46$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
$c26c0eff31d13e46$var$Buffer.prototype.readUintLE = $c26c0eff31d13e46$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$c26c0eff31d13e46$var$Buffer.prototype.readUintBE = $c26c0eff31d13e46$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$c26c0eff31d13e46$var$Buffer.prototype.readUint8 = $c26c0eff31d13e46$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$c26c0eff31d13e46$var$Buffer.prototype.readUint16LE = $c26c0eff31d13e46$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$c26c0eff31d13e46$var$Buffer.prototype.readUint16BE = $c26c0eff31d13e46$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$c26c0eff31d13e46$var$Buffer.prototype.readUint32LE = $c26c0eff31d13e46$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$c26c0eff31d13e46$var$Buffer.prototype.readUint32BE = $c26c0eff31d13e46$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$c26c0eff31d13e46$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$c26c0eff31d13e46$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$c26c0eff31d13e46$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$c26c0eff31d13e46$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$c26c0eff31d13e46$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$c26c0eff31d13e46$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$c26c0eff31d13e46$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$c26c0eff31d13e46$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 4, this.length);
    return $3LXLJ.read(this, offset, true, 23, 4);
};
$c26c0eff31d13e46$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 4, this.length);
    return $3LXLJ.read(this, offset, false, 23, 4);
};
$c26c0eff31d13e46$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 8, this.length);
    return $3LXLJ.read(this, offset, true, 52, 8);
};
$c26c0eff31d13e46$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkOffset(offset, 8, this.length);
    return $3LXLJ.read(this, offset, false, 52, 8);
};
function $c26c0eff31d13e46$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$c26c0eff31d13e46$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
$c26c0eff31d13e46$var$Buffer.prototype.writeUintLE = $c26c0eff31d13e46$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $c26c0eff31d13e46$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeUintBE = $c26c0eff31d13e46$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $c26c0eff31d13e46$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeUint8 = $c26c0eff31d13e46$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeUint16LE = $c26c0eff31d13e46$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeUint16BE = $c26c0eff31d13e46$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeUint32LE = $c26c0eff31d13e46$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeUint32BE = $c26c0eff31d13e46$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $c26c0eff31d13e46$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $c26c0eff31d13e46$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$c26c0eff31d13e46$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $c26c0eff31d13e46$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function $c26c0eff31d13e46$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $3LXLJ.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$c26c0eff31d13e46$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $c26c0eff31d13e46$var$writeFloat(this, value, offset, true, noAssert);
};
$c26c0eff31d13e46$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $c26c0eff31d13e46$var$writeFloat(this, value, offset, false, noAssert);
};
function $c26c0eff31d13e46$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c26c0eff31d13e46$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $3LXLJ.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$c26c0eff31d13e46$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $c26c0eff31d13e46$var$writeDouble(this, value, offset, true, noAssert);
};
$c26c0eff31d13e46$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $c26c0eff31d13e46$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$c26c0eff31d13e46$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$c26c0eff31d13e46$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$c26c0eff31d13e46$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !$c26c0eff31d13e46$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $c26c0eff31d13e46$var$Buffer.isBuffer(val) ? val : $c26c0eff31d13e46$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $c26c0eff31d13e46$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $c26c0eff31d13e46$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($c26c0eff31d13e46$var$INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function $c26c0eff31d13e46$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function $c26c0eff31d13e46$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $c26c0eff31d13e46$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $c26c0eff31d13e46$var$base64ToBytes(str) {
    return $5wxBn.toByteArray($c26c0eff31d13e46$var$base64clean(str));
}
function $c26c0eff31d13e46$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $c26c0eff31d13e46$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $c26c0eff31d13e46$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $c26c0eff31d13e46$var$hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

});
parcelRequire.register("5wxBn", function(module, exports) {

$parcel$export(module.exports, "toByteArray", function () { return $405a018a0854aaa1$export$d622b2ad8d90c771; }, function (v) { return $405a018a0854aaa1$export$d622b2ad8d90c771 = v; });
$parcel$export(module.exports, "fromByteArray", function () { return $405a018a0854aaa1$export$6100ba28696e12de; }, function (v) { return $405a018a0854aaa1$export$6100ba28696e12de = v; });
var $405a018a0854aaa1$export$a48f0734ac7c2329;
var $405a018a0854aaa1$export$d622b2ad8d90c771;
var $405a018a0854aaa1$export$6100ba28696e12de;
'use strict';
$405a018a0854aaa1$export$a48f0734ac7c2329 = $405a018a0854aaa1$var$byteLength;
$405a018a0854aaa1$export$d622b2ad8d90c771 = $405a018a0854aaa1$var$toByteArray;
$405a018a0854aaa1$export$6100ba28696e12de = $405a018a0854aaa1$var$fromByteArray;
var $405a018a0854aaa1$var$lookup = [];
var $405a018a0854aaa1$var$revLookup = [];
var $405a018a0854aaa1$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $405a018a0854aaa1$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $405a018a0854aaa1$var$i = 0, $405a018a0854aaa1$var$len = $405a018a0854aaa1$var$code.length; $405a018a0854aaa1$var$i < $405a018a0854aaa1$var$len; ++$405a018a0854aaa1$var$i){
    $405a018a0854aaa1$var$lookup[$405a018a0854aaa1$var$i] = $405a018a0854aaa1$var$code[$405a018a0854aaa1$var$i];
    $405a018a0854aaa1$var$revLookup[$405a018a0854aaa1$var$code.charCodeAt($405a018a0854aaa1$var$i)] = $405a018a0854aaa1$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$405a018a0854aaa1$var$revLookup['-'.charCodeAt(0)] = 62;
$405a018a0854aaa1$var$revLookup['_'.charCodeAt(0)] = 63;
function $405a018a0854aaa1$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $405a018a0854aaa1$var$byteLength(b64) {
    var lens = $405a018a0854aaa1$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $405a018a0854aaa1$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $405a018a0854aaa1$var$toByteArray(b64) {
    var tmp;
    var lens = $405a018a0854aaa1$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $405a018a0854aaa1$var$Arr($405a018a0854aaa1$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i)] << 18 | $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i)] << 2 | $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i)] << 10 | $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $405a018a0854aaa1$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $405a018a0854aaa1$var$tripletToBase64(num) {
    return $405a018a0854aaa1$var$lookup[num >> 18 & 0x3F] + $405a018a0854aaa1$var$lookup[num >> 12 & 0x3F] + $405a018a0854aaa1$var$lookup[num >> 6 & 0x3F] + $405a018a0854aaa1$var$lookup[num & 0x3F];
}
function $405a018a0854aaa1$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($405a018a0854aaa1$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $405a018a0854aaa1$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($405a018a0854aaa1$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($405a018a0854aaa1$var$lookup[tmp >> 2] + $405a018a0854aaa1$var$lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($405a018a0854aaa1$var$lookup[tmp >> 10] + $405a018a0854aaa1$var$lookup[tmp >> 4 & 0x3F] + $405a018a0854aaa1$var$lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}

});

parcelRequire.register("3LXLJ", function(module, exports) {

$parcel$export(module.exports, "read", function () { return $2bf41fb6db0b4b4b$export$aafa59e2e03f2942; }, function (v) { return $2bf41fb6db0b4b4b$export$aafa59e2e03f2942 = v; });
$parcel$export(module.exports, "write", function () { return $2bf41fb6db0b4b4b$export$68d8715fc104d294; }, function (v) { return $2bf41fb6db0b4b4b$export$68d8715fc104d294 = v; });
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $2bf41fb6db0b4b4b$export$aafa59e2e03f2942;
var $2bf41fb6db0b4b4b$export$68d8715fc104d294;
$2bf41fb6db0b4b4b$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$2bf41fb6db0b4b4b$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});




parcelRequire.register("aEibP", function(module, exports) {
'use strict';


// STARTED TOP nodejs/browser hack
(function() {
    const exports1 = (()=>{
        const exports = {};
        // FINISHED TOP nodejs/browser hack
        const blake = (parcelRequire("E2LX7"));
        // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
        // Public domain.
        //
        // Implementation derived from TweetNaCl version 20140427.
        // See for details: http://tweetexports.cr.yp.to/
        const u64 = function(h, l) {
            this.hi = h | 0;
            this.lo = l | 0;
        };
        const gf = function(init) {
            let i;
            const r = new Float64Array(16);
            if (init) for(i = 0; i < init.length; i++)r[i] = init[i];
            return r;
        };
        // Pluggable, initialized in high-level API below.
        let randombytes = function() {
            throw new Error('no PRNG');
        };
        const _0 = new Uint8Array(16);
        const _9 = new Uint8Array(32);
        _9[0] = 9;
        const gf0 = gf();
        const gf1 = gf([
            1
        ]);
        const _121665 = gf([
            0xdb41,
            1
        ]);
        const D = gf([
            0x78a3,
            0x1359,
            0x4dca,
            0x75eb,
            0xd8ab,
            0x4141,
            0x0a4d,
            0x0070,
            0xe898,
            0x7779,
            0x4079,
            0x8cc7,
            0xfe73,
            0x2b6f,
            0x6cee,
            0x5203
        ]);
        const D2 = gf([
            0xf159,
            0x26b2,
            0x9b94,
            0xebd6,
            0xb156,
            0x8283,
            0x149a,
            0x00e0,
            0xd130,
            0xeef3,
            0x80f2,
            0x198e,
            0xfce7,
            0x56df,
            0xd9dc,
            0x2406
        ]);
        const X = gf([
            0xd51a,
            0x8f25,
            0x2d60,
            0xc956,
            0xa7b2,
            0x9525,
            0xc760,
            0x692c,
            0xdc5c,
            0xfdd6,
            0xe231,
            0xc0a4,
            0x53fe,
            0xcd6e,
            0x36d3,
            0x2169
        ]);
        const Y = gf([
            0x6658,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666,
            0x6666
        ]);
        const I = gf([
            0xa0b0,
            0x4a0e,
            0x1b27,
            0xc4ee,
            0xe478,
            0xad2f,
            0x1806,
            0x2f43,
            0xd7a7,
            0x3dfb,
            0x0099,
            0x2b4d,
            0xdf0b,
            0x4fc1,
            0x2480,
            0x2b83
        ]);
        function L32(x, c) {
            return x << c | x >>> 32 - c;
        }
        function ld32(x, i) {
            let u = x[i + 3] & 0xff;
            u = u << 8 | x[i + 2] & 0xff;
            u = u << 8 | x[i + 1] & 0xff;
            return u << 8 | x[i + 0] & 0xff;
        }
        function dl64(x, i) {
            const h = x[i] << 24 | x[i + 1] << 16 | x[i + 2] << 8 | x[i + 3];
            const l = x[i + 4] << 24 | x[i + 5] << 16 | x[i + 6] << 8 | x[i + 7];
            return new u64(h, l);
        }
        function st32(x, j, u) {
            let i;
            for(i = 0; i < 4; i++){
                x[j + i] = u & 255;
                u >>>= 8;
            }
        }
        function ts64(x, i, u) {
            x[i] = u.hi >> 24 & 0xff;
            x[i + 1] = u.hi >> 16 & 0xff;
            x[i + 2] = u.hi >> 8 & 0xff;
            x[i + 3] = u.hi & 0xff;
            x[i + 4] = u.lo >> 24 & 0xff;
            x[i + 5] = u.lo >> 16 & 0xff;
            x[i + 6] = u.lo >> 8 & 0xff;
            x[i + 7] = u.lo & 0xff;
        }
        function vn(x, xi, y, yi, n) {
            let i;
            let d = 0;
            for(i = 0; i < n; i++)d |= x[xi + i] ^ y[yi + i];
            return (1 & d - 1 >>> 8) - 1;
        }
        function crypto_verify_16(x, xi, y, yi) {
            return vn(x, xi, y, yi, 16);
        }
        function crypto_verify_32(x, xi, y, yi) {
            return vn(x, xi, y, yi, 32);
        }
        function core(out, inp, k, c, h) {
            const w = new Uint32Array(16);
            const x = new Uint32Array(16);
            const y = new Uint32Array(16);
            const t = new Uint32Array(4);
            let i;
            let j;
            let m;
            for(i = 0; i < 4; i++){
                x[5 * i] = ld32(c, 4 * i);
                x[1 + i] = ld32(k, 4 * i);
                x[6 + i] = ld32(inp, 4 * i);
                x[11 + i] = ld32(k, 16 + 4 * i);
            }
            for(i = 0; i < 16; i++)y[i] = x[i];
            for(i = 0; i < 20; i++){
                for(j = 0; j < 4; j++){
                    for(m = 0; m < 4; m++)t[m] = x[(5 * j + 4 * m) % 16];
                    t[1] ^= L32(t[0] + t[3] | 0, 7);
                    t[2] ^= L32(t[1] + t[0] | 0, 9);
                    t[3] ^= L32(t[2] + t[1] | 0, 13);
                    t[0] ^= L32(t[3] + t[2] | 0, 18);
                    for(m = 0; m < 4; m++)w[4 * j + (j + m) % 4] = t[m];
                }
                for(m = 0; m < 16; m++)x[m] = w[m];
            }
            if (h) {
                for(i = 0; i < 16; i++)x[i] = x[i] + y[i] | 0;
                for(i = 0; i < 4; i++){
                    x[5 * i] = x[5 * i] - ld32(c, 4 * i) | 0;
                    x[6 + i] = x[6 + i] - ld32(inp, 4 * i) | 0;
                }
                for(i = 0; i < 4; i++){
                    st32(out, 4 * i, x[5 * i]);
                    st32(out, 16 + 4 * i, x[6 + i]);
                }
            } else for(i = 0; i < 16; i++)st32(out, 4 * i, x[i] + y[i] | 0);
        }
        function crypto_core_salsa20(out, inp, k, c) {
            core(out, inp, k, c, false);
            return 0;
        }
        function crypto_core_hsalsa20(out, inp, k, c) {
            core(out, inp, k, c, true);
            return 0;
        }
        const sigma = new Uint8Array([
            101,
            120,
            112,
            97,
            110,
            100,
            32,
            51,
            50,
            45,
            98,
            121,
            116,
            101,
            32,
            107
        ]);
        // "expand 32-byte k"
        function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
            const z = new Uint8Array(16);
            const x = new Uint8Array(64);
            let u;
            let i;
            if (!b) return 0;
            for(i = 0; i < 16; i++)z[i] = 0;
            for(i = 0; i < 8; i++)z[i] = n[i];
            while(b >= 64){
                crypto_core_salsa20(x, z, k, sigma);
                for(i = 0; i < 64; i++)c[cpos + i] = (m ? m[mpos + i] : 0) ^ x[i];
                u = 1;
                for(i = 8; i < 16; i++){
                    u = u + (z[i] & 0xff) | 0;
                    z[i] = u & 0xff;
                    u >>>= 8;
                }
                b -= 64;
                cpos += 64;
                if (m) mpos += 64;
            }
            if (b > 0) {
                crypto_core_salsa20(x, z, k, sigma);
                for(i = 0; i < b; i++)c[cpos + i] = (m ? m[mpos + i] : 0) ^ x[i];
            }
            return 0;
        }
        function crypto_stream_salsa20(c, cpos, d, n, k) {
            return crypto_stream_salsa20_xor(c, cpos, null, 0, d, n, k);
        }
        function crypto_stream(c, cpos, d, n, k) {
            const s = new Uint8Array(32);
            crypto_core_hsalsa20(s, n, k, sigma);
            return crypto_stream_salsa20(c, cpos, d, n.subarray(16), s);
        }
        function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
            const s = new Uint8Array(32);
            crypto_core_hsalsa20(s, n, k, sigma);
            return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, n.subarray(16), s);
        }
        function add1305(h, c) {
            let j;
            let u = 0;
            for(j = 0; j < 17; j++){
                u = u + (h[j] + c[j] | 0) | 0;
                h[j] = u & 255;
                u >>>= 8;
            }
        }
        const minusp = new Uint32Array([
            5,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            252
        ]);
        function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
            let s;
            let i;
            let j;
            let u;
            const x = new Uint32Array(17);
            const r = new Uint32Array(17);
            const h = new Uint32Array(17);
            const c = new Uint32Array(17);
            const g = new Uint32Array(17);
            for(j = 0; j < 17; j++)r[j] = h[j] = 0;
            for(j = 0; j < 16; j++)r[j] = k[j];
            r[3] &= 15;
            r[4] &= 252;
            r[7] &= 15;
            r[8] &= 252;
            r[11] &= 15;
            r[12] &= 252;
            r[15] &= 15;
            while(n > 0){
                for(j = 0; j < 17; j++)c[j] = 0;
                for(j = 0; j < 16 && j < n; ++j)c[j] = m[mpos + j];
                c[j] = 1;
                mpos += j;
                n -= j;
                add1305(h, c);
                for(i = 0; i < 17; i++){
                    x[i] = 0;
                    for(j = 0; j < 17; j++)x[i] = x[i] + h[j] * (j <= i ? r[i - j] : 320 * r[i + 17 - j] | 0) | 0;
                }
                for(i = 0; i < 17; i++)h[i] = x[i];
                u = 0;
                for(j = 0; j < 16; j++){
                    u = u + h[j] | 0;
                    h[j] = u & 255;
                    u >>>= 8;
                }
                u = u + h[16] | 0;
                h[16] = u & 3;
                u = 5 * (u >>> 2) | 0;
                for(j = 0; j < 16; j++){
                    u = u + h[j] | 0;
                    h[j] = u & 255;
                    u >>>= 8;
                }
                u = u + h[16] | 0;
                h[16] = u;
            }
            for(j = 0; j < 17; j++)g[j] = h[j];
            add1305(h, minusp);
            s = -(h[16] >>> 7) | 0;
            for(j = 0; j < 17; j++)h[j] ^= s & (g[j] ^ h[j]);
            for(j = 0; j < 16; j++)c[j] = k[j + 16];
            c[16] = 0;
            add1305(h, c);
            for(j = 0; j < 16; j++)out[outpos + j] = h[j];
            return 0;
        }
        function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
            const x = new Uint8Array(16);
            crypto_onetimeauth(x, 0, m, mpos, n, k);
            return crypto_verify_16(h, hpos, x, 0);
        }
        function crypto_secretbox(c, m, d, n, k) {
            let i;
            if (d < 32) return -1;
            crypto_stream_xor(c, 0, m, 0, d, n, k);
            crypto_onetimeauth(c, 16, c, 32, d - 32, c);
            for(i = 0; i < 16; i++)c[i] = 0;
            return 0;
        }
        function crypto_secretbox_open(m, c, d, n, k) {
            let i;
            const x = new Uint8Array(32);
            if (d < 32) return -1;
            crypto_stream(x, 0, 32, n, k);
            if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
            crypto_stream_xor(m, 0, c, 0, d, n, k);
            for(i = 0; i < 32; i++)m[i] = 0;
            return 0;
        }
        function set25519(r, a) {
            let i;
            for(i = 0; i < 16; i++)r[i] = a[i] | 0;
        }
        function car25519(o) {
            let c;
            let i;
            for(i = 0; i < 16; i++){
                o[i] += 65536;
                c = Math.floor(o[i] / 65536);
                o[(i + 1) * (i < 15 ? 1 : 0)] += c - 1 + 37 * (c - 1) * (i === 15 ? 1 : 0);
                o[i] -= c * 65536;
            }
        }
        function sel25519(p, q, b) {
            let t;
            const c = ~(b - 1);
            for(let i = 0; i < 16; i++){
                t = c & (p[i] ^ q[i]);
                p[i] ^= t;
                q[i] ^= t;
            }
        }
        function pack25519(o, n) {
            let i;
            let j;
            let b;
            const m = gf();
            const t = gf();
            for(i = 0; i < 16; i++)t[i] = n[i];
            car25519(t);
            car25519(t);
            car25519(t);
            for(j = 0; j < 2; j++){
                m[0] = t[0] - 0xffed;
                for(i = 1; i < 15; i++){
                    m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
                    m[i - 1] &= 0xffff;
                }
                m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
                b = m[15] >> 16 & 1;
                m[14] &= 0xffff;
                sel25519(t, m, 1 - b);
            }
            for(i = 0; i < 16; i++){
                o[2 * i] = t[i] & 0xff;
                o[2 * i + 1] = t[i] >> 8;
            }
        }
        function neq25519(a, b) {
            const c = new Uint8Array(32);
            const d = new Uint8Array(32);
            pack25519(c, a);
            pack25519(d, b);
            return crypto_verify_32(c, 0, d, 0);
        }
        function par25519(a) {
            const d = new Uint8Array(32);
            pack25519(d, a);
            return d[0] & 1;
        }
        function unpack25519(o, n) {
            let i;
            for(i = 0; i < 16; i++)o[i] = n[2 * i] + (n[2 * i + 1] << 8);
            o[15] &= 0x7fff;
        }
        function A(o, a, b) {
            let i;
            for(i = 0; i < 16; i++)o[i] = a[i] + b[i] | 0;
        }
        function Z(o, a, b) {
            let i;
            for(i = 0; i < 16; i++)o[i] = a[i] - b[i] | 0;
        }
        function M(o, a, b) {
            let i;
            let j;
            const t = new Float64Array(31);
            for(i = 0; i < 31; i++)t[i] = 0;
            for(i = 0; i < 16; i++)for(j = 0; j < 16; j++)t[i + j] += a[i] * b[j];
            for(i = 0; i < 15; i++)t[i] += 38 * t[i + 16];
            for(i = 0; i < 16; i++)o[i] = t[i];
            car25519(o);
            car25519(o);
        }
        function S(o, a) {
            M(o, a, a);
        }
        function inv25519(o, i) {
            const c = gf();
            let a;
            for(a = 0; a < 16; a++)c[a] = i[a];
            for(a = 253; a >= 0; a--){
                S(c, c);
                if (a !== 2 && a !== 4) M(c, c, i);
            }
            for(a = 0; a < 16; a++)o[a] = c[a];
        }
        function pow2523(o, i) {
            const c = gf();
            let a;
            for(a = 0; a < 16; a++)c[a] = i[a];
            for(a = 250; a >= 0; a--){
                S(c, c);
                if (a !== 1) M(c, c, i);
            }
            for(a = 0; a < 16; a++)o[a] = c[a];
        }
        function crypto_scalarmult(q, n, p) {
            const z = new Uint8Array(32);
            const x = new Float64Array(80);
            let r;
            let i;
            const a = gf();
            const b = gf();
            const c = gf();
            const d = gf();
            const e = gf();
            const f = gf();
            for(i = 0; i < 31; i++)z[i] = n[i];
            z[31] = n[31] & 127 | 64;
            z[0] &= 248;
            unpack25519(x, p);
            for(i = 0; i < 16; i++){
                b[i] = x[i];
                d[i] = a[i] = c[i] = 0;
            }
            a[0] = d[0] = 1;
            for(i = 254; i >= 0; --i){
                r = z[i >>> 3] >>> (i & 7) & 1;
                sel25519(a, b, r);
                sel25519(c, d, r);
                A(e, a, c);
                Z(a, a, c);
                A(c, b, d);
                Z(b, b, d);
                S(d, e);
                S(f, a);
                M(a, c, a);
                M(c, b, e);
                A(e, a, c);
                Z(a, a, c);
                S(b, a);
                Z(c, d, f);
                M(a, c, _121665);
                A(a, a, d);
                M(c, c, a);
                M(a, d, f);
                M(d, b, x);
                S(b, e);
                sel25519(a, b, r);
                sel25519(c, d, r);
            }
            for(i = 0; i < 16; i++){
                x[i + 16] = a[i];
                x[i + 32] = c[i];
                x[i + 48] = b[i];
                x[i + 64] = d[i];
            }
            const x32 = x.subarray(32);
            const x16 = x.subarray(16);
            inv25519(x32, x32);
            M(x16, x16, x32);
            pack25519(q, x16);
            return 0;
        }
        function crypto_scalarmult_base(q, n) {
            return crypto_scalarmult(q, n, _9);
        }
        function crypto_box_keypair(y, x) {
            randombytes(x, 32);
            return crypto_scalarmult_base(y, x);
        }
        function crypto_box_beforenm(k, y, x) {
            const s = new Uint8Array(32);
            crypto_scalarmult(s, x, y);
            return crypto_core_hsalsa20(k, _0, s, sigma);
        }
        const crypto_box_afternm = crypto_secretbox;
        const crypto_box_open_afternm = crypto_secretbox_open;
        function crypto_box(c, m, d, n, y, x) {
            const k = new Uint8Array(32);
            crypto_box_beforenm(k, y, x);
            return crypto_box_afternm(c, m, d, n, k);
        }
        function crypto_box_open(m, c, d, n, y, x) {
            const k = new Uint8Array(32);
            crypto_box_beforenm(k, y, x);
            return crypto_box_open_afternm(m, c, d, n, k);
        }
        function add64() {
            let a = 0;
            let b = 0;
            let c = 0;
            let d = 0;
            const m16 = 65535;
            let l;
            let h;
            let i;
            for(i = 0; i < arguments.length; i++){
                l = arguments[i].lo;
                h = arguments[i].hi;
                a += l & m16;
                b += l >>> 16;
                c += h & m16;
                d += h >>> 16;
            }
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            return new u64(c & m16 | d << 16, a & m16 | b << 16);
        }
        function shr64(x, c) {
            return new u64(x.hi >>> c, x.lo >>> c | x.hi << 32 - c);
        }
        function xor64() {
            let l = 0;
            let h = 0;
            let i;
            for(i = 0; i < arguments.length; i++){
                l ^= arguments[i].lo;
                h ^= arguments[i].hi;
            }
            return new u64(h, l);
        }
        function R(x, c) {
            let h;
            let l;
            const c1 = 32 - c;
            if (c < 32) {
                h = x.hi >>> c | x.lo << c1;
                l = x.lo >>> c | x.hi << c1;
            } else if (c < 64) {
                h = x.lo >>> c | x.hi << c1;
                l = x.hi >>> c | x.lo << c1;
            }
            return new u64(h, l);
        }
        function Ch(x, y, z) {
            const h = x.hi & y.hi ^ ~x.hi & z.hi;
            const l = x.lo & y.lo ^ ~x.lo & z.lo;
            return new u64(h, l);
        }
        function Maj(x, y, z) {
            const h = x.hi & y.hi ^ x.hi & z.hi ^ y.hi & z.hi;
            const l = x.lo & y.lo ^ x.lo & z.lo ^ y.lo & z.lo;
            return new u64(h, l);
        }
        function Sigma0(x) {
            return xor64(R(x, 28), R(x, 34), R(x, 39));
        }
        function Sigma1(x) {
            return xor64(R(x, 14), R(x, 18), R(x, 41));
        }
        function sigma0(x) {
            return xor64(R(x, 1), R(x, 8), shr64(x, 7));
        }
        function sigma1(x) {
            return xor64(R(x, 19), R(x, 61), shr64(x, 6));
        }
        const K = [
            new u64(0x428a2f98, 0xd728ae22),
            new u64(0x71374491, 0x23ef65cd),
            new u64(0xb5c0fbcf, 0xec4d3b2f),
            new u64(0xe9b5dba5, 0x8189dbbc),
            new u64(0x3956c25b, 0xf348b538),
            new u64(0x59f111f1, 0xb605d019),
            new u64(0x923f82a4, 0xaf194f9b),
            new u64(0xab1c5ed5, 0xda6d8118),
            new u64(0xd807aa98, 0xa3030242),
            new u64(0x12835b01, 0x45706fbe),
            new u64(0x243185be, 0x4ee4b28c),
            new u64(0x550c7dc3, 0xd5ffb4e2),
            new u64(0x72be5d74, 0xf27b896f),
            new u64(0x80deb1fe, 0x3b1696b1),
            new u64(0x9bdc06a7, 0x25c71235),
            new u64(0xc19bf174, 0xcf692694),
            new u64(0xe49b69c1, 0x9ef14ad2),
            new u64(0xefbe4786, 0x384f25e3),
            new u64(0x0fc19dc6, 0x8b8cd5b5),
            new u64(0x240ca1cc, 0x77ac9c65),
            new u64(0x2de92c6f, 0x592b0275),
            new u64(0x4a7484aa, 0x6ea6e483),
            new u64(0x5cb0a9dc, 0xbd41fbd4),
            new u64(0x76f988da, 0x831153b5),
            new u64(0x983e5152, 0xee66dfab),
            new u64(0xa831c66d, 0x2db43210),
            new u64(0xb00327c8, 0x98fb213f),
            new u64(0xbf597fc7, 0xbeef0ee4),
            new u64(0xc6e00bf3, 0x3da88fc2),
            new u64(0xd5a79147, 0x930aa725),
            new u64(0x06ca6351, 0xe003826f),
            new u64(0x14292967, 0x0a0e6e70),
            new u64(0x27b70a85, 0x46d22ffc),
            new u64(0x2e1b2138, 0x5c26c926),
            new u64(0x4d2c6dfc, 0x5ac42aed),
            new u64(0x53380d13, 0x9d95b3df),
            new u64(0x650a7354, 0x8baf63de),
            new u64(0x766a0abb, 0x3c77b2a8),
            new u64(0x81c2c92e, 0x47edaee6),
            new u64(0x92722c85, 0x1482353b),
            new u64(0xa2bfe8a1, 0x4cf10364),
            new u64(0xa81a664b, 0xbc423001),
            new u64(0xc24b8b70, 0xd0f89791),
            new u64(0xc76c51a3, 0x0654be30),
            new u64(0xd192e819, 0xd6ef5218),
            new u64(0xd6990624, 0x5565a910),
            new u64(0xf40e3585, 0x5771202a),
            new u64(0x106aa070, 0x32bbd1b8),
            new u64(0x19a4c116, 0xb8d2d0c8),
            new u64(0x1e376c08, 0x5141ab53),
            new u64(0x2748774c, 0xdf8eeb99),
            new u64(0x34b0bcb5, 0xe19b48a8),
            new u64(0x391c0cb3, 0xc5c95a63),
            new u64(0x4ed8aa4a, 0xe3418acb),
            new u64(0x5b9cca4f, 0x7763e373),
            new u64(0x682e6ff3, 0xd6b2b8a3),
            new u64(0x748f82ee, 0x5defb2fc),
            new u64(0x78a5636f, 0x43172f60),
            new u64(0x84c87814, 0xa1f0ab72),
            new u64(0x8cc70208, 0x1a6439ec),
            new u64(0x90befffa, 0x23631e28),
            new u64(0xa4506ceb, 0xde82bde9),
            new u64(0xbef9a3f7, 0xb2c67915),
            new u64(0xc67178f2, 0xe372532b),
            new u64(0xca273ece, 0xea26619c),
            new u64(0xd186b8c7, 0x21c0c207),
            new u64(0xeada7dd6, 0xcde0eb1e),
            new u64(0xf57d4f7f, 0xee6ed178),
            new u64(0x06f067aa, 0x72176fba),
            new u64(0x0a637dc5, 0xa2c898a6),
            new u64(0x113f9804, 0xbef90dae),
            new u64(0x1b710b35, 0x131c471b),
            new u64(0x28db77f5, 0x23047d84),
            new u64(0x32caab7b, 0x40c72493),
            new u64(0x3c9ebe0a, 0x15c9bebc),
            new u64(0x431d67c4, 0x9c100d4c),
            new u64(0x4cc5d4be, 0xcb3e42b6),
            new u64(0x597f299c, 0xfc657e2a),
            new u64(0x5fcb6fab, 0x3ad6faec),
            new u64(0x6c44198c, 0x4a475817)
        ];
        function crypto_hashblocks(x, m, n) {
            const z = [];
            const b = [];
            const a = [];
            const w = [];
            let t;
            let i;
            let j;
            for(i = 0; i < 8; i++)z[i] = a[i] = dl64(x, 8 * i);
            let pos = 0;
            while(n >= 128){
                for(i = 0; i < 16; i++)w[i] = dl64(m, 8 * i + pos);
                for(i = 0; i < 80; i++){
                    for(j = 0; j < 8; j++)b[j] = a[j];
                    t = add64(a[7], Sigma1(a[4]), Ch(a[4], a[5], a[6]), K[i], w[i % 16]);
                    b[7] = add64(t, Sigma0(a[0]), Maj(a[0], a[1], a[2]));
                    b[3] = add64(b[3], t);
                    for(j = 0; j < 8; j++)a[(j + 1) % 8] = b[j];
                    if (i % 16 === 15) for(j = 0; j < 16; j++)w[j] = add64(w[j], w[(j + 9) % 16], sigma0(w[(j + 1) % 16]), sigma1(w[(j + 14) % 16]));
                }
                for(i = 0; i < 8; i++){
                    a[i] = add64(a[i], z[i]);
                    z[i] = a[i];
                }
                pos += 128;
                n -= 128;
            }
            for(i = 0; i < 8; i++)ts64(x, 8 * i, z[i]);
            return n;
        }
        const iv = new Uint8Array([
            0x6a,
            0x09,
            0xe6,
            0x67,
            0xf3,
            0xbc,
            0xc9,
            0x08,
            0xbb,
            0x67,
            0xae,
            0x85,
            0x84,
            0xca,
            0xa7,
            0x3b,
            0x3c,
            0x6e,
            0xf3,
            0x72,
            0xfe,
            0x94,
            0xf8,
            0x2b,
            0xa5,
            0x4f,
            0xf5,
            0x3a,
            0x5f,
            0x1d,
            0x36,
            0xf1,
            0x51,
            0x0e,
            0x52,
            0x7f,
            0xad,
            0xe6,
            0x82,
            0xd1,
            0x9b,
            0x05,
            0x68,
            0x8c,
            0x2b,
            0x3e,
            0x6c,
            0x1f,
            0x1f,
            0x83,
            0xd9,
            0xab,
            0xfb,
            0x41,
            0xbd,
            0x6b,
            0x5b,
            0xe0,
            0xcd,
            0x19,
            0x13,
            0x7e,
            0x21,
            0x79
        ]);
        function crypto_hash(out, m, n) {
            const h = new Uint8Array(64);
            const x = new Uint8Array(256);
            let i;
            const b = n;
            for(i = 0; i < 64; i++)h[i] = iv[i];
            crypto_hashblocks(h, m, n);
            n %= 128;
            for(i = 0; i < 256; i++)x[i] = 0;
            for(i = 0; i < n; i++)x[i] = m[b - n + i];
            x[n] = 128;
            n = 256 - 128 * (n < 112 ? 1 : 0);
            x[n - 9] = 0;
            ts64(x, n - 8, new u64(b / 0x20000000 | 0, b << 3));
            crypto_hashblocks(h, x, n);
            for(i = 0; i < 64; i++)out[i] = h[i];
            return 0;
        }
        function add(p, q) {
            const a = gf();
            const b = gf();
            const c = gf();
            const d = gf();
            const e = gf();
            const f = gf();
            const g = gf();
            const h = gf();
            const t = gf();
            Z(a, p[1], p[0]);
            Z(t, q[1], q[0]);
            M(a, a, t);
            A(b, p[0], p[1]);
            A(t, q[0], q[1]);
            M(b, b, t);
            M(c, p[3], q[3]);
            M(c, c, D2);
            M(d, p[2], q[2]);
            A(d, d, d);
            Z(e, b, a);
            Z(f, d, c);
            A(g, d, c);
            A(h, b, a);
            M(p[0], e, f);
            M(p[1], h, g);
            M(p[2], g, f);
            M(p[3], e, h);
        }
        function cswap(p, q, b) {
            let i;
            for(i = 0; i < 4; i++)sel25519(p[i], q[i], b);
        }
        function pack(r, p) {
            const tx = gf();
            const ty = gf();
            const zi = gf();
            inv25519(zi, p[2]);
            M(tx, p[0], zi);
            M(ty, p[1], zi);
            pack25519(r, ty);
            r[31] ^= par25519(tx) << 7;
        }
        function scalarmult(p, q, s) {
            let b;
            let i;
            set25519(p[0], gf0);
            set25519(p[1], gf1);
            set25519(p[2], gf1);
            set25519(p[3], gf0);
            for(i = 255; i >= 0; --i){
                b = s[i / 8 | 0] >> (i & 7) & 1;
                cswap(p, q, b);
                add(q, p);
                add(p, p);
                cswap(p, q, b);
            }
        }
        function scalarbase(p, s) {
            const q = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            set25519(q[0], X);
            set25519(q[1], Y);
            set25519(q[2], gf1);
            M(q[3], X, Y);
            scalarmult(p, q, s);
        }
        function crypto_sign_keypair(pk, sk, seeded) {
            let d = new Uint8Array(64);
            const p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            let i;
            if (!seeded) randombytes(sk, 32);
            const context = blake.blake2bInit(64);
            blake.blake2bUpdate(context, sk);
            d = blake.blake2bFinal(context);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            scalarbase(p, d);
            pack(pk, p);
            return 0;
        }
        const hashSecret = (sk)=>{
            let d = new Uint8Array(64);
            const pk = new Uint8Array(32);
            const context = blake.blake2bInit(64);
            blake.blake2bUpdate(context, sk);
            d = blake.blake2bFinal(context);
            return d;
        };
        exports.camo = {};
        exports.camo.hashsecret = hashSecret;
        exports.camo.scalarMult = function(n, p) {
            checkArrayTypes(n, p);
            if (n.length !== crypto_scalarmult_SCALARBYTES * 2) throw new Error('bad n size');
            if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
            const q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult(q, n, p);
            return q;
        };
        exports.camo.scalarMult.base = function(n) {
            checkArrayTypes(n);
            if (n.length !== crypto_scalarmult_SCALARBYTES * 2) throw new Error('bad n size');
            const q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult_base(q, n);
            return q;
        };
        exports.camo.scalarbase = deriveUnhashedPublicFromSecret;
        function deriveUnhashedPublicFromSecret(sk) {
            const d = sk;
            const p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            let i;
            const pk = new Uint8Array(32);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            scalarbase(p, d);
            pack(pk, p);
            return pk;
        }
        function derivePublicFromSecret(sk) {
            let d = new Uint8Array(64);
            const p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            let i;
            const pk = new Uint8Array(32);
            const context = blake.blake2bInit(64);
            blake.blake2bUpdate(context, sk);
            d = blake.blake2bFinal(context);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            scalarbase(p, d);
            pack(pk, p);
            return pk;
        }
        const L = new Float64Array([
            0xed,
            0xd3,
            0xf5,
            0x5c,
            0x1a,
            0x63,
            0x12,
            0x58,
            0xd6,
            0x9c,
            0xf7,
            0xa2,
            0xde,
            0xf9,
            0xde,
            0x14,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0x10
        ]);
        function modL(r, x) {
            let carry;
            let i;
            let j;
            let k;
            for(i = 63; i >= 32; --i){
                carry = 0;
                for(j = i - 32, k = i - 12; j < k; ++j){
                    x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                    carry = x[j] + 128 >> 8;
                    x[j] -= carry * 256;
                }
                x[j] += carry;
                x[i] = 0;
            }
            carry = 0;
            for(j = 0; j < 32; j++){
                x[j] += carry - (x[31] >> 4) * L[j];
                carry = x[j] >> 8;
                x[j] &= 255;
            }
            for(j = 0; j < 32; j++)x[j] -= carry * L[j];
            for(i = 0; i < 32; i++){
                x[i + 1] += x[i] >> 8;
                r[i] = x[i] & 255;
            }
        }
        function reduce(r) {
            const x = new Float64Array(64);
            let i;
            for(i = 0; i < 64; i++)x[i] = r[i];
            for(i = 0; i < 64; i++)r[i] = 0;
            modL(r, x);
        }
        // Note: difference from C - smlen returned, not passed as argument.
        function crypto_sign(sm, m, n, sk) {
            let d = new Uint8Array(64);
            let h = new Uint8Array(64);
            let r = new Uint8Array(64);
            let i;
            let j;
            const x = new Float64Array(64);
            const p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            const pk = derivePublicFromSecret(sk);
            let context = blake.blake2bInit(64, null);
            blake.blake2bUpdate(context, sk);
            d = blake.blake2bFinal(context);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            const smlen = n + 64;
            for(i = 0; i < n; i++)sm[64 + i] = m[i];
            for(i = 0; i < 32; i++)sm[32 + i] = d[32 + i];
            context = blake.blake2bInit(64, null);
            blake.blake2bUpdate(context, sm.subarray(32));
            r = blake.blake2bFinal(context);
            reduce(r);
            scalarbase(p, r);
            pack(sm, p);
            for(i = 32; i < 64; i++)sm[i] = pk[i - 32];
            context = blake.blake2bInit(64, null);
            blake.blake2bUpdate(context, sm);
            h = blake.blake2bFinal(context);
            reduce(h);
            for(i = 0; i < 64; i++)x[i] = 0;
            for(i = 0; i < 32; i++)x[i] = r[i];
            for(i = 0; i < 32; i++)for(j = 0; j < 32; j++)x[i + j] += h[i] * d[j];
            modL(sm.subarray(32), x);
            return smlen;
        }
        function unpackneg(r, p) {
            const t = gf();
            const chk = gf();
            const num = gf();
            const den = gf();
            const den2 = gf();
            const den4 = gf();
            const den6 = gf();
            set25519(r[2], gf1);
            unpack25519(r[1], p);
            S(num, r[1]);
            M(den, num, D);
            Z(num, num, r[2]);
            A(den, r[2], den);
            S(den2, den);
            S(den4, den2);
            M(den6, den4, den2);
            M(t, den6, num);
            M(t, t, den);
            pow2523(t, t);
            M(t, t, num);
            M(t, t, den);
            M(t, t, den);
            M(r[0], t, den);
            S(chk, r[0]);
            M(chk, chk, den);
            if (neq25519(chk, num)) M(r[0], r[0], I);
            S(chk, r[0]);
            M(chk, chk, den);
            if (neq25519(chk, num)) return -1;
            if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
            M(r[3], r[0], r[1]);
            return 0;
        }
        function crypto_sign_open(m, sm, n, pk) {
            let i;
            let mlen;
            const t = new Uint8Array(32);
            let h = new Uint8Array(64);
            const p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            const q = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            mlen = -1;
            if (n < 64) return -1;
            if (unpackneg(q, pk)) return -1;
            for(i = 0; i < n; i++)m[i] = sm[i];
            for(i = 0; i < 32; i++)m[i + 32] = pk[i];
            // crypto_hash(h, m, n);
            context = blake.blake2bInit(64, null);
            blake.blake2bUpdate(context, m);
            h = blake.blake2bFinal(context);
            reduce(h);
            scalarmult(p, q, h);
            scalarbase(q, sm.subarray(32));
            add(p, q);
            pack(t, p);
            n -= 64;
            if (crypto_verify_32(sm, 0, t, 0)) {
                for(i = 0; i < n; i++)m[i] = 0;
                return -1;
            }
            for(i = 0; i < n; i++)m[i] = sm[i + 64];
            mlen = n;
            return mlen;
        }
        const crypto_secretbox_KEYBYTES = 32;
        const crypto_secretbox_NONCEBYTES = 24;
        const crypto_secretbox_ZEROBYTES = 32;
        const crypto_secretbox_BOXZEROBYTES = 16;
        var crypto_scalarmult_BYTES = 32;
        var crypto_scalarmult_SCALARBYTES = 32;
        const crypto_box_PUBLICKEYBYTES = 32;
        const crypto_box_SECRETKEYBYTES = 32;
        const crypto_box_BEFORENMBYTES = 32;
        const crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES;
        const crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES;
        const crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES;
        const crypto_sign_BYTES = 64;
        const crypto_sign_PUBLICKEYBYTES = 32;
        const crypto_sign_SECRETKEYBYTES = 32;
        const crypto_sign_SEEDBYTES = 32;
        const crypto_hash_BYTES = 64;
        exports.lowlevel = {
            crypto_core_hsalsa20: crypto_core_hsalsa20,
            crypto_stream_xor: crypto_stream_xor,
            crypto_stream: crypto_stream,
            crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
            crypto_stream_salsa20: crypto_stream_salsa20,
            crypto_onetimeauth: crypto_onetimeauth,
            crypto_onetimeauth_verify: crypto_onetimeauth_verify,
            crypto_verify_16: crypto_verify_16,
            crypto_verify_32: crypto_verify_32,
            crypto_secretbox: crypto_secretbox,
            crypto_secretbox_open: crypto_secretbox_open,
            crypto_scalarmult: crypto_scalarmult,
            crypto_scalarmult_base: crypto_scalarmult_base,
            crypto_box_beforenm: crypto_box_beforenm,
            crypto_box_afternm: crypto_box_afternm,
            crypto_box: crypto_box,
            crypto_box_open: crypto_box_open,
            crypto_box_keypair: crypto_box_keypair,
            crypto_hash: crypto_hash,
            crypto_sign: crypto_sign,
            crypto_sign_keypair: crypto_sign_keypair,
            crypto_sign_open: crypto_sign_open,
            crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
            crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
            crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
            crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
            crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
            crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
            crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
            crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
            crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
            crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
            crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
            crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
            crypto_sign_BYTES: crypto_sign_BYTES,
            crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
            crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
            crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
            crypto_hash_BYTES: crypto_hash_BYTES
        };
        /* High-level API */ function checkLengths(k, n) {
            if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size' + n.length + ' expected:' + crypto_secretbox_KEYBYTES);
            if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size' + n.length + ' expected:' + crypto_secretbox_NONCEBYTES);
        }
        function checkBoxLengths(pk, sk) {
            if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size' + pk.length + ' expected:' + crypto_box_PUBLICKEYBYTES);
            if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size:' + sk.length + ' expected:' + crypto_box_SECRETKEYBYTES);
        }
        function checkArrayTypes() {
            for(let i = 0; i < arguments.length; i++){
                if (!(arguments[i] instanceof Uint8Array)) throw new TypeError('unexpected type, use Uint8Array');
            }
        }
        function cleanup(arr) {
            for(let i = 0; i < arr.length; i++)arr[i] = 0;
        }
        exports.randomBytes = function(n) {
            const b = new Uint8Array(n);
            randombytes(b, n);
            return b;
        };
        exports.secretbox = function(msg, nonce, key) {
            checkArrayTypes(msg, nonce, key);
            checkLengths(key, nonce);
            const m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
            const c = new Uint8Array(m.length);
            for(let i = 0; i < msg.length; i++)m[i + crypto_secretbox_ZEROBYTES] = msg[i];
            crypto_secretbox(c, m, m.length, nonce, key);
            return c.subarray(crypto_secretbox_BOXZEROBYTES);
        };
        exports.secretbox.open = function(box, nonce, key) {
            checkArrayTypes(box, nonce, key);
            checkLengths(key, nonce);
            const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
            const m = new Uint8Array(c.length);
            for(let i = 0; i < box.length; i++)c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
            if (c.length < 32) {
                console.log('c.length < 32', c.length);
                return null;
            }
            const val = crypto_secretbox_open(m, c, c.length, nonce, key);
            if (val !== 0) {
                console.log('val !== 0', val);
                return null;
            }
            return m.subarray(crypto_secretbox_ZEROBYTES);
        };
        exports.secretbox.keyLength = crypto_secretbox_KEYBYTES;
        exports.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
        exports.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
        exports.scalarMult = function(n, p) {
            checkArrayTypes(n, p);
            if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
            if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
            const q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult(q, n, p);
            return q;
        };
        exports.scalarMult.base = function(n) {
            checkArrayTypes(n);
            if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
            const q = new Uint8Array(crypto_scalarmult_BYTES);
            crypto_scalarmult_base(q, n);
            return q;
        };
        exports.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
        exports.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
        exports.box = function(msg, nonce, publicKey, secretKey) {
            const k = exports.box.before(publicKey, secretKey);
            return exports.secretbox(msg, nonce, k);
        };
        exports.box.before = function(publicKey, secretKey) {
            checkArrayTypes(publicKey, secretKey);
            checkBoxLengths(publicKey, secretKey);
            const k = new Uint8Array(crypto_box_BEFORENMBYTES);
            crypto_box_beforenm(k, publicKey, secretKey);
            return k;
        };
        exports.box.after = exports.secretbox;
        exports.box.open = function(msg, nonce, publicKey, secretKey) {
            const k = exports.box.before(publicKey, secretKey);
            return exports.secretbox.open(msg, nonce, k);
        };
        exports.box.open.after = exports.secretbox.open;
        exports.box.keyPair = function() {
            const pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
            const sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
            crypto_box_keypair(pk, sk);
            return {
                publicKey: pk,
                secretKey: sk
            };
        };
        exports.box.keyPair.fromSecretKey = function(secretKey) {
            checkArrayTypes(secretKey);
            if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
            const pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
            crypto_scalarmult_base(pk, secretKey);
            return {
                publicKey: pk,
                secretKey: new Uint8Array(secretKey)
            };
        };
        exports.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
        exports.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
        exports.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
        exports.box.nonceLength = crypto_box_NONCEBYTES;
        exports.box.overheadLength = exports.secretbox.overheadLength;
        exports.sign = function(msg, secretKey) {
            checkArrayTypes(msg, secretKey);
            if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
            const signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
            crypto_sign(signedMsg, msg, msg.length, secretKey);
            return signedMsg;
        };
        exports.sign.open = function(signedMsg, publicKey) {
            checkArrayTypes(signedMsg, publicKey);
            if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
            const tmp = new Uint8Array(signedMsg.length);
            const mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
            if (mlen < 0) return null;
            const m = new Uint8Array(mlen);
            for(let i = 0; i < m.length; i++)m[i] = tmp[i];
            return m;
        };
        exports.sign.detached = function(msg, secretKey) {
            const signedMsg = exports.sign(msg, secretKey);
            const sig = new Uint8Array(crypto_sign_BYTES);
            for(let i = 0; i < sig.length; i++)sig[i] = signedMsg[i];
            return sig;
        };
        exports.sign.detached.verify = function(msg, sig, publicKey) {
            checkArrayTypes(msg, sig, publicKey);
            if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
            if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size:' + publicKey.length + ' expected:' + crypto_sign_PUBLICKEYBYTES);
            const sm = new Uint8Array(crypto_sign_BYTES + msg.length);
            const m = new Uint8Array(crypto_sign_BYTES + msg.length);
            let i;
            for(i = 0; i < crypto_sign_BYTES; i++)sm[i] = sig[i];
            for(i = 0; i < msg.length; i++)sm[i + crypto_sign_BYTES] = msg[i];
            return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
        };
        exports.sign.keyPair = function() {
            const pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            const sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
            crypto_sign_keypair(pk, sk);
            return {
                publicKey: pk,
                secretKey: sk
            };
        };
        exports.sign.keyPair.fromUnhashedSecretKey = function(secretKey) {
            checkArrayTypes(secretKey);
            // if (secretKey.length !== crypto_sign_SECRETKEYBYTES) {
            // throw new Error('bad secret key size');
            // }
            return deriveUnhashedPublicFromSecret(secretKey);
        };
        exports.convertSecretKey = function(sk, direct) {
            let d = new Uint8Array(64);
            const o = new Uint8Array(32);
            let i;
            if (direct) d = sk.slice(0, 32);
            else {
                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;
            }
            for(i = 0; i < 32; i++)o[i] = d[i];
            for(i = 0; i < 64; i++)d[i] = 0;
            return o;
        };
        exports.convertPublicKey = function(pk) {
            // https://github.com/dchest/ed2curve-js/blob/master/ed2curve.js
            const z = new Uint8Array(32);
            const q = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            const a = gf();
            const b = gf();
            if (unpackneg(q, pk)) return null; // reject invalid key
            const y = q[1];
            A(a, gf1, y);
            Z(b, gf1, y);
            inv25519(b, b);
            M(a, a, b);
            pack25519(z, a);
            return z;
        };
        exports.TryToConvertPublicKeyBack = function(pk) {
            const z = new Uint8Array(32);
            const x = gf();
            const a = gf();
            const b = gf();
            unpack25519(x, pk);
            A(a, x, gf1);
            Z(b, x, gf1);
            inv25519(a, a);
            M(a, a, b);
            pack25519(z, a); // what about last byte of this value??? Sometimes pubKeys not equals... Maybe there is parity-bit lost.
            // https://crypto.stackexchange.com/questions/13077/can-curve25519-keys-be-used-with-ed25519-keys
            return z;
        };
        exports.convert_ed25519_to_curve25519_public_key = exports.convertPublicKey;
        exports.convert_curve25519_to_ed25519_public_key = exports.TryToConvertPublicKeyBack;
        exports.sign.keyPair.add = function(a, b) {
            const aUnpacked = new Float64Array(80);
            const bUnpacked = new Float64Array(80);
            unpack25519(aUnpacked, a);
            unpack25519(bUnpacked, b);
            add(aUnpacked, bUnpacked);
            pack(bUnpacked, c);
            const c = new Uint8Array(32);
        };
        exports.sign.keyPair.fromSecretKey = function(secretKey) {
            checkArrayTypes(secretKey);
            if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size:' + secretKey.length + ' expected:' + crypto_box_SECRETKEYBYTES);
            let pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            pk = derivePublicFromSecret(secretKey);
            return {
                publicKey: pk,
                secretKey: new Uint8Array(secretKey)
            };
        };
        exports.sign.keyPair.fromSeed = function(seed) {
            checkArrayTypes(seed);
            if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
            const pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
            const sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
            for(let i = 0; i < 32; i++)sk[i] = seed[i];
            crypto_sign_keypair(pk, sk, true);
            return {
                publicKey: pk,
                secretKey: sk
            };
        };
        exports.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
        exports.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
        exports.sign.seedLength = crypto_sign_SEEDBYTES;
        exports.sign.signatureLength = crypto_sign_BYTES;
        exports.hash = function(msg) {
            checkArrayTypes(msg);
            const h = new Uint8Array(crypto_hash_BYTES);
            crypto_hash(h, msg, msg.length);
            return h;
        };
        exports.hash.hashLength = crypto_hash_BYTES;
        exports.verify = function(x, y) {
            checkArrayTypes(x, y);
            // Zero length arguments are considered not equal.
            if (x.length === 0 || y.length === 0) return false;
            if (x.length !== y.length) return false;
            return vn(x, 0, y, 0, x.length) === 0 ? true : false;
        };
        exports.setPRNG = function(fn) {
            randombytes = fn;
        };
        (function() {
            // Initialize PRNG if environment provides CSPRNG.
            // If not, methods calling randombytes will throw.
            let crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;
            if (crypto && crypto.getRandomValues) {
                // Browsers.
                const QUOTA = 65536;
                exports.setPRNG(function(x, n) {
                    let i;
                    const v = new Uint8Array(n);
                    for(i = 0; i < n; i += QUOTA)crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                    for(i = 0; i < n; i++)x[i] = v[i];
                    cleanup(v);
                });
            } else {
                // Node.js.
                crypto = (parcelRequire("4Ocal"));
                if (crypto && crypto.randomBytes) exports.setPRNG(function(x, n) {
                    let i;
                    const v = crypto.randomBytes(n);
                    for(i = 0; i < n; i++)x[i] = v[i];
                    cleanup(v);
                });
            }
        })();
        // STARTED BOTTOM nodejs/browser hack
        return exports;
    })();
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.nacl = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});
parcelRequire.register("4Ocal", function(module, exports) {

$parcel$export(module.exports, "randomBytes", function () { return $380544d1fa80b09e$export$5f828d93ff035aa8; }, function (v) { return $380544d1fa80b09e$export$5f828d93ff035aa8 = v; });
$parcel$export(module.exports, "rng", function () { return $380544d1fa80b09e$export$cd94982b18c6332c; }, function (v) { return $380544d1fa80b09e$export$cd94982b18c6332c = v; });
$parcel$export(module.exports, "pseudoRandomBytes", function () { return $380544d1fa80b09e$export$1d518568e4f529b0; }, function (v) { return $380544d1fa80b09e$export$1d518568e4f529b0 = v; });
$parcel$export(module.exports, "prng", function () { return $380544d1fa80b09e$export$5285b6d41c912b41; }, function (v) { return $380544d1fa80b09e$export$5285b6d41c912b41 = v; });
$parcel$export(module.exports, "createHash", function () { return $380544d1fa80b09e$export$2fb37efbf6ae0c0e; }, function (v) { return $380544d1fa80b09e$export$2fb37efbf6ae0c0e = v; });
$parcel$export(module.exports, "Hash", function () { return $380544d1fa80b09e$export$ab85ecd77ce6a5cd; }, function (v) { return $380544d1fa80b09e$export$ab85ecd77ce6a5cd = v; });
$parcel$export(module.exports, "createHmac", function () { return $380544d1fa80b09e$export$da39cf97e1eb7c91; }, function (v) { return $380544d1fa80b09e$export$da39cf97e1eb7c91 = v; });
$parcel$export(module.exports, "Hmac", function () { return $380544d1fa80b09e$export$52a9039d7177394f; }, function (v) { return $380544d1fa80b09e$export$52a9039d7177394f = v; });
$parcel$export(module.exports, "getHashes", function () { return $380544d1fa80b09e$export$f7201db400317331; }, function (v) { return $380544d1fa80b09e$export$f7201db400317331 = v; });
$parcel$export(module.exports, "pbkdf2", function () { return $380544d1fa80b09e$export$448fa22aedc9dbca; }, function (v) { return $380544d1fa80b09e$export$448fa22aedc9dbca = v; });
$parcel$export(module.exports, "pbkdf2Sync", function () { return $380544d1fa80b09e$export$b80c7ba289c8fa56; }, function (v) { return $380544d1fa80b09e$export$b80c7ba289c8fa56 = v; });
$parcel$export(module.exports, "Cipher", function () { return $380544d1fa80b09e$export$26e5786e8ac8e530; }, function (v) { return $380544d1fa80b09e$export$26e5786e8ac8e530 = v; });
$parcel$export(module.exports, "createCipher", function () { return $380544d1fa80b09e$export$bdd223f16383713e; }, function (v) { return $380544d1fa80b09e$export$bdd223f16383713e = v; });
$parcel$export(module.exports, "Cipheriv", function () { return $380544d1fa80b09e$export$20533d26f07f1ee0; }, function (v) { return $380544d1fa80b09e$export$20533d26f07f1ee0 = v; });
$parcel$export(module.exports, "createCipheriv", function () { return $380544d1fa80b09e$export$2f64596b8cbf08b4; }, function (v) { return $380544d1fa80b09e$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "Decipher", function () { return $380544d1fa80b09e$export$2ce6d8d0e8b04e1a; }, function (v) { return $380544d1fa80b09e$export$2ce6d8d0e8b04e1a = v; });
$parcel$export(module.exports, "createDecipher", function () { return $380544d1fa80b09e$export$12ada9414fbc594c; }, function (v) { return $380544d1fa80b09e$export$12ada9414fbc594c = v; });
$parcel$export(module.exports, "Decipheriv", function () { return $380544d1fa80b09e$export$f5e7e39d57cd9700; }, function (v) { return $380544d1fa80b09e$export$f5e7e39d57cd9700 = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $380544d1fa80b09e$export$36b6d6ef312eab39; }, function (v) { return $380544d1fa80b09e$export$36b6d6ef312eab39 = v; });
$parcel$export(module.exports, "getCiphers", function () { return $380544d1fa80b09e$export$58a258485f1e49f6; }, function (v) { return $380544d1fa80b09e$export$58a258485f1e49f6 = v; });
$parcel$export(module.exports, "listCiphers", function () { return $380544d1fa80b09e$export$dedd8dc3dc62b370; }, function (v) { return $380544d1fa80b09e$export$dedd8dc3dc62b370 = v; });
$parcel$export(module.exports, "DiffieHellmanGroup", function () { return $380544d1fa80b09e$export$971862a2fcb1bb40; }, function (v) { return $380544d1fa80b09e$export$971862a2fcb1bb40 = v; });
$parcel$export(module.exports, "createDiffieHellmanGroup", function () { return $380544d1fa80b09e$export$c6ff6a88acbeaf40; }, function (v) { return $380544d1fa80b09e$export$c6ff6a88acbeaf40 = v; });
$parcel$export(module.exports, "getDiffieHellman", function () { return $380544d1fa80b09e$export$fdc27893e98845cc; }, function (v) { return $380544d1fa80b09e$export$fdc27893e98845cc = v; });
$parcel$export(module.exports, "createDiffieHellman", function () { return $380544d1fa80b09e$export$6671fb9a1323bed; }, function (v) { return $380544d1fa80b09e$export$6671fb9a1323bed = v; });
$parcel$export(module.exports, "DiffieHellman", function () { return $380544d1fa80b09e$export$d74daf141a551db; }, function (v) { return $380544d1fa80b09e$export$d74daf141a551db = v; });
$parcel$export(module.exports, "createSign", function () { return $380544d1fa80b09e$export$45df7cae684751af; }, function (v) { return $380544d1fa80b09e$export$45df7cae684751af = v; });
$parcel$export(module.exports, "Sign", function () { return $380544d1fa80b09e$export$1db683ad541682f6; }, function (v) { return $380544d1fa80b09e$export$1db683ad541682f6 = v; });
$parcel$export(module.exports, "createVerify", function () { return $380544d1fa80b09e$export$6f65485f87568e37; }, function (v) { return $380544d1fa80b09e$export$6f65485f87568e37 = v; });
$parcel$export(module.exports, "Verify", function () { return $380544d1fa80b09e$export$91a8e56769aeb334; }, function (v) { return $380544d1fa80b09e$export$91a8e56769aeb334 = v; });
$parcel$export(module.exports, "createECDH", function () { return $380544d1fa80b09e$export$2d4117e99c2179e4; }, function (v) { return $380544d1fa80b09e$export$2d4117e99c2179e4 = v; });
$parcel$export(module.exports, "publicEncrypt", function () { return $380544d1fa80b09e$export$512823e338ddb1b7; }, function (v) { return $380544d1fa80b09e$export$512823e338ddb1b7 = v; });
$parcel$export(module.exports, "privateEncrypt", function () { return $380544d1fa80b09e$export$9d0e0c0c4a8d30f3; }, function (v) { return $380544d1fa80b09e$export$9d0e0c0c4a8d30f3 = v; });
$parcel$export(module.exports, "publicDecrypt", function () { return $380544d1fa80b09e$export$b9d55ff329113abd; }, function (v) { return $380544d1fa80b09e$export$b9d55ff329113abd = v; });
$parcel$export(module.exports, "privateDecrypt", function () { return $380544d1fa80b09e$export$7efb24e2fddf99b9; }, function (v) { return $380544d1fa80b09e$export$7efb24e2fddf99b9 = v; });
$parcel$export(module.exports, "randomFill", function () { return $380544d1fa80b09e$export$bb1abf2ce84fc7e8; }, function (v) { return $380544d1fa80b09e$export$bb1abf2ce84fc7e8 = v; });
$parcel$export(module.exports, "randomFillSync", function () { return $380544d1fa80b09e$export$2f7171e78e524d5e; }, function (v) { return $380544d1fa80b09e$export$2f7171e78e524d5e = v; });
$parcel$export(module.exports, "createCredentials", function () { return $380544d1fa80b09e$export$e1d879b482f37d98; }, function (v) { return $380544d1fa80b09e$export$e1d879b482f37d98 = v; });
$parcel$export(module.exports, "constants", function () { return $380544d1fa80b09e$export$1a988e7317c65621; }, function (v) { return $380544d1fa80b09e$export$1a988e7317c65621 = v; });
var $380544d1fa80b09e$export$5f828d93ff035aa8;
var $380544d1fa80b09e$export$cd94982b18c6332c;
var $380544d1fa80b09e$export$1d518568e4f529b0;
var $380544d1fa80b09e$export$5285b6d41c912b41;
var $380544d1fa80b09e$export$2fb37efbf6ae0c0e;
var $380544d1fa80b09e$export$ab85ecd77ce6a5cd;
var $380544d1fa80b09e$export$da39cf97e1eb7c91;
var $380544d1fa80b09e$export$52a9039d7177394f;
var $380544d1fa80b09e$export$f7201db400317331;
var $380544d1fa80b09e$export$448fa22aedc9dbca;
var $380544d1fa80b09e$export$b80c7ba289c8fa56;
var $380544d1fa80b09e$export$26e5786e8ac8e530;
var $380544d1fa80b09e$export$bdd223f16383713e;
var $380544d1fa80b09e$export$20533d26f07f1ee0;
var $380544d1fa80b09e$export$2f64596b8cbf08b4;
var $380544d1fa80b09e$export$2ce6d8d0e8b04e1a;
var $380544d1fa80b09e$export$12ada9414fbc594c;
var $380544d1fa80b09e$export$f5e7e39d57cd9700;
var $380544d1fa80b09e$export$36b6d6ef312eab39;
var $380544d1fa80b09e$export$58a258485f1e49f6;
var $380544d1fa80b09e$export$dedd8dc3dc62b370;
var $380544d1fa80b09e$export$971862a2fcb1bb40;
var $380544d1fa80b09e$export$c6ff6a88acbeaf40;
var $380544d1fa80b09e$export$fdc27893e98845cc;
var $380544d1fa80b09e$export$6671fb9a1323bed;
var $380544d1fa80b09e$export$d74daf141a551db;
var $380544d1fa80b09e$export$45df7cae684751af;
var $380544d1fa80b09e$export$1db683ad541682f6;
var $380544d1fa80b09e$export$6f65485f87568e37;
var $380544d1fa80b09e$export$91a8e56769aeb334;
var $380544d1fa80b09e$export$2d4117e99c2179e4;
var $380544d1fa80b09e$export$512823e338ddb1b7;
var $380544d1fa80b09e$export$9d0e0c0c4a8d30f3;
var $380544d1fa80b09e$export$b9d55ff329113abd;
var $380544d1fa80b09e$export$7efb24e2fddf99b9;
var $380544d1fa80b09e$export$bb1abf2ce84fc7e8;
var $380544d1fa80b09e$export$2f7171e78e524d5e;
var $380544d1fa80b09e$export$e1d879b482f37d98;
var $380544d1fa80b09e$export$1a988e7317c65621;
'use strict';

$380544d1fa80b09e$export$5f828d93ff035aa8 = $380544d1fa80b09e$export$cd94982b18c6332c = $380544d1fa80b09e$export$1d518568e4f529b0 = $380544d1fa80b09e$export$5285b6d41c912b41 = (parcelRequire("94o1H"));

$380544d1fa80b09e$export$2fb37efbf6ae0c0e = $380544d1fa80b09e$export$ab85ecd77ce6a5cd = (parcelRequire("cv73a"));

$380544d1fa80b09e$export$da39cf97e1eb7c91 = $380544d1fa80b09e$export$52a9039d7177394f = (parcelRequire("dA0oy"));

var $df5hN = parcelRequire("df5hN");
var $380544d1fa80b09e$var$algoKeys = Object.keys($df5hN);
var $380544d1fa80b09e$var$hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat($380544d1fa80b09e$var$algoKeys);
$380544d1fa80b09e$export$f7201db400317331 = function() {
    return $380544d1fa80b09e$var$hashes;
};

var $6Cw3h = parcelRequire("6Cw3h");
$380544d1fa80b09e$export$448fa22aedc9dbca = $6Cw3h.pbkdf2;
$380544d1fa80b09e$export$b80c7ba289c8fa56 = $6Cw3h.pbkdf2Sync;

var $c7DQb = parcelRequire("c7DQb");
$380544d1fa80b09e$export$26e5786e8ac8e530 = $c7DQb.Cipher;
$380544d1fa80b09e$export$bdd223f16383713e = $c7DQb.createCipher;
$380544d1fa80b09e$export$20533d26f07f1ee0 = $c7DQb.Cipheriv;
$380544d1fa80b09e$export$2f64596b8cbf08b4 = $c7DQb.createCipheriv;
$380544d1fa80b09e$export$2ce6d8d0e8b04e1a = $c7DQb.Decipher;
$380544d1fa80b09e$export$12ada9414fbc594c = $c7DQb.createDecipher;
$380544d1fa80b09e$export$f5e7e39d57cd9700 = $c7DQb.Decipheriv;
$380544d1fa80b09e$export$36b6d6ef312eab39 = $c7DQb.createDecipheriv;
$380544d1fa80b09e$export$58a258485f1e49f6 = $c7DQb.getCiphers;
$380544d1fa80b09e$export$dedd8dc3dc62b370 = $c7DQb.listCiphers;

var $6J17g = parcelRequire("6J17g");
$380544d1fa80b09e$export$971862a2fcb1bb40 = $6J17g.DiffieHellmanGroup;
$380544d1fa80b09e$export$c6ff6a88acbeaf40 = $6J17g.createDiffieHellmanGroup;
$380544d1fa80b09e$export$fdc27893e98845cc = $6J17g.getDiffieHellman;
$380544d1fa80b09e$export$6671fb9a1323bed = $6J17g.createDiffieHellman;
$380544d1fa80b09e$export$d74daf141a551db = $6J17g.DiffieHellman;

var $408oY = parcelRequire("408oY");
$380544d1fa80b09e$export$45df7cae684751af = $408oY.createSign;
$380544d1fa80b09e$export$1db683ad541682f6 = $408oY.Sign;
$380544d1fa80b09e$export$6f65485f87568e37 = $408oY.createVerify;
$380544d1fa80b09e$export$91a8e56769aeb334 = $408oY.Verify;

$380544d1fa80b09e$export$2d4117e99c2179e4 = (parcelRequire("jloLi"));

var $61C3k = parcelRequire("61C3k");
$380544d1fa80b09e$export$512823e338ddb1b7 = $61C3k.publicEncrypt;
$380544d1fa80b09e$export$9d0e0c0c4a8d30f3 = $61C3k.privateEncrypt;
$380544d1fa80b09e$export$b9d55ff329113abd = $61C3k.publicDecrypt;
$380544d1fa80b09e$export$7efb24e2fddf99b9 = $61C3k.privateDecrypt;

var $6kkrD = parcelRequire("6kkrD");
$380544d1fa80b09e$export$bb1abf2ce84fc7e8 = $6kkrD.randomFill;
$380544d1fa80b09e$export$2f7171e78e524d5e = $6kkrD.randomFillSync;
$380544d1fa80b09e$export$e1d879b482f37d98 = function() {
    throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
};
$380544d1fa80b09e$export$1a988e7317c65621 = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
};

});
parcelRequire.register("94o1H", function(module, exports) {
'use strict';

var $36zFS = parcelRequire("36zFS");
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var $69a71febf98bc205$var$MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var $69a71febf98bc205$var$MAX_UINT32 = 4294967295;
function $69a71febf98bc205$var$oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

var $8k9oS = parcelRequire("8k9oS");
var $69a71febf98bc205$require$Buffer = $8k9oS.Buffer;
var $69a71febf98bc205$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
if ($69a71febf98bc205$var$crypto && $69a71febf98bc205$var$crypto.getRandomValues) module.exports = $69a71febf98bc205$var$randomBytes;
else module.exports = $69a71febf98bc205$var$oldBrowser;
function $69a71febf98bc205$var$randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > $69a71febf98bc205$var$MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = $69a71febf98bc205$require$Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > $69a71febf98bc205$var$MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += $69a71febf98bc205$var$MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        $69a71febf98bc205$var$crypto.getRandomValues(bytes.slice(generated, generated + $69a71febf98bc205$var$MAX_BYTES));
        else $69a71febf98bc205$var$crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return $36zFS.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

});
parcelRequire.register("36zFS", function(module, exports) {
// shim for using process in browser
var $242d9ad2c459da46$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $242d9ad2c459da46$var$cachedSetTimeout;
var $242d9ad2c459da46$var$cachedClearTimeout;
function $242d9ad2c459da46$var$defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function $242d9ad2c459da46$var$defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') $242d9ad2c459da46$var$cachedSetTimeout = setTimeout;
        else $242d9ad2c459da46$var$cachedSetTimeout = $242d9ad2c459da46$var$defaultSetTimout;
    } catch (e) {
        $242d9ad2c459da46$var$cachedSetTimeout = $242d9ad2c459da46$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') $242d9ad2c459da46$var$cachedClearTimeout = clearTimeout;
        else $242d9ad2c459da46$var$cachedClearTimeout = $242d9ad2c459da46$var$defaultClearTimeout;
    } catch (e1) {
        $242d9ad2c459da46$var$cachedClearTimeout = $242d9ad2c459da46$var$defaultClearTimeout;
    }
})();
function $242d9ad2c459da46$var$runTimeout(fun) {
    if ($242d9ad2c459da46$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($242d9ad2c459da46$var$cachedSetTimeout === $242d9ad2c459da46$var$defaultSetTimout || !$242d9ad2c459da46$var$cachedSetTimeout) && setTimeout) {
        $242d9ad2c459da46$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $242d9ad2c459da46$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $242d9ad2c459da46$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $242d9ad2c459da46$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $242d9ad2c459da46$var$runClearTimeout(marker) {
    if ($242d9ad2c459da46$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($242d9ad2c459da46$var$cachedClearTimeout === $242d9ad2c459da46$var$defaultClearTimeout || !$242d9ad2c459da46$var$cachedClearTimeout) && clearTimeout) {
        $242d9ad2c459da46$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $242d9ad2c459da46$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $242d9ad2c459da46$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $242d9ad2c459da46$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $242d9ad2c459da46$var$queue = [];
var $242d9ad2c459da46$var$draining = false;
var $242d9ad2c459da46$var$currentQueue;
var $242d9ad2c459da46$var$queueIndex = -1;
function $242d9ad2c459da46$var$cleanUpNextTick() {
    if (!$242d9ad2c459da46$var$draining || !$242d9ad2c459da46$var$currentQueue) return;
    $242d9ad2c459da46$var$draining = false;
    if ($242d9ad2c459da46$var$currentQueue.length) $242d9ad2c459da46$var$queue = $242d9ad2c459da46$var$currentQueue.concat($242d9ad2c459da46$var$queue);
    else $242d9ad2c459da46$var$queueIndex = -1;
    if ($242d9ad2c459da46$var$queue.length) $242d9ad2c459da46$var$drainQueue();
}
function $242d9ad2c459da46$var$drainQueue() {
    if ($242d9ad2c459da46$var$draining) return;
    var timeout = $242d9ad2c459da46$var$runTimeout($242d9ad2c459da46$var$cleanUpNextTick);
    $242d9ad2c459da46$var$draining = true;
    var len = $242d9ad2c459da46$var$queue.length;
    while(len){
        $242d9ad2c459da46$var$currentQueue = $242d9ad2c459da46$var$queue;
        $242d9ad2c459da46$var$queue = [];
        while(++$242d9ad2c459da46$var$queueIndex < len)if ($242d9ad2c459da46$var$currentQueue) $242d9ad2c459da46$var$currentQueue[$242d9ad2c459da46$var$queueIndex].run();
        $242d9ad2c459da46$var$queueIndex = -1;
        len = $242d9ad2c459da46$var$queue.length;
    }
    $242d9ad2c459da46$var$currentQueue = null;
    $242d9ad2c459da46$var$draining = false;
    $242d9ad2c459da46$var$runClearTimeout(timeout);
}
$242d9ad2c459da46$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $242d9ad2c459da46$var$queue.push(new $242d9ad2c459da46$var$Item(fun, args));
    if ($242d9ad2c459da46$var$queue.length === 1 && !$242d9ad2c459da46$var$draining) $242d9ad2c459da46$var$runTimeout($242d9ad2c459da46$var$drainQueue);
};
// v8 likes predictible objects
function $242d9ad2c459da46$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$242d9ad2c459da46$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$242d9ad2c459da46$var$process.title = 'browser';
$242d9ad2c459da46$var$process.browser = true;
$242d9ad2c459da46$var$process.env = {};
$242d9ad2c459da46$var$process.argv = [];
$242d9ad2c459da46$var$process.version = ''; // empty string to avoid regexp issues
$242d9ad2c459da46$var$process.versions = {};
function $242d9ad2c459da46$var$noop() {}
$242d9ad2c459da46$var$process.on = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.addListener = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.once = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.off = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.removeListener = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.removeAllListeners = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.emit = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.prependListener = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.prependOnceListener = $242d9ad2c459da46$var$noop;
$242d9ad2c459da46$var$process.listeners = function(name) {
    return [];
};
$242d9ad2c459da46$var$process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
$242d9ad2c459da46$var$process.cwd = function() {
    return '/';
};
$242d9ad2c459da46$var$process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
$242d9ad2c459da46$var$process.umask = function() {
    return 0;
};

});

parcelRequire.register("8k9oS", function(module, exports) {

var $gGU47 = parcelRequire("gGU47");
var $60f77bacd8877140$var$Buffer = $gGU47.Buffer;
// alternative to using Object.keys for old browsers
function $60f77bacd8877140$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($60f77bacd8877140$var$Buffer.from && $60f77bacd8877140$var$Buffer.alloc && $60f77bacd8877140$var$Buffer.allocUnsafe && $60f77bacd8877140$var$Buffer.allocUnsafeSlow) module.exports = $gGU47;
else {
    // Copy properties from require('buffer')
    $60f77bacd8877140$var$copyProps($gGU47, module.exports);
    module.exports.Buffer = $60f77bacd8877140$var$SafeBuffer;
}
function $60f77bacd8877140$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $60f77bacd8877140$var$Buffer(arg, encodingOrOffset, length);
}
$60f77bacd8877140$var$SafeBuffer.prototype = Object.create($60f77bacd8877140$var$Buffer.prototype);
// Copy static methods from Buffer
$60f77bacd8877140$var$copyProps($60f77bacd8877140$var$Buffer, $60f77bacd8877140$var$SafeBuffer);
$60f77bacd8877140$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return $60f77bacd8877140$var$Buffer(arg, encodingOrOffset, length);
};
$60f77bacd8877140$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = $60f77bacd8877140$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$60f77bacd8877140$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $60f77bacd8877140$var$Buffer(size);
};
$60f77bacd8877140$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $gGU47.SlowBuffer(size);
};

});


parcelRequire.register("cv73a", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $2MW9T = parcelRequire("2MW9T");

var $iUB0B = parcelRequire("iUB0B");

var $lCSWS = parcelRequire("lCSWS");

var $h2SJW = parcelRequire("h2SJW");
function $919dd94c9c2348dc$var$Hash(hash) {
    $h2SJW.call(this, 'digest');
    this._hash = hash;
}
$baEok($919dd94c9c2348dc$var$Hash, $h2SJW);
$919dd94c9c2348dc$var$Hash.prototype._update = function(data) {
    this._hash.update(data);
};
$919dd94c9c2348dc$var$Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new $2MW9T();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $iUB0B();
    return new $919dd94c9c2348dc$var$Hash($lCSWS(alg));
};

});
parcelRequire.register("baEok", function(module, exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("2MW9T", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $lfuKR = parcelRequire("lfuKR");

var $8k9oS = parcelRequire("8k9oS");
var $207d2d8971b347b4$require$Buffer = $8k9oS.Buffer;
var $207d2d8971b347b4$var$ARRAY16 = new Array(16);
function $207d2d8971b347b4$var$MD5() {
    $lfuKR.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
$baEok($207d2d8971b347b4$var$MD5, $lfuKR);
$207d2d8971b347b4$var$MD5.prototype._update = function() {
    var M = $207d2d8971b347b4$var$ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = $207d2d8971b347b4$var$fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = $207d2d8971b347b4$var$fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = $207d2d8971b347b4$var$fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = $207d2d8971b347b4$var$fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = $207d2d8971b347b4$var$fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = $207d2d8971b347b4$var$fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = $207d2d8971b347b4$var$fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = $207d2d8971b347b4$var$fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = $207d2d8971b347b4$var$fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = $207d2d8971b347b4$var$fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = $207d2d8971b347b4$var$fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = $207d2d8971b347b4$var$fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = $207d2d8971b347b4$var$fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = $207d2d8971b347b4$var$fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = $207d2d8971b347b4$var$fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = $207d2d8971b347b4$var$fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = $207d2d8971b347b4$var$fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = $207d2d8971b347b4$var$fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = $207d2d8971b347b4$var$fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = $207d2d8971b347b4$var$fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = $207d2d8971b347b4$var$fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = $207d2d8971b347b4$var$fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = $207d2d8971b347b4$var$fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = $207d2d8971b347b4$var$fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = $207d2d8971b347b4$var$fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = $207d2d8971b347b4$var$fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = $207d2d8971b347b4$var$fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = $207d2d8971b347b4$var$fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = $207d2d8971b347b4$var$fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = $207d2d8971b347b4$var$fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = $207d2d8971b347b4$var$fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = $207d2d8971b347b4$var$fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = $207d2d8971b347b4$var$fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = $207d2d8971b347b4$var$fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = $207d2d8971b347b4$var$fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = $207d2d8971b347b4$var$fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = $207d2d8971b347b4$var$fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = $207d2d8971b347b4$var$fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = $207d2d8971b347b4$var$fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = $207d2d8971b347b4$var$fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = $207d2d8971b347b4$var$fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = $207d2d8971b347b4$var$fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = $207d2d8971b347b4$var$fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = $207d2d8971b347b4$var$fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = $207d2d8971b347b4$var$fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = $207d2d8971b347b4$var$fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = $207d2d8971b347b4$var$fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = $207d2d8971b347b4$var$fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = $207d2d8971b347b4$var$fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = $207d2d8971b347b4$var$fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = $207d2d8971b347b4$var$fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = $207d2d8971b347b4$var$fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = $207d2d8971b347b4$var$fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = $207d2d8971b347b4$var$fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = $207d2d8971b347b4$var$fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = $207d2d8971b347b4$var$fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = $207d2d8971b347b4$var$fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = $207d2d8971b347b4$var$fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = $207d2d8971b347b4$var$fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = $207d2d8971b347b4$var$fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = $207d2d8971b347b4$var$fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = $207d2d8971b347b4$var$fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = $207d2d8971b347b4$var$fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = $207d2d8971b347b4$var$fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
$207d2d8971b347b4$var$MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $207d2d8971b347b4$require$Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function $207d2d8971b347b4$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $207d2d8971b347b4$var$fnF(a, b, c, d, m, k, s) {
    return $207d2d8971b347b4$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function $207d2d8971b347b4$var$fnG(a, b, c, d, m, k, s) {
    return $207d2d8971b347b4$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function $207d2d8971b347b4$var$fnH(a, b, c, d, m, k, s) {
    return $207d2d8971b347b4$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function $207d2d8971b347b4$var$fnI(a, b, c, d, m, k, s) {
    return $207d2d8971b347b4$var$rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = $207d2d8971b347b4$var$MD5;

});
parcelRequire.register("lfuKR", function(module, exports) {
'use strict';

var $8k9oS = parcelRequire("8k9oS");
var $f782daf4b8d900a0$require$Buffer = $8k9oS.Buffer;

var $8jMh9 = parcelRequire("8jMh9");
var $f782daf4b8d900a0$require$Transform = $8jMh9.Transform;

var $baEok = parcelRequire("baEok");
function $f782daf4b8d900a0$var$throwIfNotStringOrBuffer(val, prefix) {
    if (!$f782daf4b8d900a0$require$Buffer.isBuffer(val) && typeof val !== 'string') throw new TypeError(prefix + ' must be a string or a buffer');
}
function $f782daf4b8d900a0$var$HashBase(blockSize) {
    $f782daf4b8d900a0$require$Transform.call(this);
    this._block = $f782daf4b8d900a0$require$Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
$baEok($f782daf4b8d900a0$var$HashBase, $f782daf4b8d900a0$require$Transform);
$f782daf4b8d900a0$var$HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
$f782daf4b8d900a0$var$HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
$f782daf4b8d900a0$var$HashBase.prototype.update = function(data, encoding) {
    $f782daf4b8d900a0$var$throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!$f782daf4b8d900a0$require$Buffer.isBuffer(data)) data = $f782daf4b8d900a0$require$Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
$f782daf4b8d900a0$var$HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
$f782daf4b8d900a0$var$HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
$f782daf4b8d900a0$var$HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = $f782daf4b8d900a0$var$HashBase;

});
parcelRequire.register("8jMh9", function(module, exports) {

exports = module.exports = (parcelRequire("guKjM"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("gmw45"));

exports.Duplex = (parcelRequire("3Sygc"));

exports.Transform = (parcelRequire("fJLVb"));

exports.PassThrough = (parcelRequire("7FJFn"));

exports.finished = (parcelRequire("6wOn5"));

exports.pipeline = (parcelRequire("kgCmy"));

});
parcelRequire.register("guKjM", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $36zFS = parcelRequire("36zFS");
module.exports = $c0236074eb3fc5d0$var$Readable;
/*<replacement>*/ var $c0236074eb3fc5d0$var$Duplex;
/*</replacement>*/ $c0236074eb3fc5d0$var$Readable.ReadableState = $c0236074eb3fc5d0$var$ReadableState;

var $8GOdr = parcelRequire("8GOdr");
var $c0236074eb3fc5d0$require$EE = $8GOdr.EventEmitter;
var $c0236074eb3fc5d0$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $dv3s3 = parcelRequire("dv3s3");

var $gGU47 = parcelRequire("gGU47");
var $c0236074eb3fc5d0$require$Buffer = $gGU47.Buffer;
var $c0236074eb3fc5d0$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $c0236074eb3fc5d0$var$_uint8ArrayToBuffer(chunk) {
    return $c0236074eb3fc5d0$require$Buffer.from(chunk);
}
function $c0236074eb3fc5d0$var$_isUint8Array(obj) {
    return $c0236074eb3fc5d0$require$Buffer.isBuffer(obj) || obj instanceof $c0236074eb3fc5d0$var$OurUint8Array;
}

var $c7mcJ = parcelRequire("c7mcJ");
var $c0236074eb3fc5d0$var$debug;
if ($c7mcJ && $c7mcJ.debuglog) $c0236074eb3fc5d0$var$debug = $c7mcJ.debuglog('stream');
else $c0236074eb3fc5d0$var$debug = function debug() {};

var $ccqwk = parcelRequire("ccqwk");

var $9Z4lO = parcelRequire("9Z4lO");

var $52fNV = parcelRequire("52fNV");
var $c0236074eb3fc5d0$var$getHighWaterMark = $52fNV.getHighWaterMark;

var $1wnE4 = parcelRequire("1wnE4");
var $c0236074eb3fc5d0$require$_require$codes = $1wnE4.codes;
var $c0236074eb3fc5d0$var$ERR_INVALID_ARG_TYPE = $c0236074eb3fc5d0$require$_require$codes.ERR_INVALID_ARG_TYPE, $c0236074eb3fc5d0$var$ERR_STREAM_PUSH_AFTER_EOF = $c0236074eb3fc5d0$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $c0236074eb3fc5d0$var$ERR_METHOD_NOT_IMPLEMENTED = $c0236074eb3fc5d0$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $c0236074eb3fc5d0$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $c0236074eb3fc5d0$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $c0236074eb3fc5d0$var$StringDecoder;
var $c0236074eb3fc5d0$var$createReadableStreamAsyncIterator;
var $c0236074eb3fc5d0$var$from;

(parcelRequire("baEok"))($c0236074eb3fc5d0$var$Readable, $dv3s3);
var $c0236074eb3fc5d0$var$errorOrDestroy = $9Z4lO.errorOrDestroy;
var $c0236074eb3fc5d0$var$kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function $c0236074eb3fc5d0$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $c0236074eb3fc5d0$var$ReadableState(options, stream, isDuplex) {
    $c0236074eb3fc5d0$var$Duplex = $c0236074eb3fc5d0$var$Duplex || (parcelRequire("3Sygc"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $c0236074eb3fc5d0$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $c0236074eb3fc5d0$var$getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $ccqwk();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$c0236074eb3fc5d0$var$StringDecoder) $c0236074eb3fc5d0$var$StringDecoder = (parcelRequire("gw1E8")).StringDecoder;
        this.decoder = new $c0236074eb3fc5d0$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $c0236074eb3fc5d0$var$Readable(options) {
    $c0236074eb3fc5d0$var$Duplex = $c0236074eb3fc5d0$var$Duplex || (parcelRequire("3Sygc"));
    if (!(this instanceof $c0236074eb3fc5d0$var$Readable)) return new $c0236074eb3fc5d0$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $c0236074eb3fc5d0$var$Duplex;
    this._readableState = new $c0236074eb3fc5d0$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    $dv3s3.call(this);
}
Object.defineProperty($c0236074eb3fc5d0$var$Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$c0236074eb3fc5d0$var$Readable.prototype.destroy = $9Z4lO.destroy;
$c0236074eb3fc5d0$var$Readable.prototype._undestroy = $9Z4lO.undestroy;
$c0236074eb3fc5d0$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$c0236074eb3fc5d0$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $c0236074eb3fc5d0$require$Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $c0236074eb3fc5d0$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$c0236074eb3fc5d0$var$Readable.prototype.unshift = function(chunk) {
    return $c0236074eb3fc5d0$var$readableAddChunk(this, chunk, null, true, false);
};
function $c0236074eb3fc5d0$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $c0236074eb3fc5d0$var$debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $c0236074eb3fc5d0$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $c0236074eb3fc5d0$var$chunkInvalid(state, chunk);
        if (er) $c0236074eb3fc5d0$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $c0236074eb3fc5d0$require$Buffer.prototype) chunk = $c0236074eb3fc5d0$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $c0236074eb3fc5d0$var$errorOrDestroy(stream, new $c0236074eb3fc5d0$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $c0236074eb3fc5d0$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $c0236074eb3fc5d0$var$errorOrDestroy(stream, new $c0236074eb3fc5d0$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $c0236074eb3fc5d0$var$addChunk(stream, state, chunk, false);
                    else $c0236074eb3fc5d0$var$maybeReadMore(stream, state);
                } else $c0236074eb3fc5d0$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $c0236074eb3fc5d0$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $c0236074eb3fc5d0$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $c0236074eb3fc5d0$var$emitReadable(stream);
    }
    $c0236074eb3fc5d0$var$maybeReadMore(stream, state);
}
function $c0236074eb3fc5d0$var$chunkInvalid(state, chunk) {
    var er;
    if (!$c0236074eb3fc5d0$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new $c0236074eb3fc5d0$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
$c0236074eb3fc5d0$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$c0236074eb3fc5d0$var$Readable.prototype.setEncoding = function(enc) {
    if (!$c0236074eb3fc5d0$var$StringDecoder) $c0236074eb3fc5d0$var$StringDecoder = (parcelRequire("gw1E8")).StringDecoder;
    var decoder = new $c0236074eb3fc5d0$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $c0236074eb3fc5d0$var$MAX_HWM = 0x40000000;
function $c0236074eb3fc5d0$var$computeNewHighWaterMark(n) {
    if (n >= $c0236074eb3fc5d0$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $c0236074eb3fc5d0$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $c0236074eb3fc5d0$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $c0236074eb3fc5d0$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$c0236074eb3fc5d0$var$Readable.prototype.read = function(n) {
    $c0236074eb3fc5d0$var$debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $c0236074eb3fc5d0$var$debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) $c0236074eb3fc5d0$var$endReadable(this);
        else $c0236074eb3fc5d0$var$emitReadable(this);
        return null;
    }
    n = $c0236074eb3fc5d0$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $c0236074eb3fc5d0$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $c0236074eb3fc5d0$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $c0236074eb3fc5d0$var$debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $c0236074eb3fc5d0$var$debug('reading or ended', doRead);
    } else if (doRead) {
        $c0236074eb3fc5d0$var$debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $c0236074eb3fc5d0$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $c0236074eb3fc5d0$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $c0236074eb3fc5d0$var$endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function $c0236074eb3fc5d0$var$onEofChunk(stream, state) {
    $c0236074eb3fc5d0$var$debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $c0236074eb3fc5d0$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $c0236074eb3fc5d0$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $c0236074eb3fc5d0$var$emitReadable(stream) {
    var state = stream._readableState;
    $c0236074eb3fc5d0$var$debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $c0236074eb3fc5d0$var$debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        $36zFS.nextTick($c0236074eb3fc5d0$var$emitReadable_, stream);
    }
}
function $c0236074eb3fc5d0$var$emitReadable_(stream) {
    var state = stream._readableState;
    $c0236074eb3fc5d0$var$debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $c0236074eb3fc5d0$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $c0236074eb3fc5d0$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $36zFS.nextTick($c0236074eb3fc5d0$var$maybeReadMore_, stream, state);
    }
}
function $c0236074eb3fc5d0$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $c0236074eb3fc5d0$var$debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$c0236074eb3fc5d0$var$Readable.prototype._read = function(n) {
    $c0236074eb3fc5d0$var$errorOrDestroy(this, new $c0236074eb3fc5d0$var$ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
$c0236074eb3fc5d0$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $c0236074eb3fc5d0$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $36zFS.stdout && dest !== $36zFS.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $36zFS.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $c0236074eb3fc5d0$var$debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $c0236074eb3fc5d0$var$debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $c0236074eb3fc5d0$var$pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        $c0236074eb3fc5d0$var$debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        $c0236074eb3fc5d0$var$debug('ondata');
        var ret = dest.write(chunk);
        $c0236074eb3fc5d0$var$debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $c0236074eb3fc5d0$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $c0236074eb3fc5d0$var$debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $c0236074eb3fc5d0$var$debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if ($c0236074eb3fc5d0$var$EElistenerCount(dest, 'error') === 0) $c0236074eb3fc5d0$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $c0236074eb3fc5d0$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        $c0236074eb3fc5d0$var$debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        $c0236074eb3fc5d0$var$debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $c0236074eb3fc5d0$var$debug('pipe resume');
        src.resume();
    }
    return dest;
};
function $c0236074eb3fc5d0$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $c0236074eb3fc5d0$var$debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $c0236074eb3fc5d0$var$EElistenerCount(src, 'data')) {
            state.flowing = true;
            $c0236074eb3fc5d0$var$flow(src);
        }
    };
}
$c0236074eb3fc5d0$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $c0236074eb3fc5d0$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$c0236074eb3fc5d0$var$Readable.prototype.on = function(ev, fn) {
    var res = $dv3s3.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $c0236074eb3fc5d0$var$debug('on readable', state.length, state.reading);
            if (state.length) $c0236074eb3fc5d0$var$emitReadable(this);
            else if (!state.reading) $36zFS.nextTick($c0236074eb3fc5d0$var$nReadingNextTick, this);
        }
    }
    return res;
};
$c0236074eb3fc5d0$var$Readable.prototype.addListener = $c0236074eb3fc5d0$var$Readable.prototype.on;
$c0236074eb3fc5d0$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $dv3s3.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $36zFS.nextTick($c0236074eb3fc5d0$var$updateReadableListening, this);
    return res;
};
$c0236074eb3fc5d0$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $dv3s3.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $36zFS.nextTick($c0236074eb3fc5d0$var$updateReadableListening, this);
    return res;
};
function $c0236074eb3fc5d0$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function $c0236074eb3fc5d0$var$nReadingNextTick(self) {
    $c0236074eb3fc5d0$var$debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$c0236074eb3fc5d0$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $c0236074eb3fc5d0$var$debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $c0236074eb3fc5d0$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $c0236074eb3fc5d0$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $36zFS.nextTick($c0236074eb3fc5d0$var$resume_, stream, state);
    }
}
function $c0236074eb3fc5d0$var$resume_(stream, state) {
    $c0236074eb3fc5d0$var$debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    $c0236074eb3fc5d0$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$c0236074eb3fc5d0$var$Readable.prototype.pause = function() {
    $c0236074eb3fc5d0$var$debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $c0236074eb3fc5d0$var$debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function $c0236074eb3fc5d0$var$flow(stream) {
    var state = stream._readableState;
    $c0236074eb3fc5d0$var$debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$c0236074eb3fc5d0$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        $c0236074eb3fc5d0$var$debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        $c0236074eb3fc5d0$var$debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < $c0236074eb3fc5d0$var$kProxyEvents.length; n1++)stream.on($c0236074eb3fc5d0$var$kProxyEvents[n1], this.emit.bind(this, $c0236074eb3fc5d0$var$kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $c0236074eb3fc5d0$var$debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === 'function') $c0236074eb3fc5d0$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($c0236074eb3fc5d0$var$createReadableStreamAsyncIterator === undefined) $c0236074eb3fc5d0$var$createReadableStreamAsyncIterator = (parcelRequire("b3ER6"));
    return $c0236074eb3fc5d0$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($c0236074eb3fc5d0$var$Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($c0236074eb3fc5d0$var$Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($c0236074eb3fc5d0$var$Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$c0236074eb3fc5d0$var$Readable._fromList = $c0236074eb3fc5d0$var$fromList;
Object.defineProperty($c0236074eb3fc5d0$var$Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $c0236074eb3fc5d0$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $c0236074eb3fc5d0$var$endReadable(stream) {
    var state = stream._readableState;
    $c0236074eb3fc5d0$var$debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $36zFS.nextTick($c0236074eb3fc5d0$var$endReadableNT, state, stream);
    }
}
function $c0236074eb3fc5d0$var$endReadableNT(state, stream) {
    $c0236074eb3fc5d0$var$debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === 'function') $c0236074eb3fc5d0$var$Readable.from = function(iterable, opts) {
    if ($c0236074eb3fc5d0$var$from === undefined) $c0236074eb3fc5d0$var$from = (parcelRequire("dBC93"));
    return $c0236074eb3fc5d0$var$from($c0236074eb3fc5d0$var$Readable, iterable, opts);
};
function $c0236074eb3fc5d0$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("8GOdr", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $653932cad08a465d$var$R = typeof Reflect === 'object' ? Reflect : null;
var $653932cad08a465d$var$ReflectApply = $653932cad08a465d$var$R && typeof $653932cad08a465d$var$R.apply === 'function' ? $653932cad08a465d$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $653932cad08a465d$var$ReflectOwnKeys;
if ($653932cad08a465d$var$R && typeof $653932cad08a465d$var$R.ownKeys === 'function') $653932cad08a465d$var$ReflectOwnKeys = $653932cad08a465d$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $653932cad08a465d$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $653932cad08a465d$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $653932cad08a465d$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $653932cad08a465d$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $653932cad08a465d$var$EventEmitter() {
    $653932cad08a465d$var$EventEmitter.init.call(this);
}
module.exports = $653932cad08a465d$var$EventEmitter;
module.exports.once = $653932cad08a465d$var$once;
// Backwards-compat with node 0.10.x
$653932cad08a465d$var$EventEmitter.EventEmitter = $653932cad08a465d$var$EventEmitter;
$653932cad08a465d$var$EventEmitter.prototype._events = undefined;
$653932cad08a465d$var$EventEmitter.prototype._eventsCount = 0;
$653932cad08a465d$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $653932cad08a465d$var$defaultMaxListeners = 10;
function $653932cad08a465d$var$checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty($653932cad08a465d$var$EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return $653932cad08a465d$var$defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || $653932cad08a465d$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        $653932cad08a465d$var$defaultMaxListeners = arg;
    }
});
$653932cad08a465d$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$653932cad08a465d$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || $653932cad08a465d$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function $653932cad08a465d$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $653932cad08a465d$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$653932cad08a465d$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $653932cad08a465d$var$_getMaxListeners(this);
};
$653932cad08a465d$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') $653932cad08a465d$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $653932cad08a465d$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$653932cad08a465d$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $653932cad08a465d$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $653932cad08a465d$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $653932cad08a465d$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $653932cad08a465d$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$653932cad08a465d$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $653932cad08a465d$var$_addListener(this, type, listener, false);
};
$653932cad08a465d$var$EventEmitter.prototype.on = $653932cad08a465d$var$EventEmitter.prototype.addListener;
$653932cad08a465d$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $653932cad08a465d$var$_addListener(this, type, listener, true);
};
function $653932cad08a465d$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $653932cad08a465d$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $653932cad08a465d$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$653932cad08a465d$var$EventEmitter.prototype.once = function once(type, listener) {
    $653932cad08a465d$var$checkListener(listener);
    this.on(type, $653932cad08a465d$var$_onceWrap(this, type, listener));
    return this;
};
$653932cad08a465d$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $653932cad08a465d$var$checkListener(listener);
    this.prependListener(type, $653932cad08a465d$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$653932cad08a465d$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $653932cad08a465d$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $653932cad08a465d$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
$653932cad08a465d$var$EventEmitter.prototype.off = $653932cad08a465d$var$EventEmitter.prototype.removeListener;
$653932cad08a465d$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $653932cad08a465d$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $653932cad08a465d$var$unwrapListeners(evlistener) : $653932cad08a465d$var$arrayClone(evlistener, evlistener.length);
}
$653932cad08a465d$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $653932cad08a465d$var$_listeners(this, type, true);
};
$653932cad08a465d$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $653932cad08a465d$var$_listeners(this, type, false);
};
$653932cad08a465d$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return $653932cad08a465d$var$listenerCount.call(emitter, type);
};
$653932cad08a465d$var$EventEmitter.prototype.listenerCount = $653932cad08a465d$var$listenerCount;
function $653932cad08a465d$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$653932cad08a465d$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $653932cad08a465d$var$ReflectOwnKeys(this._events) : [];
};
function $653932cad08a465d$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $653932cad08a465d$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $653932cad08a465d$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $653932cad08a465d$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        $653932cad08a465d$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') $653932cad08a465d$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $653932cad08a465d$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') $653932cad08a465d$var$eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function $653932cad08a465d$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

});

parcelRequire.register("dv3s3", function(module, exports) {

module.exports = (parcelRequire("8GOdr")).EventEmitter;

});

parcelRequire.register("c7mcJ", function(module, exports) {
"use strict";

});

parcelRequire.register("ccqwk", function(module, exports) {
'use strict';
function $8e1b2d6bd7da6334$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $8e1b2d6bd7da6334$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) $8e1b2d6bd7da6334$var$ownKeys(Object(source), true).forEach(function(key) {
            $8e1b2d6bd7da6334$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $8e1b2d6bd7da6334$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $8e1b2d6bd7da6334$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $8e1b2d6bd7da6334$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $8e1b2d6bd7da6334$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $8e1b2d6bd7da6334$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $8e1b2d6bd7da6334$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $8e1b2d6bd7da6334$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $gGU47 = parcelRequire("gGU47");
var $8e1b2d6bd7da6334$var$Buffer = $gGU47.Buffer;

var $c7mcJ = parcelRequire("c7mcJ");
var $8e1b2d6bd7da6334$var$inspect = $c7mcJ.inspect;
var $8e1b2d6bd7da6334$var$custom = $8e1b2d6bd7da6334$var$inspect && $8e1b2d6bd7da6334$var$inspect.custom || 'inspect';
function $8e1b2d6bd7da6334$var$copyBuffer(src, target, offset) {
    $8e1b2d6bd7da6334$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $8e1b2d6bd7da6334$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $8e1b2d6bd7da6334$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $8e1b2d6bd7da6334$var$Buffer.alloc(0);
                var ret = $8e1b2d6bd7da6334$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $8e1b2d6bd7da6334$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $8e1b2d6bd7da6334$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $8e1b2d6bd7da6334$var$custom,
            value: function value(_, options) {
                return $8e1b2d6bd7da6334$var$inspect(this, $8e1b2d6bd7da6334$var$_objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("9Z4lO", function(module, exports) {
'use strict'; // undocumented cb() API, needed for core, not for public API

var $36zFS = parcelRequire("36zFS");
function $744d2f888819bf34$var$destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) $36zFS.nextTick($744d2f888819bf34$var$emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $36zFS.nextTick($744d2f888819bf34$var$emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $36zFS.nextTick($744d2f888819bf34$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $36zFS.nextTick($744d2f888819bf34$var$emitErrorAndCloseNT, _this, err);
            } else $36zFS.nextTick($744d2f888819bf34$var$emitCloseNT, _this);
        } else if (cb) {
            $36zFS.nextTick($744d2f888819bf34$var$emitCloseNT, _this);
            cb(err);
        } else $36zFS.nextTick($744d2f888819bf34$var$emitCloseNT, _this);
    });
    return this;
}
function $744d2f888819bf34$var$emitErrorAndCloseNT(self, err) {
    $744d2f888819bf34$var$emitErrorNT(self, err);
    $744d2f888819bf34$var$emitCloseNT(self);
}
function $744d2f888819bf34$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function $744d2f888819bf34$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $744d2f888819bf34$var$emitErrorNT(self, err) {
    self.emit('error', err);
}
function $744d2f888819bf34$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: $744d2f888819bf34$var$destroy,
    undestroy: $744d2f888819bf34$var$undestroy,
    errorOrDestroy: $744d2f888819bf34$var$errorOrDestroy
};

});

parcelRequire.register("52fNV", function(module, exports) {
'use strict';

var $1wnE4 = parcelRequire("1wnE4");
var $3aa9660634694709$var$ERR_INVALID_OPT_VALUE = $1wnE4.codes.ERR_INVALID_OPT_VALUE;
function $3aa9660634694709$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $3aa9660634694709$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $3aa9660634694709$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new $3aa9660634694709$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $3aa9660634694709$var$getHighWaterMark
};

});
parcelRequire.register("1wnE4", function(module, exports) {

$parcel$export(module.exports, "codes", function () { return $11bb1f0c779a52ad$export$e45cb6485273080e; }, function (v) { return $11bb1f0c779a52ad$export$e45cb6485273080e = v; });
var $11bb1f0c779a52ad$export$e45cb6485273080e;
'use strict';
function $11bb1f0c779a52ad$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $11bb1f0c779a52ad$var$codes = {};
function $11bb1f0c779a52ad$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $11bb1f0c779a52ad$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    $11bb1f0c779a52ad$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $11bb1f0c779a52ad$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $11bb1f0c779a52ad$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $11bb1f0c779a52ad$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $11bb1f0c779a52ad$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$11bb1f0c779a52ad$var$createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$11bb1f0c779a52ad$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $11bb1f0c779a52ad$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($11bb1f0c779a52ad$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($11bb1f0c779a52ad$var$oneOf(expected, 'type'));
    else {
        var type = $11bb1f0c779a52ad$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($11bb1f0c779a52ad$var$oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$11bb1f0c779a52ad$var$createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
$11bb1f0c779a52ad$var$createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
$11bb1f0c779a52ad$var$createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
$11bb1f0c779a52ad$var$createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
$11bb1f0c779a52ad$var$createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
$11bb1f0c779a52ad$var$createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
$11bb1f0c779a52ad$var$createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
$11bb1f0c779a52ad$var$createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
$11bb1f0c779a52ad$var$createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
$11bb1f0c779a52ad$var$createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
$11bb1f0c779a52ad$export$e45cb6485273080e = $11bb1f0c779a52ad$var$codes;

});


parcelRequire.register("3Sygc", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';

var $36zFS = parcelRequire("36zFS");
/*<replacement>*/ var $2d30fd9b4d20168f$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $2d30fd9b4d20168f$var$Duplex;

var $guKjM = parcelRequire("guKjM");

var $gmw45 = parcelRequire("gmw45");

(parcelRequire("baEok"))($2d30fd9b4d20168f$var$Duplex, $guKjM);
// Allow the keys array to be GC'ed.
var $2d30fd9b4d20168f$var$keys = $2d30fd9b4d20168f$var$objectKeys($gmw45.prototype);
for(var $2d30fd9b4d20168f$var$v = 0; $2d30fd9b4d20168f$var$v < $2d30fd9b4d20168f$var$keys.length; $2d30fd9b4d20168f$var$v++){
    var $2d30fd9b4d20168f$var$method = $2d30fd9b4d20168f$var$keys[$2d30fd9b4d20168f$var$v];
    if (!$2d30fd9b4d20168f$var$Duplex.prototype[$2d30fd9b4d20168f$var$method]) $2d30fd9b4d20168f$var$Duplex.prototype[$2d30fd9b4d20168f$var$method] = $gmw45.prototype[$2d30fd9b4d20168f$var$method];
}
function $2d30fd9b4d20168f$var$Duplex(options) {
    if (!(this instanceof $2d30fd9b4d20168f$var$Duplex)) return new $2d30fd9b4d20168f$var$Duplex(options);
    $guKjM.call(this, options);
    $gmw45.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', $2d30fd9b4d20168f$var$onend);
        }
    }
}
Object.defineProperty($2d30fd9b4d20168f$var$Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($2d30fd9b4d20168f$var$Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($2d30fd9b4d20168f$var$Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $2d30fd9b4d20168f$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $36zFS.nextTick($2d30fd9b4d20168f$var$onEndNT, this);
}
function $2d30fd9b4d20168f$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($2d30fd9b4d20168f$var$Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("gmw45", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

var $36zFS = parcelRequire("36zFS");
module.exports = $be9792da81681517$var$Writable;
/* <replacement> */ function $be9792da81681517$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $be9792da81681517$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $be9792da81681517$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $be9792da81681517$var$Duplex;
/*</replacement>*/ $be9792da81681517$var$Writable.WritableState = $be9792da81681517$var$WritableState;

/*<replacement>*/ var $be9792da81681517$var$internalUtil = {
    deprecate: (parcelRequire("93hL2"))
};

var $dv3s3 = parcelRequire("dv3s3");

var $gGU47 = parcelRequire("gGU47");
var $be9792da81681517$require$Buffer = $gGU47.Buffer;
var $be9792da81681517$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $be9792da81681517$var$_uint8ArrayToBuffer(chunk) {
    return $be9792da81681517$require$Buffer.from(chunk);
}
function $be9792da81681517$var$_isUint8Array(obj) {
    return $be9792da81681517$require$Buffer.isBuffer(obj) || obj instanceof $be9792da81681517$var$OurUint8Array;
}

var $9Z4lO = parcelRequire("9Z4lO");

var $52fNV = parcelRequire("52fNV");
var $be9792da81681517$var$getHighWaterMark = $52fNV.getHighWaterMark;

var $1wnE4 = parcelRequire("1wnE4");
var $be9792da81681517$require$_require$codes = $1wnE4.codes;
var $be9792da81681517$var$ERR_INVALID_ARG_TYPE = $be9792da81681517$require$_require$codes.ERR_INVALID_ARG_TYPE, $be9792da81681517$var$ERR_METHOD_NOT_IMPLEMENTED = $be9792da81681517$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $be9792da81681517$var$ERR_MULTIPLE_CALLBACK = $be9792da81681517$require$_require$codes.ERR_MULTIPLE_CALLBACK, $be9792da81681517$var$ERR_STREAM_CANNOT_PIPE = $be9792da81681517$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $be9792da81681517$var$ERR_STREAM_DESTROYED = $be9792da81681517$require$_require$codes.ERR_STREAM_DESTROYED, $be9792da81681517$var$ERR_STREAM_NULL_VALUES = $be9792da81681517$require$_require$codes.ERR_STREAM_NULL_VALUES, $be9792da81681517$var$ERR_STREAM_WRITE_AFTER_END = $be9792da81681517$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $be9792da81681517$var$ERR_UNKNOWN_ENCODING = $be9792da81681517$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $be9792da81681517$var$errorOrDestroy = $9Z4lO.errorOrDestroy;

(parcelRequire("baEok"))($be9792da81681517$var$Writable, $dv3s3);
function $be9792da81681517$var$nop() {}

function $be9792da81681517$var$WritableState(options, stream, isDuplex) {
    $be9792da81681517$var$Duplex = $be9792da81681517$var$Duplex || (parcelRequire("3Sygc"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $be9792da81681517$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $be9792da81681517$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $be9792da81681517$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $be9792da81681517$var$CorkedRequest(this);
}
$be9792da81681517$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($be9792da81681517$var$WritableState.prototype, 'buffer', {
            get: $be9792da81681517$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $be9792da81681517$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $be9792da81681517$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($be9792da81681517$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($be9792da81681517$var$realHasInstance.call(this, object)) return true;
            if (this !== $be9792da81681517$var$Writable) return false;
            return object && object._writableState instanceof $be9792da81681517$var$WritableState;
        }
    });
} else $be9792da81681517$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $be9792da81681517$var$Writable(options) {
    $be9792da81681517$var$Duplex = $be9792da81681517$var$Duplex || (parcelRequire("3Sygc")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $be9792da81681517$var$Duplex;
    if (!isDuplex && !$be9792da81681517$var$realHasInstance.call($be9792da81681517$var$Writable, this)) return new $be9792da81681517$var$Writable(options);
    this._writableState = new $be9792da81681517$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $dv3s3.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$be9792da81681517$var$Writable.prototype.pipe = function() {
    $be9792da81681517$var$errorOrDestroy(this, new $be9792da81681517$var$ERR_STREAM_CANNOT_PIPE());
};
function $be9792da81681517$var$writeAfterEnd(stream, cb) {
    var er = new $be9792da81681517$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $be9792da81681517$var$errorOrDestroy(stream, er);
    $36zFS.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $be9792da81681517$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $be9792da81681517$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $be9792da81681517$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $be9792da81681517$var$errorOrDestroy(stream, er);
        $36zFS.nextTick(cb, er);
        return false;
    }
    return true;
}
$be9792da81681517$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $be9792da81681517$var$_isUint8Array(chunk);
    if (isBuf && !$be9792da81681517$require$Buffer.isBuffer(chunk)) chunk = $be9792da81681517$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $be9792da81681517$var$nop;
    if (state.ending) $be9792da81681517$var$writeAfterEnd(this, cb);
    else if (isBuf || $be9792da81681517$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $be9792da81681517$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$be9792da81681517$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$be9792da81681517$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $be9792da81681517$var$clearBuffer(this, state);
    }
};
$be9792da81681517$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $be9792da81681517$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($be9792da81681517$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $be9792da81681517$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $be9792da81681517$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($be9792da81681517$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $be9792da81681517$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $be9792da81681517$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $be9792da81681517$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $be9792da81681517$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $be9792da81681517$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $be9792da81681517$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $36zFS.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $36zFS.nextTick($be9792da81681517$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $be9792da81681517$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $be9792da81681517$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $be9792da81681517$var$finishMaybe(stream, state);
    }
}
function $be9792da81681517$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $be9792da81681517$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $be9792da81681517$var$ERR_MULTIPLE_CALLBACK();
    $be9792da81681517$var$onwriteStateUpdate(state);
    if (er) $be9792da81681517$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $be9792da81681517$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $be9792da81681517$var$clearBuffer(stream, state);
        if (sync) $36zFS.nextTick($be9792da81681517$var$afterWrite, stream, state, finished, cb);
        else $be9792da81681517$var$afterWrite(stream, state, finished, cb);
    }
}
function $be9792da81681517$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $be9792da81681517$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $be9792da81681517$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $be9792da81681517$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $be9792da81681517$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $be9792da81681517$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $be9792da81681517$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $be9792da81681517$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$be9792da81681517$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $be9792da81681517$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$be9792da81681517$var$Writable.prototype._writev = null;
$be9792da81681517$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $be9792da81681517$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($be9792da81681517$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $be9792da81681517$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $be9792da81681517$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $be9792da81681517$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $be9792da81681517$var$finishMaybe(stream, state);
    });
}
function $be9792da81681517$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $36zFS.nextTick($be9792da81681517$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $be9792da81681517$var$finishMaybe(stream, state) {
    var need = $be9792da81681517$var$needFinish(state);
    if (need) {
        $be9792da81681517$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $be9792da81681517$var$endWritable(stream, state, cb) {
    state.ending = true;
    $be9792da81681517$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $36zFS.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $be9792da81681517$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($be9792da81681517$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$be9792da81681517$var$Writable.prototype.destroy = $9Z4lO.destroy;
$be9792da81681517$var$Writable.prototype._undestroy = $9Z4lO.undestroy;
$be9792da81681517$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("93hL2", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $69722b28163b2659$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $69722b28163b2659$var$deprecate(fn, msg) {
    if ($69722b28163b2659$var$config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($69722b28163b2659$var$config('throwDeprecation')) throw new Error(msg);
            else if ($69722b28163b2659$var$config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $69722b28163b2659$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

});



parcelRequire.register("gw1E8", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", function () { return $c060e96f0892ab24$export$63a7aa211a91ed69; }, function (v) { return $c060e96f0892ab24$export$63a7aa211a91ed69 = v; });
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $c060e96f0892ab24$export$63a7aa211a91ed69;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $8k9oS = parcelRequire("8k9oS");
var $c060e96f0892ab24$require$Buffer = $8k9oS.Buffer;
/*</replacement>*/ var $c060e96f0892ab24$var$isEncoding = $c060e96f0892ab24$require$Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function $c060e96f0892ab24$var$_normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $c060e96f0892ab24$var$normalizeEncoding(enc) {
    var nenc = $c060e96f0892ab24$var$_normalizeEncoding(enc);
    if (typeof nenc !== 'string' && ($c060e96f0892ab24$require$Buffer.isEncoding === $c060e96f0892ab24$var$isEncoding || !$c060e96f0892ab24$var$isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
$c060e96f0892ab24$export$63a7aa211a91ed69 = $c060e96f0892ab24$var$StringDecoder;
function $c060e96f0892ab24$var$StringDecoder(encoding) {
    this.encoding = $c060e96f0892ab24$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = $c060e96f0892ab24$var$utf16Text;
            this.end = $c060e96f0892ab24$var$utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = $c060e96f0892ab24$var$utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = $c060e96f0892ab24$var$base64Text;
            this.end = $c060e96f0892ab24$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $c060e96f0892ab24$var$simpleWrite;
            this.end = $c060e96f0892ab24$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $c060e96f0892ab24$require$Buffer.allocUnsafe(nb);
}
$c060e96f0892ab24$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
$c060e96f0892ab24$var$StringDecoder.prototype.end = $c060e96f0892ab24$var$utf8End;
// Returns only complete characters in a Buffer
$c060e96f0892ab24$var$StringDecoder.prototype.text = $c060e96f0892ab24$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$c060e96f0892ab24$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $c060e96f0892ab24$var$utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $c060e96f0892ab24$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $c060e96f0892ab24$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $c060e96f0892ab24$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $c060e96f0892ab24$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $c060e96f0892ab24$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $c060e96f0892ab24$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $c060e96f0892ab24$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $c060e96f0892ab24$var$utf8Text(buf, i) {
    var total = $c060e96f0892ab24$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $c060e96f0892ab24$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $c060e96f0892ab24$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $c060e96f0892ab24$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function $c060e96f0892ab24$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function $c060e96f0892ab24$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $c060e96f0892ab24$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $c060e96f0892ab24$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

});

parcelRequire.register("b3ER6", function(module, exports) {
'use strict';

var $36zFS = parcelRequire("36zFS");
var $80cfaa9083a99513$var$_Object$setPrototypeO;
function $80cfaa9083a99513$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $6wOn5 = parcelRequire("6wOn5");
var $80cfaa9083a99513$var$kLastResolve = Symbol('lastResolve');
var $80cfaa9083a99513$var$kLastReject = Symbol('lastReject');
var $80cfaa9083a99513$var$kError = Symbol('error');
var $80cfaa9083a99513$var$kEnded = Symbol('ended');
var $80cfaa9083a99513$var$kLastPromise = Symbol('lastPromise');
var $80cfaa9083a99513$var$kHandlePromise = Symbol('handlePromise');
var $80cfaa9083a99513$var$kStream = Symbol('stream');
function $80cfaa9083a99513$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $80cfaa9083a99513$var$readAndResolve(iter) {
    var resolve = iter[$80cfaa9083a99513$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$80cfaa9083a99513$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$80cfaa9083a99513$var$kLastPromise] = null;
            iter[$80cfaa9083a99513$var$kLastResolve] = null;
            iter[$80cfaa9083a99513$var$kLastReject] = null;
            resolve($80cfaa9083a99513$var$createIterResult(data, false));
        }
    }
}
function $80cfaa9083a99513$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $36zFS.nextTick($80cfaa9083a99513$var$readAndResolve, iter);
}
function $80cfaa9083a99513$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$80cfaa9083a99513$var$kEnded]) {
                resolve($80cfaa9083a99513$var$createIterResult(undefined, true));
                return;
            }
            iter[$80cfaa9083a99513$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $80cfaa9083a99513$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $80cfaa9083a99513$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($80cfaa9083a99513$var$_Object$setPrototypeO = {
    get stream () {
        return this[$80cfaa9083a99513$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$80cfaa9083a99513$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$80cfaa9083a99513$var$kEnded]) return Promise.resolve($80cfaa9083a99513$var$createIterResult(undefined, true));
        if (this[$80cfaa9083a99513$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $36zFS.nextTick(function() {
                if (_this[$80cfaa9083a99513$var$kError]) reject(_this[$80cfaa9083a99513$var$kError]);
                else resolve($80cfaa9083a99513$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$80cfaa9083a99513$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($80cfaa9083a99513$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$80cfaa9083a99513$var$kStream].read();
            if (data !== null) return Promise.resolve($80cfaa9083a99513$var$createIterResult(data, false));
            promise = new Promise(this[$80cfaa9083a99513$var$kHandlePromise]);
        }
        this[$80cfaa9083a99513$var$kLastPromise] = promise;
        return promise;
    }
}, $80cfaa9083a99513$var$_defineProperty($80cfaa9083a99513$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $80cfaa9083a99513$var$_defineProperty($80cfaa9083a99513$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$80cfaa9083a99513$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($80cfaa9083a99513$var$createIterResult(undefined, true));
        });
    });
}), $80cfaa9083a99513$var$_Object$setPrototypeO), $80cfaa9083a99513$var$AsyncIteratorPrototype);
var $80cfaa9083a99513$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($80cfaa9083a99513$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $80cfaa9083a99513$var$_defineProperty(_Object$create, $80cfaa9083a99513$var$kStream, {
        value: stream,
        writable: true
    }), $80cfaa9083a99513$var$_defineProperty(_Object$create, $80cfaa9083a99513$var$kLastResolve, {
        value: null,
        writable: true
    }), $80cfaa9083a99513$var$_defineProperty(_Object$create, $80cfaa9083a99513$var$kLastReject, {
        value: null,
        writable: true
    }), $80cfaa9083a99513$var$_defineProperty(_Object$create, $80cfaa9083a99513$var$kError, {
        value: null,
        writable: true
    }), $80cfaa9083a99513$var$_defineProperty(_Object$create, $80cfaa9083a99513$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $80cfaa9083a99513$var$_defineProperty(_Object$create, $80cfaa9083a99513$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$80cfaa9083a99513$var$kStream].read();
            if (data) {
                iterator[$80cfaa9083a99513$var$kLastPromise] = null;
                iterator[$80cfaa9083a99513$var$kLastResolve] = null;
                iterator[$80cfaa9083a99513$var$kLastReject] = null;
                resolve($80cfaa9083a99513$var$createIterResult(data, false));
            } else {
                iterator[$80cfaa9083a99513$var$kLastResolve] = resolve;
                iterator[$80cfaa9083a99513$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$80cfaa9083a99513$var$kLastPromise] = null;
    $6wOn5(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[$80cfaa9083a99513$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$80cfaa9083a99513$var$kLastPromise] = null;
                iterator[$80cfaa9083a99513$var$kLastResolve] = null;
                iterator[$80cfaa9083a99513$var$kLastReject] = null;
                reject(err);
            }
            iterator[$80cfaa9083a99513$var$kError] = err;
            return;
        }
        var resolve = iterator[$80cfaa9083a99513$var$kLastResolve];
        if (resolve !== null) {
            iterator[$80cfaa9083a99513$var$kLastPromise] = null;
            iterator[$80cfaa9083a99513$var$kLastResolve] = null;
            iterator[$80cfaa9083a99513$var$kLastReject] = null;
            resolve($80cfaa9083a99513$var$createIterResult(undefined, true));
        }
        iterator[$80cfaa9083a99513$var$kEnded] = true;
    });
    stream.on('readable', $80cfaa9083a99513$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $80cfaa9083a99513$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("6wOn5", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var $1wnE4 = parcelRequire("1wnE4");
var $4c0ccdf18f670250$var$ERR_STREAM_PREMATURE_CLOSE = $1wnE4.codes.ERR_STREAM_PREMATURE_CLOSE;
function $4c0ccdf18f670250$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $4c0ccdf18f670250$var$noop() {}
function $4c0ccdf18f670250$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function $4c0ccdf18f670250$var$eos(stream, opts, callback) {
    if (typeof opts === 'function') return $4c0ccdf18f670250$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $4c0ccdf18f670250$var$once(callback || $4c0ccdf18f670250$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $4c0ccdf18f670250$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $4c0ccdf18f670250$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if ($4c0ccdf18f670250$var$isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = $4c0ccdf18f670250$var$eos;

});


parcelRequire.register("dBC93", function(module, exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

});


parcelRequire.register("fJLVb", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = $b7503b22f960d7be$var$Transform;

var $1wnE4 = parcelRequire("1wnE4");
var $b7503b22f960d7be$require$_require$codes = $1wnE4.codes;
var $b7503b22f960d7be$var$ERR_METHOD_NOT_IMPLEMENTED = $b7503b22f960d7be$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $b7503b22f960d7be$var$ERR_MULTIPLE_CALLBACK = $b7503b22f960d7be$require$_require$codes.ERR_MULTIPLE_CALLBACK, $b7503b22f960d7be$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $b7503b22f960d7be$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $b7503b22f960d7be$var$ERR_TRANSFORM_WITH_LENGTH_0 = $b7503b22f960d7be$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $3Sygc = parcelRequire("3Sygc");

(parcelRequire("baEok"))($b7503b22f960d7be$var$Transform, $3Sygc);
function $b7503b22f960d7be$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new $b7503b22f960d7be$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $b7503b22f960d7be$var$Transform(options) {
    if (!(this instanceof $b7503b22f960d7be$var$Transform)) return new $b7503b22f960d7be$var$Transform(options);
    $3Sygc.call(this, options);
    this._transformState = {
        afterTransform: $b7503b22f960d7be$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', $b7503b22f960d7be$var$prefinish);
}
function $b7503b22f960d7be$var$prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        $b7503b22f960d7be$var$done(_this, er, data);
    });
    else $b7503b22f960d7be$var$done(this, null, null);
}
$b7503b22f960d7be$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $3Sygc.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$b7503b22f960d7be$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $b7503b22f960d7be$var$ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
$b7503b22f960d7be$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$b7503b22f960d7be$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$b7503b22f960d7be$var$Transform.prototype._destroy = function(err, cb) {
    $3Sygc.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $b7503b22f960d7be$var$done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $b7503b22f960d7be$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $b7503b22f960d7be$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("7FJFn", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = $595fc91cd722c9fe$var$PassThrough;

var $fJLVb = parcelRequire("fJLVb");

(parcelRequire("baEok"))($595fc91cd722c9fe$var$PassThrough, $fJLVb);
function $595fc91cd722c9fe$var$PassThrough(options) {
    if (!(this instanceof $595fc91cd722c9fe$var$PassThrough)) return new $595fc91cd722c9fe$var$PassThrough(options);
    $fJLVb.call(this, options);
}
$595fc91cd722c9fe$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("kgCmy", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $ec130f4c973118e9$var$eos;
function $ec130f4c973118e9$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $1wnE4 = parcelRequire("1wnE4");
var $ec130f4c973118e9$require$_require$codes = $1wnE4.codes;
var $ec130f4c973118e9$var$ERR_MISSING_ARGS = $ec130f4c973118e9$require$_require$codes.ERR_MISSING_ARGS, $ec130f4c973118e9$var$ERR_STREAM_DESTROYED = $ec130f4c973118e9$require$_require$codes.ERR_STREAM_DESTROYED;
function $ec130f4c973118e9$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $ec130f4c973118e9$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}

function $ec130f4c973118e9$var$destroyer(stream, reading, writing, callback) {
    callback = $ec130f4c973118e9$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($ec130f4c973118e9$var$eos === undefined) $ec130f4c973118e9$var$eos = (parcelRequire("6wOn5"));
    $ec130f4c973118e9$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($ec130f4c973118e9$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $ec130f4c973118e9$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $ec130f4c973118e9$var$call(fn) {
    fn();
}
function $ec130f4c973118e9$var$pipe(from, to) {
    return from.pipe(to);
}
function $ec130f4c973118e9$var$popCallback(streams) {
    if (!streams.length) return $ec130f4c973118e9$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $ec130f4c973118e9$var$noop;
    return streams.pop();
}
function $ec130f4c973118e9$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $ec130f4c973118e9$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $ec130f4c973118e9$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $ec130f4c973118e9$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($ec130f4c973118e9$var$call);
            if (reading) return;
            destroys.forEach($ec130f4c973118e9$var$call);
            callback(error);
        });
    });
    return streams.reduce($ec130f4c973118e9$var$pipe);
}
module.exports = $ec130f4c973118e9$var$pipeline;

});




parcelRequire.register("iUB0B", function(module, exports) {
'use strict';

var $gGU47 = parcelRequire("gGU47");
var $dc4a2a1de747da16$require$Buffer = $gGU47.Buffer;

var $baEok = parcelRequire("baEok");

var $lfuKR = parcelRequire("lfuKR");
var $dc4a2a1de747da16$var$ARRAY16 = new Array(16);
var $dc4a2a1de747da16$var$zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $dc4a2a1de747da16$var$zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $dc4a2a1de747da16$var$sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $dc4a2a1de747da16$var$sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var $dc4a2a1de747da16$var$hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var $dc4a2a1de747da16$var$hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function $dc4a2a1de747da16$var$RIPEMD160() {
    $lfuKR.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
$baEok($dc4a2a1de747da16$var$RIPEMD160, $lfuKR);
$dc4a2a1de747da16$var$RIPEMD160.prototype._update = function() {
    var words = $dc4a2a1de747da16$var$ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = $dc4a2a1de747da16$var$fn1(al, bl, cl, dl, el, words[$dc4a2a1de747da16$var$zl[i]], $dc4a2a1de747da16$var$hl[0], $dc4a2a1de747da16$var$sl[i]);
            tr = $dc4a2a1de747da16$var$fn5(ar, br, cr, dr, er, words[$dc4a2a1de747da16$var$zr[i]], $dc4a2a1de747da16$var$hr[0], $dc4a2a1de747da16$var$sr[i]);
        } else if (i < 32) {
            tl = $dc4a2a1de747da16$var$fn2(al, bl, cl, dl, el, words[$dc4a2a1de747da16$var$zl[i]], $dc4a2a1de747da16$var$hl[1], $dc4a2a1de747da16$var$sl[i]);
            tr = $dc4a2a1de747da16$var$fn4(ar, br, cr, dr, er, words[$dc4a2a1de747da16$var$zr[i]], $dc4a2a1de747da16$var$hr[1], $dc4a2a1de747da16$var$sr[i]);
        } else if (i < 48) {
            tl = $dc4a2a1de747da16$var$fn3(al, bl, cl, dl, el, words[$dc4a2a1de747da16$var$zl[i]], $dc4a2a1de747da16$var$hl[2], $dc4a2a1de747da16$var$sl[i]);
            tr = $dc4a2a1de747da16$var$fn3(ar, br, cr, dr, er, words[$dc4a2a1de747da16$var$zr[i]], $dc4a2a1de747da16$var$hr[2], $dc4a2a1de747da16$var$sr[i]);
        } else if (i < 64) {
            tl = $dc4a2a1de747da16$var$fn4(al, bl, cl, dl, el, words[$dc4a2a1de747da16$var$zl[i]], $dc4a2a1de747da16$var$hl[3], $dc4a2a1de747da16$var$sl[i]);
            tr = $dc4a2a1de747da16$var$fn2(ar, br, cr, dr, er, words[$dc4a2a1de747da16$var$zr[i]], $dc4a2a1de747da16$var$hr[3], $dc4a2a1de747da16$var$sr[i]);
        } else {
            tl = $dc4a2a1de747da16$var$fn5(al, bl, cl, dl, el, words[$dc4a2a1de747da16$var$zl[i]], $dc4a2a1de747da16$var$hl[4], $dc4a2a1de747da16$var$sl[i]);
            tr = $dc4a2a1de747da16$var$fn1(ar, br, cr, dr, er, words[$dc4a2a1de747da16$var$zr[i]], $dc4a2a1de747da16$var$hr[4], $dc4a2a1de747da16$var$sr[i]);
        }
        al = el;
        el = dl;
        dl = $dc4a2a1de747da16$var$rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = $dc4a2a1de747da16$var$rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
$dc4a2a1de747da16$var$RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $dc4a2a1de747da16$require$Buffer.alloc ? $dc4a2a1de747da16$require$Buffer.alloc(20) : new $dc4a2a1de747da16$require$Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function $dc4a2a1de747da16$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $dc4a2a1de747da16$var$fn1(a, b, c, d, e, m, k, s) {
    return $dc4a2a1de747da16$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function $dc4a2a1de747da16$var$fn2(a, b, c, d, e, m, k, s) {
    return $dc4a2a1de747da16$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function $dc4a2a1de747da16$var$fn3(a, b, c, d, e, m, k, s) {
    return $dc4a2a1de747da16$var$rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function $dc4a2a1de747da16$var$fn4(a, b, c, d, e, m, k, s) {
    return $dc4a2a1de747da16$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function $dc4a2a1de747da16$var$fn5(a, b, c, d, e, m, k, s) {
    return $dc4a2a1de747da16$var$rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = $dc4a2a1de747da16$var$RIPEMD160;

});

parcelRequire.register("lCSWS", function(module, exports) {
var $fbe7c540cbaf973b$var$exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = $fbe7c540cbaf973b$var$exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};

$fbe7c540cbaf973b$var$exports.sha = (parcelRequire("aYpa7"));

$fbe7c540cbaf973b$var$exports.sha1 = (parcelRequire("jTOY2"));

$fbe7c540cbaf973b$var$exports.sha224 = (parcelRequire("an8Ie"));

$fbe7c540cbaf973b$var$exports.sha256 = (parcelRequire("03h9Z"));

$fbe7c540cbaf973b$var$exports.sha384 = (parcelRequire("8haIk"));

$fbe7c540cbaf973b$var$exports.sha512 = (parcelRequire("ddO08"));

});
parcelRequire.register("aYpa7", function(module, exports) {

var $baEok = parcelRequire("baEok");

var $4RhuZ = parcelRequire("4RhuZ");

var $8k9oS = parcelRequire("8k9oS");
var $7fd306ace8ab1c99$require$Buffer = $8k9oS.Buffer;
var $7fd306ace8ab1c99$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $7fd306ace8ab1c99$var$W = new Array(80);
function $7fd306ace8ab1c99$var$Sha() {
    this.init();
    this._w = $7fd306ace8ab1c99$var$W;
    $4RhuZ.call(this, 64, 56);
}
$baEok($7fd306ace8ab1c99$var$Sha, $4RhuZ);
$7fd306ace8ab1c99$var$Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $7fd306ace8ab1c99$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $7fd306ace8ab1c99$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $7fd306ace8ab1c99$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$7fd306ace8ab1c99$var$Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $7fd306ace8ab1c99$var$rotl5(a) + $7fd306ace8ab1c99$var$ft(s, b, c, d) + e + W[j] + $7fd306ace8ab1c99$var$K[s] | 0;
        e = d;
        d = c;
        c = $7fd306ace8ab1c99$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$7fd306ace8ab1c99$var$Sha.prototype._hash = function() {
    var H = $7fd306ace8ab1c99$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $7fd306ace8ab1c99$var$Sha;

});
parcelRequire.register("4RhuZ", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $3899af947224f4f6$require$Buffer = $8k9oS.Buffer;
// prototype class for hash functions
function $3899af947224f4f6$var$Hash(blockSize, finalSize) {
    this._block = $3899af947224f4f6$require$Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
$3899af947224f4f6$var$Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = $3899af947224f4f6$require$Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
$3899af947224f4f6$var$Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
$3899af947224f4f6$var$Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = $3899af947224f4f6$var$Hash;

});


parcelRequire.register("jTOY2", function(module, exports) {

var $baEok = parcelRequire("baEok");

var $4RhuZ = parcelRequire("4RhuZ");

var $8k9oS = parcelRequire("8k9oS");
var $e7cab06ffe950a50$require$Buffer = $8k9oS.Buffer;
var $e7cab06ffe950a50$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $e7cab06ffe950a50$var$W = new Array(80);
function $e7cab06ffe950a50$var$Sha1() {
    this.init();
    this._w = $e7cab06ffe950a50$var$W;
    $4RhuZ.call(this, 64, 56);
}
$baEok($e7cab06ffe950a50$var$Sha1, $4RhuZ);
$e7cab06ffe950a50$var$Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $e7cab06ffe950a50$var$rotl1(num) {
    return num << 1 | num >>> 31;
}
function $e7cab06ffe950a50$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $e7cab06ffe950a50$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $e7cab06ffe950a50$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$e7cab06ffe950a50$var$Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = $e7cab06ffe950a50$var$rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $e7cab06ffe950a50$var$rotl5(a) + $e7cab06ffe950a50$var$ft(s, b, c, d) + e + W[j] + $e7cab06ffe950a50$var$K[s] | 0;
        e = d;
        d = c;
        c = $e7cab06ffe950a50$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$e7cab06ffe950a50$var$Sha1.prototype._hash = function() {
    var H = $e7cab06ffe950a50$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $e7cab06ffe950a50$var$Sha1;

});

parcelRequire.register("an8Ie", function(module, exports) {

var $baEok = parcelRequire("baEok");

var $03h9Z = parcelRequire("03h9Z");

var $4RhuZ = parcelRequire("4RhuZ");

var $8k9oS = parcelRequire("8k9oS");
var $78d2cf75cade53ef$require$Buffer = $8k9oS.Buffer;
var $78d2cf75cade53ef$var$W = new Array(64);
function $78d2cf75cade53ef$var$Sha224() {
    this.init();
    this._w = $78d2cf75cade53ef$var$W // new Array(64)
    ;
    $4RhuZ.call(this, 64, 56);
}
$baEok($78d2cf75cade53ef$var$Sha224, $03h9Z);
$78d2cf75cade53ef$var$Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
$78d2cf75cade53ef$var$Sha224.prototype._hash = function() {
    var H = $78d2cf75cade53ef$require$Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = $78d2cf75cade53ef$var$Sha224;

});
parcelRequire.register("03h9Z", function(module, exports) {

var $baEok = parcelRequire("baEok");

var $4RhuZ = parcelRequire("4RhuZ");

var $8k9oS = parcelRequire("8k9oS");
var $009d9793dd6e7739$require$Buffer = $8k9oS.Buffer;
var $009d9793dd6e7739$var$K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var $009d9793dd6e7739$var$W = new Array(64);
function $009d9793dd6e7739$var$Sha256() {
    this.init();
    this._w = $009d9793dd6e7739$var$W // new Array(64)
    ;
    $4RhuZ.call(this, 64, 56);
}
$baEok($009d9793dd6e7739$var$Sha256, $4RhuZ);
$009d9793dd6e7739$var$Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function $009d9793dd6e7739$var$ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $009d9793dd6e7739$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $009d9793dd6e7739$var$sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function $009d9793dd6e7739$var$sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function $009d9793dd6e7739$var$gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function $009d9793dd6e7739$var$gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
$009d9793dd6e7739$var$Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = $009d9793dd6e7739$var$gamma1(W[i - 2]) + W[i - 7] + $009d9793dd6e7739$var$gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + $009d9793dd6e7739$var$sigma1(e) + $009d9793dd6e7739$var$ch(e, f, g) + $009d9793dd6e7739$var$K[j] + W[j] | 0;
        var T2 = $009d9793dd6e7739$var$sigma0(a) + $009d9793dd6e7739$var$maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
$009d9793dd6e7739$var$Sha256.prototype._hash = function() {
    var H = $009d9793dd6e7739$require$Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = $009d9793dd6e7739$var$Sha256;

});


parcelRequire.register("8haIk", function(module, exports) {

var $baEok = parcelRequire("baEok");

var $ddO08 = parcelRequire("ddO08");

var $4RhuZ = parcelRequire("4RhuZ");

var $8k9oS = parcelRequire("8k9oS");
var $606838daa2dbd257$require$Buffer = $8k9oS.Buffer;
var $606838daa2dbd257$var$W = new Array(160);
function $606838daa2dbd257$var$Sha384() {
    this.init();
    this._w = $606838daa2dbd257$var$W;
    $4RhuZ.call(this, 128, 112);
}
$baEok($606838daa2dbd257$var$Sha384, $ddO08);
$606838daa2dbd257$var$Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
$606838daa2dbd257$var$Sha384.prototype._hash = function() {
    var H = $606838daa2dbd257$require$Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = $606838daa2dbd257$var$Sha384;

});
parcelRequire.register("ddO08", function(module, exports) {

var $baEok = parcelRequire("baEok");

var $4RhuZ = parcelRequire("4RhuZ");

var $8k9oS = parcelRequire("8k9oS");
var $9a03467784f6b5d2$require$Buffer = $8k9oS.Buffer;
var $9a03467784f6b5d2$var$K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var $9a03467784f6b5d2$var$W = new Array(160);
function $9a03467784f6b5d2$var$Sha512() {
    this.init();
    this._w = $9a03467784f6b5d2$var$W;
    $4RhuZ.call(this, 128, 112);
}
$baEok($9a03467784f6b5d2$var$Sha512, $4RhuZ);
$9a03467784f6b5d2$var$Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function $9a03467784f6b5d2$var$Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $9a03467784f6b5d2$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $9a03467784f6b5d2$var$sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function $9a03467784f6b5d2$var$sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function $9a03467784f6b5d2$var$Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function $9a03467784f6b5d2$var$Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function $9a03467784f6b5d2$var$Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function $9a03467784f6b5d2$var$Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function $9a03467784f6b5d2$var$getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
$9a03467784f6b5d2$var$Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = $9a03467784f6b5d2$var$Gamma0(xh, xl);
        var gamma0l = $9a03467784f6b5d2$var$Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = $9a03467784f6b5d2$var$Gamma1(xh, xl);
        var gamma1l = $9a03467784f6b5d2$var$Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + $9a03467784f6b5d2$var$getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + $9a03467784f6b5d2$var$getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + $9a03467784f6b5d2$var$getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = $9a03467784f6b5d2$var$maj(ah, bh, ch);
        var majl = $9a03467784f6b5d2$var$maj(al, bl, cl);
        var sigma0h = $9a03467784f6b5d2$var$sigma0(ah, al);
        var sigma0l = $9a03467784f6b5d2$var$sigma0(al, ah);
        var sigma1h = $9a03467784f6b5d2$var$sigma1(eh, el);
        var sigma1l = $9a03467784f6b5d2$var$sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = $9a03467784f6b5d2$var$K[j];
        var Kil = $9a03467784f6b5d2$var$K[j + 1];
        var chh = $9a03467784f6b5d2$var$Ch(eh, fh, gh);
        var chl = $9a03467784f6b5d2$var$Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + $9a03467784f6b5d2$var$getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + $9a03467784f6b5d2$var$getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + $9a03467784f6b5d2$var$getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + $9a03467784f6b5d2$var$getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + $9a03467784f6b5d2$var$getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + $9a03467784f6b5d2$var$getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + $9a03467784f6b5d2$var$getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + $9a03467784f6b5d2$var$getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + $9a03467784f6b5d2$var$getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + $9a03467784f6b5d2$var$getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + $9a03467784f6b5d2$var$getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + $9a03467784f6b5d2$var$getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + $9a03467784f6b5d2$var$getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + $9a03467784f6b5d2$var$getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + $9a03467784f6b5d2$var$getCarry(this._hl, hl) | 0;
};
$9a03467784f6b5d2$var$Sha512.prototype._hash = function() {
    var H = $9a03467784f6b5d2$require$Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = $9a03467784f6b5d2$var$Sha512;

});



parcelRequire.register("h2SJW", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $c68d15c64a810cf0$require$Buffer = $8k9oS.Buffer;

var $6Cyzi = parcelRequire("6Cyzi");
var $c68d15c64a810cf0$require$Transform = $6Cyzi.Transform;

var $gw1E8 = parcelRequire("gw1E8");
var $c68d15c64a810cf0$require$StringDecoder = $gw1E8.StringDecoder;

var $baEok = parcelRequire("baEok");
function $c68d15c64a810cf0$var$CipherBase(hashMode) {
    $c68d15c64a810cf0$require$Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
$baEok($c68d15c64a810cf0$var$CipherBase, $c68d15c64a810cf0$require$Transform);
$c68d15c64a810cf0$var$CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === 'string') data = $c68d15c64a810cf0$require$Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
$c68d15c64a810cf0$var$CipherBase.prototype.setAutoPadding = function() {};
$c68d15c64a810cf0$var$CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
$c68d15c64a810cf0$var$CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
$c68d15c64a810cf0$var$CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
$c68d15c64a810cf0$var$CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
$c68d15c64a810cf0$var$CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
$c68d15c64a810cf0$var$CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || $c68d15c64a810cf0$require$Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
$c68d15c64a810cf0$var$CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new $c68d15c64a810cf0$require$StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error('can\'t switch encodings');
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = $c68d15c64a810cf0$var$CipherBase;

});
parcelRequire.register("6Cyzi", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = $4d211b3846b2a234$var$Stream;

var $8GOdr = parcelRequire("8GOdr");
var $4d211b3846b2a234$require$EE = $8GOdr.EventEmitter;

var $baEok = parcelRequire("baEok");
$baEok($4d211b3846b2a234$var$Stream, $4d211b3846b2a234$require$EE);

$4d211b3846b2a234$var$Stream.Readable = (parcelRequire("guKjM"));

$4d211b3846b2a234$var$Stream.Writable = (parcelRequire("gmw45"));

$4d211b3846b2a234$var$Stream.Duplex = (parcelRequire("3Sygc"));

$4d211b3846b2a234$var$Stream.Transform = (parcelRequire("fJLVb"));

$4d211b3846b2a234$var$Stream.PassThrough = (parcelRequire("7FJFn"));

$4d211b3846b2a234$var$Stream.finished = (parcelRequire("6wOn5"));

$4d211b3846b2a234$var$Stream.pipeline = (parcelRequire("kgCmy"));
// Backwards-compat with node 0.4.x
$4d211b3846b2a234$var$Stream.Stream = $4d211b3846b2a234$var$Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function $4d211b3846b2a234$var$Stream() {
    $4d211b3846b2a234$require$EE.call(this);
}
$4d211b3846b2a234$var$Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on('data', ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on('drain', ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if ($4d211b3846b2a234$require$EE.listenerCount(this, 'error') === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

});



parcelRequire.register("dA0oy", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $dnctp = parcelRequire("dnctp");

var $h2SJW = parcelRequire("h2SJW");

var $8k9oS = parcelRequire("8k9oS");
var $9e2ef199a19582f9$require$Buffer = $8k9oS.Buffer;

var $2BKTG = parcelRequire("2BKTG");

var $iUB0B = parcelRequire("iUB0B");

var $lCSWS = parcelRequire("lCSWS");
var $9e2ef199a19582f9$var$ZEROS = $9e2ef199a19582f9$require$Buffer.alloc(128);
function $9e2ef199a19582f9$var$Hmac(alg, key) {
    $h2SJW.call(this, 'digest');
    if (typeof key === 'string') key = $9e2ef199a19582f9$require$Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new $iUB0B() : $lCSWS(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = $9e2ef199a19582f9$require$Buffer.concat([
        key,
        $9e2ef199a19582f9$var$ZEROS
    ], blocksize);
    var ipad = this._ipad = $9e2ef199a19582f9$require$Buffer.allocUnsafe(blocksize);
    var opad = this._opad = $9e2ef199a19582f9$require$Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === 'rmd160' ? new $iUB0B() : $lCSWS(alg);
    this._hash.update(ipad);
}
$baEok($9e2ef199a19582f9$var$Hmac, $h2SJW);
$9e2ef199a19582f9$var$Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
$9e2ef199a19582f9$var$Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new $iUB0B() : $lCSWS(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $9e2ef199a19582f9$var$Hmac('rmd160', key);
    if (alg === 'md5') return new $dnctp($2BKTG, key);
    return new $9e2ef199a19582f9$var$Hmac(alg, key);
};

});
parcelRequire.register("dnctp", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $8k9oS = parcelRequire("8k9oS");
var $9bc71950dfcbbf7e$require$Buffer = $8k9oS.Buffer;

var $h2SJW = parcelRequire("h2SJW");
var $9bc71950dfcbbf7e$var$ZEROS = $9bc71950dfcbbf7e$require$Buffer.alloc(128);
var $9bc71950dfcbbf7e$var$blocksize = 64;
function $9bc71950dfcbbf7e$var$Hmac(alg, key) {
    $h2SJW.call(this, 'digest');
    if (typeof key === 'string') key = $9bc71950dfcbbf7e$require$Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > $9bc71950dfcbbf7e$var$blocksize) key = alg(key);
    else if (key.length < $9bc71950dfcbbf7e$var$blocksize) key = $9bc71950dfcbbf7e$require$Buffer.concat([
        key,
        $9bc71950dfcbbf7e$var$ZEROS
    ], $9bc71950dfcbbf7e$var$blocksize);
    var ipad = this._ipad = $9bc71950dfcbbf7e$require$Buffer.allocUnsafe($9bc71950dfcbbf7e$var$blocksize);
    var opad = this._opad = $9bc71950dfcbbf7e$require$Buffer.allocUnsafe($9bc71950dfcbbf7e$var$blocksize);
    for(var i = 0; i < $9bc71950dfcbbf7e$var$blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
$baEok($9bc71950dfcbbf7e$var$Hmac, $h2SJW);
$9bc71950dfcbbf7e$var$Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
$9bc71950dfcbbf7e$var$Hmac.prototype._final = function() {
    var h = this._alg($9bc71950dfcbbf7e$require$Buffer.concat(this._hash));
    return this._alg($9bc71950dfcbbf7e$require$Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = $9bc71950dfcbbf7e$var$Hmac;

});

parcelRequire.register("2BKTG", function(module, exports) {

var $2MW9T = parcelRequire("2MW9T");
module.exports = function(buffer) {
    return new $2MW9T().update(buffer).digest();
};

});


parcelRequire.register("df5hN", function(module, exports) {

module.exports = (parcelRequire("bPHlq"));

});
parcelRequire.register("bPHlq", function(module, exports) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

});


parcelRequire.register("6Cw3h", function(module, exports) {

$parcel$export(module.exports, "pbkdf2", function () { return $4d1f2780af6d8050$export$448fa22aedc9dbca; }, function (v) { return $4d1f2780af6d8050$export$448fa22aedc9dbca = v; });
$parcel$export(module.exports, "pbkdf2Sync", function () { return $4d1f2780af6d8050$export$b80c7ba289c8fa56; }, function (v) { return $4d1f2780af6d8050$export$b80c7ba289c8fa56 = v; });
var $4d1f2780af6d8050$export$448fa22aedc9dbca;
var $4d1f2780af6d8050$export$b80c7ba289c8fa56;

$4d1f2780af6d8050$export$448fa22aedc9dbca = (parcelRequire("57tM7"));

$4d1f2780af6d8050$export$b80c7ba289c8fa56 = (parcelRequire("91Pep"));

});
parcelRequire.register("57tM7", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $3ba4b3e91e43c169$require$Buffer = $8k9oS.Buffer;

var $g6sS6 = parcelRequire("g6sS6");

var $bU7tN = parcelRequire("bU7tN");

var $91Pep = parcelRequire("91Pep");

var $gUf7P = parcelRequire("gUf7P");
var $3ba4b3e91e43c169$var$ZERO_BUF;
var $3ba4b3e91e43c169$var$subtle = $parcel$global.crypto && $parcel$global.crypto.subtle;
var $3ba4b3e91e43c169$var$toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var $3ba4b3e91e43c169$var$checks = [];
function $3ba4b3e91e43c169$var$checkNative(algo) {
    if ($parcel$global.process && !$parcel$global.process.browser) return Promise.resolve(false);
    if (!$3ba4b3e91e43c169$var$subtle || !$3ba4b3e91e43c169$var$subtle.importKey || !$3ba4b3e91e43c169$var$subtle.deriveBits) return Promise.resolve(false);
    if ($3ba4b3e91e43c169$var$checks[algo] !== undefined) return $3ba4b3e91e43c169$var$checks[algo];
    $3ba4b3e91e43c169$var$ZERO_BUF = $3ba4b3e91e43c169$var$ZERO_BUF || $3ba4b3e91e43c169$require$Buffer.alloc(8);
    var prom = $3ba4b3e91e43c169$var$browserPbkdf2($3ba4b3e91e43c169$var$ZERO_BUF, $3ba4b3e91e43c169$var$ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    $3ba4b3e91e43c169$var$checks[algo] = prom;
    return prom;
}
var $3ba4b3e91e43c169$var$nextTick;
function $3ba4b3e91e43c169$var$getNextTick() {
    if ($3ba4b3e91e43c169$var$nextTick) return $3ba4b3e91e43c169$var$nextTick;
    if ($parcel$global.process && $parcel$global.process.nextTick) $3ba4b3e91e43c169$var$nextTick = $parcel$global.process.nextTick;
    else if ($parcel$global.queueMicrotask) $3ba4b3e91e43c169$var$nextTick = $parcel$global.queueMicrotask;
    else if ($parcel$global.setImmediate) $3ba4b3e91e43c169$var$nextTick = $parcel$global.setImmediate;
    else $3ba4b3e91e43c169$var$nextTick = $parcel$global.setTimeout;
    return $3ba4b3e91e43c169$var$nextTick;
}
function $3ba4b3e91e43c169$var$browserPbkdf2(password, salt, iterations, length, algo) {
    return $3ba4b3e91e43c169$var$subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return $3ba4b3e91e43c169$var$subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return $3ba4b3e91e43c169$require$Buffer.from(res);
    });
}
function $3ba4b3e91e43c169$var$resolvePromise(promise, callback) {
    promise.then(function(out) {
        $3ba4b3e91e43c169$var$getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        $3ba4b3e91e43c169$var$getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = $3ba4b3e91e43c169$var$toBrowser[digest.toLowerCase()];
    if (!algo || typeof $parcel$global.Promise !== 'function') {
        $3ba4b3e91e43c169$var$getNextTick()(function() {
            var out;
            try {
                out = $91Pep(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    $g6sS6(iterations, keylen);
    password = $gUf7P(password, $bU7tN, 'Password');
    salt = $gUf7P(salt, $bU7tN, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    $3ba4b3e91e43c169$var$resolvePromise($3ba4b3e91e43c169$var$checkNative(algo).then(function(resp) {
        if (resp) return $3ba4b3e91e43c169$var$browserPbkdf2(password, salt, iterations, keylen, algo);
        return $91Pep(password, salt, iterations, keylen, digest);
    }), callback);
};

});
parcelRequire.register("g6sS6", function(module, exports) {
var $bb939a2fd115074e$var$MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > $bb939a2fd115074e$var$MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

});

parcelRequire.register("bU7tN", function(module, exports) {

var $36zFS = parcelRequire("36zFS");
var $8aaab9f5028848fa$var$defaultEncoding;
/* istanbul ignore next */ if ($parcel$global.process && $parcel$global.process.browser) $8aaab9f5028848fa$var$defaultEncoding = 'utf-8';
else if ($parcel$global.process && $parcel$global.process.version) {
    var $8aaab9f5028848fa$var$pVersionMajor = parseInt($36zFS.version.split('.')[0].slice(1), 10);
    $8aaab9f5028848fa$var$defaultEncoding = $8aaab9f5028848fa$var$pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else $8aaab9f5028848fa$var$defaultEncoding = 'utf-8';
module.exports = $8aaab9f5028848fa$var$defaultEncoding;

});

parcelRequire.register("91Pep", function(module, exports) {

var $2BKTG = parcelRequire("2BKTG");

var $iUB0B = parcelRequire("iUB0B");

var $lCSWS = parcelRequire("lCSWS");

var $8k9oS = parcelRequire("8k9oS");
var $692bf2894320f75f$require$Buffer = $8k9oS.Buffer;

var $g6sS6 = parcelRequire("g6sS6");

var $bU7tN = parcelRequire("bU7tN");

var $gUf7P = parcelRequire("gUf7P");
var $692bf2894320f75f$var$ZEROS = $692bf2894320f75f$require$Buffer.alloc(128);
var $692bf2894320f75f$var$sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function $692bf2894320f75f$var$Hmac(alg, key, saltLen) {
    var hash = $692bf2894320f75f$var$getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = $692bf2894320f75f$require$Buffer.concat([
        key,
        $692bf2894320f75f$var$ZEROS
    ], blocksize);
    var ipad = $692bf2894320f75f$require$Buffer.allocUnsafe(blocksize + $692bf2894320f75f$var$sizes[alg]);
    var opad = $692bf2894320f75f$require$Buffer.allocUnsafe(blocksize + $692bf2894320f75f$var$sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    var ipad1 = $692bf2894320f75f$require$Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = $692bf2894320f75f$var$sizes[alg];
}
$692bf2894320f75f$var$Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function $692bf2894320f75f$var$getDigest(alg) {
    function shaFunc(data) {
        return $lCSWS(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new $iUB0B().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return $2BKTG;
    return shaFunc;
}
function $692bf2894320f75f$var$pbkdf2(password, salt, iterations, keylen, digest) {
    $g6sS6(iterations, keylen);
    password = $gUf7P(password, $bU7tN, 'Password');
    salt = $gUf7P(salt, $bU7tN, 'Salt');
    digest = digest || 'sha1';
    var hmac = new $692bf2894320f75f$var$Hmac(digest, password, salt.length);
    var DK = $692bf2894320f75f$require$Buffer.allocUnsafe(keylen);
    var block1 = $692bf2894320f75f$require$Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = $692bf2894320f75f$var$sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = $692bf2894320f75f$var$pbkdf2;

});
parcelRequire.register("gUf7P", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $c4ed9bdb322f1e7a$require$Buffer = $8k9oS.Buffer;
module.exports = function(thing, encoding, name) {
    if ($c4ed9bdb322f1e7a$require$Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return $c4ed9bdb322f1e7a$require$Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return $c4ed9bdb322f1e7a$require$Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

});




parcelRequire.register("c7DQb", function(module, exports) {

$parcel$export(module.exports, "createCipher", function () { return $8d350b0818699abf$export$bdd223f16383713e; }, function (v) { return $8d350b0818699abf$export$bdd223f16383713e = v; });
$parcel$export(module.exports, "Cipher", function () { return $8d350b0818699abf$export$26e5786e8ac8e530; }, function (v) { return $8d350b0818699abf$export$26e5786e8ac8e530 = v; });
$parcel$export(module.exports, "createCipheriv", function () { return $8d350b0818699abf$export$2f64596b8cbf08b4; }, function (v) { return $8d350b0818699abf$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "Cipheriv", function () { return $8d350b0818699abf$export$20533d26f07f1ee0; }, function (v) { return $8d350b0818699abf$export$20533d26f07f1ee0 = v; });
$parcel$export(module.exports, "createDecipher", function () { return $8d350b0818699abf$export$12ada9414fbc594c; }, function (v) { return $8d350b0818699abf$export$12ada9414fbc594c = v; });
$parcel$export(module.exports, "Decipher", function () { return $8d350b0818699abf$export$2ce6d8d0e8b04e1a; }, function (v) { return $8d350b0818699abf$export$2ce6d8d0e8b04e1a = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $8d350b0818699abf$export$36b6d6ef312eab39; }, function (v) { return $8d350b0818699abf$export$36b6d6ef312eab39 = v; });
$parcel$export(module.exports, "Decipheriv", function () { return $8d350b0818699abf$export$f5e7e39d57cd9700; }, function (v) { return $8d350b0818699abf$export$f5e7e39d57cd9700 = v; });
$parcel$export(module.exports, "listCiphers", function () { return $8d350b0818699abf$export$dedd8dc3dc62b370; }, function (v) { return $8d350b0818699abf$export$dedd8dc3dc62b370 = v; });
$parcel$export(module.exports, "getCiphers", function () { return $8d350b0818699abf$export$58a258485f1e49f6; }, function (v) { return $8d350b0818699abf$export$58a258485f1e49f6 = v; });
var $8d350b0818699abf$export$bdd223f16383713e;
var $8d350b0818699abf$export$26e5786e8ac8e530;
var $8d350b0818699abf$export$2f64596b8cbf08b4;
var $8d350b0818699abf$export$20533d26f07f1ee0;
var $8d350b0818699abf$export$12ada9414fbc594c;
var $8d350b0818699abf$export$2ce6d8d0e8b04e1a;
var $8d350b0818699abf$export$36b6d6ef312eab39;
var $8d350b0818699abf$export$f5e7e39d57cd9700;
var $8d350b0818699abf$export$dedd8dc3dc62b370;
var $8d350b0818699abf$export$58a258485f1e49f6;

var $5sZHC = parcelRequire("5sZHC");

var $jEWuG = parcelRequire("jEWuG");

var $1OG5o = parcelRequire("1OG5o");

var $cUscF = parcelRequire("cUscF");

var $l5861 = parcelRequire("l5861");
function $8d350b0818699abf$var$createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($1OG5o[suite]) {
        keyLen = $1OG5o[suite].key;
        ivLen = $1OG5o[suite].iv;
    } else if ($cUscF[suite]) {
        keyLen = $cUscF[suite].key * 8;
        ivLen = $cUscF[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $l5861(password, false, keyLen, ivLen);
    return $8d350b0818699abf$var$createCipheriv(suite, keys.key, keys.iv);
}
function $8d350b0818699abf$var$createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($1OG5o[suite]) {
        keyLen = $1OG5o[suite].key;
        ivLen = $1OG5o[suite].iv;
    } else if ($cUscF[suite]) {
        keyLen = $cUscF[suite].key * 8;
        ivLen = $cUscF[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $l5861(password, false, keyLen, ivLen);
    return $8d350b0818699abf$var$createDecipheriv(suite, keys.key, keys.iv);
}
function $8d350b0818699abf$var$createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($1OG5o[suite]) return $jEWuG.createCipheriv(suite, key, iv);
    if ($cUscF[suite]) return new $5sZHC({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function $8d350b0818699abf$var$createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($1OG5o[suite]) return $jEWuG.createDecipheriv(suite, key, iv);
    if ($cUscF[suite]) return new $5sZHC({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function $8d350b0818699abf$var$getCiphers() {
    return Object.keys($cUscF).concat($jEWuG.getCiphers());
}
$8d350b0818699abf$export$bdd223f16383713e = $8d350b0818699abf$export$26e5786e8ac8e530 = $8d350b0818699abf$var$createCipher;
$8d350b0818699abf$export$2f64596b8cbf08b4 = $8d350b0818699abf$export$20533d26f07f1ee0 = $8d350b0818699abf$var$createCipheriv;
$8d350b0818699abf$export$12ada9414fbc594c = $8d350b0818699abf$export$2ce6d8d0e8b04e1a = $8d350b0818699abf$var$createDecipher;
$8d350b0818699abf$export$36b6d6ef312eab39 = $8d350b0818699abf$export$f5e7e39d57cd9700 = $8d350b0818699abf$var$createDecipheriv;
$8d350b0818699abf$export$dedd8dc3dc62b370 = $8d350b0818699abf$export$58a258485f1e49f6 = $8d350b0818699abf$var$getCiphers;

});
parcelRequire.register("5sZHC", function(module, exports) {

var $h2SJW = parcelRequire("h2SJW");

var $eIsWz = parcelRequire("eIsWz");

var $baEok = parcelRequire("baEok");

var $8k9oS = parcelRequire("8k9oS");
var $3faf6e1ee69b4f9c$require$Buffer = $8k9oS.Buffer;
var $3faf6e1ee69b4f9c$var$modes = {
    'des-ede3-cbc': $eIsWz.CBC.instantiate($eIsWz.EDE),
    'des-ede3': $eIsWz.EDE,
    'des-ede-cbc': $eIsWz.CBC.instantiate($eIsWz.EDE),
    'des-ede': $eIsWz.EDE,
    'des-cbc': $eIsWz.CBC.instantiate($eIsWz.DES),
    'des-ecb': $eIsWz.DES
};
$3faf6e1ee69b4f9c$var$modes.des = $3faf6e1ee69b4f9c$var$modes['des-cbc'];
$3faf6e1ee69b4f9c$var$modes.des3 = $3faf6e1ee69b4f9c$var$modes['des-ede3-cbc'];
module.exports = $3faf6e1ee69b4f9c$var$DES;
$baEok($3faf6e1ee69b4f9c$var$DES, $h2SJW);
function $3faf6e1ee69b4f9c$var$DES(opts) {
    $h2SJW.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = $3faf6e1ee69b4f9c$var$modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!$3faf6e1ee69b4f9c$require$Buffer.isBuffer(key)) key = $3faf6e1ee69b4f9c$require$Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = $3faf6e1ee69b4f9c$require$Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!$3faf6e1ee69b4f9c$require$Buffer.isBuffer(iv)) iv = $3faf6e1ee69b4f9c$require$Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
$3faf6e1ee69b4f9c$var$DES.prototype._update = function(data) {
    return $3faf6e1ee69b4f9c$require$Buffer.from(this._des.update(data));
};
$3faf6e1ee69b4f9c$var$DES.prototype._final = function() {
    return $3faf6e1ee69b4f9c$require$Buffer.from(this._des.final());
};

});
parcelRequire.register("eIsWz", function(module, exports) {

$parcel$export(module.exports, "DES", function () { return $ab6ba05a929a9536$export$cc8859615686b300; }, function (v) { return $ab6ba05a929a9536$export$cc8859615686b300 = v; });
$parcel$export(module.exports, "CBC", function () { return $ab6ba05a929a9536$export$8ad3f227af08fcc5; }, function (v) { return $ab6ba05a929a9536$export$8ad3f227af08fcc5 = v; });
$parcel$export(module.exports, "EDE", function () { return $ab6ba05a929a9536$export$947646e34766044f; }, function (v) { return $ab6ba05a929a9536$export$947646e34766044f = v; });
var $ab6ba05a929a9536$export$eab97d15b1788b8d;
var $ab6ba05a929a9536$export$26e5786e8ac8e530;
var $ab6ba05a929a9536$export$cc8859615686b300;
var $ab6ba05a929a9536$export$8ad3f227af08fcc5;
var $ab6ba05a929a9536$export$947646e34766044f;
'use strict';

$ab6ba05a929a9536$export$eab97d15b1788b8d = (parcelRequire("boATU"));

$ab6ba05a929a9536$export$26e5786e8ac8e530 = (parcelRequire("1XNu1"));

$ab6ba05a929a9536$export$cc8859615686b300 = (parcelRequire("fILu8"));

$ab6ba05a929a9536$export$8ad3f227af08fcc5 = (parcelRequire("WHnax"));

$ab6ba05a929a9536$export$947646e34766044f = (parcelRequire("6dLk9"));

});
parcelRequire.register("boATU", function(module, exports) {

$parcel$export(module.exports, "readUInt32BE", function () { return $84be8f4e49b85c13$export$cfaef8ed399428b0; }, function (v) { return $84be8f4e49b85c13$export$cfaef8ed399428b0 = v; });
$parcel$export(module.exports, "writeUInt32BE", function () { return $84be8f4e49b85c13$export$a80c7deaea7cbd80; }, function (v) { return $84be8f4e49b85c13$export$a80c7deaea7cbd80 = v; });
$parcel$export(module.exports, "ip", function () { return $84be8f4e49b85c13$export$ed7577ae6e1cd0ef; }, function (v) { return $84be8f4e49b85c13$export$ed7577ae6e1cd0ef = v; });
$parcel$export(module.exports, "rip", function () { return $84be8f4e49b85c13$export$5dcbef3aa594f567; }, function (v) { return $84be8f4e49b85c13$export$5dcbef3aa594f567 = v; });
$parcel$export(module.exports, "pc1", function () { return $84be8f4e49b85c13$export$5bc8001ca71ed9c5; }, function (v) { return $84be8f4e49b85c13$export$5bc8001ca71ed9c5 = v; });
$parcel$export(module.exports, "r28shl", function () { return $84be8f4e49b85c13$export$3e714e2c5d5d8cb2; }, function (v) { return $84be8f4e49b85c13$export$3e714e2c5d5d8cb2 = v; });
$parcel$export(module.exports, "pc2", function () { return $84be8f4e49b85c13$export$94c3e544fd062b7f; }, function (v) { return $84be8f4e49b85c13$export$94c3e544fd062b7f = v; });
$parcel$export(module.exports, "expand", function () { return $84be8f4e49b85c13$export$9f77e0932fb78f72; }, function (v) { return $84be8f4e49b85c13$export$9f77e0932fb78f72 = v; });
$parcel$export(module.exports, "substitute", function () { return $84be8f4e49b85c13$export$d865ce2836f5927f; }, function (v) { return $84be8f4e49b85c13$export$d865ce2836f5927f = v; });
$parcel$export(module.exports, "permute", function () { return $84be8f4e49b85c13$export$95e62ad65da8b7d2; }, function (v) { return $84be8f4e49b85c13$export$95e62ad65da8b7d2 = v; });
$parcel$export(module.exports, "padSplit", function () { return $84be8f4e49b85c13$export$209139ff098c441a; }, function (v) { return $84be8f4e49b85c13$export$209139ff098c441a = v; });
var $84be8f4e49b85c13$export$cfaef8ed399428b0;
var $84be8f4e49b85c13$export$a80c7deaea7cbd80;
var $84be8f4e49b85c13$export$ed7577ae6e1cd0ef;
var $84be8f4e49b85c13$export$5dcbef3aa594f567;
var $84be8f4e49b85c13$export$5bc8001ca71ed9c5;
var $84be8f4e49b85c13$export$3e714e2c5d5d8cb2;
var $84be8f4e49b85c13$export$94c3e544fd062b7f;
var $84be8f4e49b85c13$export$9f77e0932fb78f72;
var $84be8f4e49b85c13$export$d865ce2836f5927f;
var $84be8f4e49b85c13$export$95e62ad65da8b7d2;
var $84be8f4e49b85c13$export$209139ff098c441a;
'use strict';
$84be8f4e49b85c13$export$cfaef8ed399428b0 = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
$84be8f4e49b85c13$export$a80c7deaea7cbd80 = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 0xff;
    bytes[2 + off] = value >>> 8 & 0xff;
    bytes[3 + off] = value & 0xff;
};
$84be8f4e49b85c13$export$ed7577ae6e1cd0ef = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$84be8f4e49b85c13$export$5dcbef3aa594f567 = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$84be8f4e49b85c13$export$5bc8001ca71ed9c5 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$84be8f4e49b85c13$export$3e714e2c5d5d8cb2 = function r28shl(num, shift) {
    return num << shift & 0xfffffff | num >>> 28 - shift;
};
var $84be8f4e49b85c13$var$pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
$84be8f4e49b85c13$export$94c3e544fd062b7f = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = $84be8f4e49b85c13$var$pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> $84be8f4e49b85c13$var$pc2table[i] & 0x1;
    }
    for(var i = len; i < $84be8f4e49b85c13$var$pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> $84be8f4e49b85c13$var$pc2table[i] & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$84be8f4e49b85c13$export$9f77e0932fb78f72 = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 0x3f;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 0x3f;
        outR <<= 6;
    }
    outR |= (r & 0x1f) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var $84be8f4e49b85c13$var$sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
$84be8f4e49b85c13$export$d865ce2836f5927f = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = $84be8f4e49b85c13$var$sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = $84be8f4e49b85c13$var$sTable[256 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var $84be8f4e49b85c13$var$permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
$84be8f4e49b85c13$export$95e62ad65da8b7d2 = function permute(num) {
    var out = 0;
    for(var i = 0; i < $84be8f4e49b85c13$var$permuteTable.length; i++){
        out <<= 1;
        out |= num >>> $84be8f4e49b85c13$var$permuteTable[i] & 0x1;
    }
    return out >>> 0;
};
$84be8f4e49b85c13$export$209139ff098c441a = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

});

parcelRequire.register("1XNu1", function(module, exports) {
'use strict';

var $dN0Q4 = parcelRequire("dN0Q4");
function $16e1af78d4596c8c$var$Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = $16e1af78d4596c8c$var$Cipher;
$16e1af78d4596c8c$var$Cipher.prototype._init = function _init() {
// Might be overrided
};
$16e1af78d4596c8c$var$Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
$16e1af78d4596c8c$var$Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
$16e1af78d4596c8c$var$Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
$16e1af78d4596c8c$var$Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
$16e1af78d4596c8c$var$Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
$16e1af78d4596c8c$var$Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
$16e1af78d4596c8c$var$Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
$16e1af78d4596c8c$var$Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
$16e1af78d4596c8c$var$Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
$16e1af78d4596c8c$var$Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    $dN0Q4.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

});
parcelRequire.register("dN0Q4", function(module, exports) {
module.exports = $a0a08085af058274$var$assert;
function $a0a08085af058274$var$assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
$a0a08085af058274$var$assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

});


parcelRequire.register("fILu8", function(module, exports) {
'use strict';

var $dN0Q4 = parcelRequire("dN0Q4");

var $baEok = parcelRequire("baEok");

var $boATU = parcelRequire("boATU");

var $1XNu1 = parcelRequire("1XNu1");
function $b71fcca17cb35207$var$DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function $b71fcca17cb35207$var$DES(options) {
    $1XNu1.call(this, options);
    var state = new $b71fcca17cb35207$var$DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
$baEok($b71fcca17cb35207$var$DES, $1XNu1);
module.exports = $b71fcca17cb35207$var$DES;
$b71fcca17cb35207$var$DES.create = function create(options) {
    return new $b71fcca17cb35207$var$DES(options);
};
var $b71fcca17cb35207$var$shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
$b71fcca17cb35207$var$DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    $dN0Q4.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = $boATU.readUInt32BE(key, 0);
    var kR = $boATU.readUInt32BE(key, 4);
    $boATU.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = $b71fcca17cb35207$var$shiftTable[i >>> 1];
        kL = $boATU.r28shl(kL, shift);
        kR = $boATU.r28shl(kR, shift);
        $boATU.pc2(kL, kR, state.keys, i);
    }
};
$b71fcca17cb35207$var$DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = $boATU.readUInt32BE(inp, inOff);
    var r = $boATU.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    $boATU.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    $boATU.writeUInt32BE(out, l, outOff);
    $boATU.writeUInt32BE(out, r, outOff + 4);
};
$b71fcca17cb35207$var$DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
$b71fcca17cb35207$var$DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)$dN0Q4.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
$b71fcca17cb35207$var$DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $boATU.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $boATU.substitute(keyL, keyR);
        var f = $boATU.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    $boATU.rip(r, l, out, off);
};
$b71fcca17cb35207$var$DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $boATU.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $boATU.substitute(keyL, keyR);
        var f = $boATU.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    $boATU.rip(l, r, out, off);
};

});

parcelRequire.register("WHnax", function(module, exports) {

$parcel$export(module.exports, "instantiate", function () { return $0b070fcecc868d6e$export$f9bb8d20ccc7477a; }, function (v) { return $0b070fcecc868d6e$export$f9bb8d20ccc7477a = v; });
var $0b070fcecc868d6e$export$f9bb8d20ccc7477a;
'use strict';

var $dN0Q4 = parcelRequire("dN0Q4");

var $baEok = parcelRequire("baEok");
var $0b070fcecc868d6e$var$proto = {};
function $0b070fcecc868d6e$var$CBCState(iv) {
    $dN0Q4.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function $0b070fcecc868d6e$var$instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    $baEok(CBC, Base);
    var keys = Object.keys($0b070fcecc868d6e$var$proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = $0b070fcecc868d6e$var$proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
$0b070fcecc868d6e$export$f9bb8d20ccc7477a = $0b070fcecc868d6e$var$instantiate;
$0b070fcecc868d6e$var$proto._cbcInit = function _cbcInit() {
    var state = new $0b070fcecc868d6e$var$CBCState(this.options.iv);
    this._cbcState = state;
};
$0b070fcecc868d6e$var$proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

});

parcelRequire.register("6dLk9", function(module, exports) {
'use strict';

var $dN0Q4 = parcelRequire("dN0Q4");

var $baEok = parcelRequire("baEok");

var $1XNu1 = parcelRequire("1XNu1");

var $fILu8 = parcelRequire("fILu8");
function $4878aa847e0ada9d$var$EDEState(type, key) {
    $dN0Q4.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        $fILu8.create({
            type: 'encrypt',
            key: k1
        }),
        $fILu8.create({
            type: 'decrypt',
            key: k2
        }),
        $fILu8.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        $fILu8.create({
            type: 'decrypt',
            key: k3
        }),
        $fILu8.create({
            type: 'encrypt',
            key: k2
        }),
        $fILu8.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function $4878aa847e0ada9d$var$EDE(options) {
    $1XNu1.call(this, options);
    var state = new $4878aa847e0ada9d$var$EDEState(this.type, this.options.key);
    this._edeState = state;
}
$baEok($4878aa847e0ada9d$var$EDE, $1XNu1);
module.exports = $4878aa847e0ada9d$var$EDE;
$4878aa847e0ada9d$var$EDE.create = function create(options) {
    return new $4878aa847e0ada9d$var$EDE(options);
};
$4878aa847e0ada9d$var$EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
$4878aa847e0ada9d$var$EDE.prototype._pad = $fILu8.prototype._pad;
$4878aa847e0ada9d$var$EDE.prototype._unpad = $fILu8.prototype._unpad;

});



parcelRequire.register("jEWuG", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", function () { return $e4ff206b285ce891$export$2f64596b8cbf08b4; }, function (v) { return $e4ff206b285ce891$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $e4ff206b285ce891$export$36b6d6ef312eab39; }, function (v) { return $e4ff206b285ce891$export$36b6d6ef312eab39 = v; });
$parcel$export(module.exports, "getCiphers", function () { return $e4ff206b285ce891$export$58a258485f1e49f6; }, function (v) { return $e4ff206b285ce891$export$58a258485f1e49f6 = v; });
var $e4ff206b285ce891$export$bdd223f16383713e;
var $e4ff206b285ce891$export$26e5786e8ac8e530;
var $e4ff206b285ce891$export$2f64596b8cbf08b4;
var $e4ff206b285ce891$export$20533d26f07f1ee0;
var $e4ff206b285ce891$export$12ada9414fbc594c;
var $e4ff206b285ce891$export$2ce6d8d0e8b04e1a;
var $e4ff206b285ce891$export$36b6d6ef312eab39;
var $e4ff206b285ce891$export$f5e7e39d57cd9700;
var $e4ff206b285ce891$export$dedd8dc3dc62b370;
var $e4ff206b285ce891$export$58a258485f1e49f6;

var $8jhdQ = parcelRequire("8jhdQ");

var $dU2nL = parcelRequire("dU2nL");

var $iOqZM = parcelRequire("iOqZM");
function $e4ff206b285ce891$var$getCiphers() {
    return Object.keys($iOqZM);
}
$e4ff206b285ce891$export$bdd223f16383713e = $e4ff206b285ce891$export$26e5786e8ac8e530 = $8jhdQ.createCipher;
$e4ff206b285ce891$export$2f64596b8cbf08b4 = $e4ff206b285ce891$export$20533d26f07f1ee0 = $8jhdQ.createCipheriv;
$e4ff206b285ce891$export$12ada9414fbc594c = $e4ff206b285ce891$export$2ce6d8d0e8b04e1a = $dU2nL.createDecipher;
$e4ff206b285ce891$export$36b6d6ef312eab39 = $e4ff206b285ce891$export$f5e7e39d57cd9700 = $dU2nL.createDecipheriv;
$e4ff206b285ce891$export$dedd8dc3dc62b370 = $e4ff206b285ce891$export$58a258485f1e49f6 = $e4ff206b285ce891$var$getCiphers;

});
parcelRequire.register("8jhdQ", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", function () { return $60cd7512204e9906$export$2f64596b8cbf08b4; }, function (v) { return $60cd7512204e9906$export$2f64596b8cbf08b4 = v; });
$parcel$export(module.exports, "createCipher", function () { return $60cd7512204e9906$export$bdd223f16383713e; }, function (v) { return $60cd7512204e9906$export$bdd223f16383713e = v; });
var $60cd7512204e9906$export$2f64596b8cbf08b4;
var $60cd7512204e9906$export$bdd223f16383713e;

var $1OG5o = parcelRequire("1OG5o");

var $1cV2f = parcelRequire("1cV2f");

var $8k9oS = parcelRequire("8k9oS");
var $60cd7512204e9906$require$Buffer = $8k9oS.Buffer;

var $ctiRE = parcelRequire("ctiRE");

var $h2SJW = parcelRequire("h2SJW");

var $gx5ZG = parcelRequire("gx5ZG");

var $l5861 = parcelRequire("l5861");

var $baEok = parcelRequire("baEok");
function $60cd7512204e9906$var$Cipher(mode, key, iv) {
    $h2SJW.call(this);
    this._cache = new $60cd7512204e9906$var$Splitter();
    this._cipher = new $gx5ZG.AES(key);
    this._prev = $60cd7512204e9906$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$baEok($60cd7512204e9906$var$Cipher, $h2SJW);
$60cd7512204e9906$var$Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return $60cd7512204e9906$require$Buffer.concat(out);
};
var $60cd7512204e9906$var$PADDING = $60cd7512204e9906$require$Buffer.alloc(16, 0x10);
$60cd7512204e9906$var$Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals($60cd7512204e9906$var$PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
$60cd7512204e9906$var$Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $60cd7512204e9906$var$Splitter() {
    this.cache = $60cd7512204e9906$require$Buffer.allocUnsafe(0);
}
$60cd7512204e9906$var$Splitter.prototype.add = function(data) {
    this.cache = $60cd7512204e9906$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$60cd7512204e9906$var$Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$60cd7512204e9906$var$Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = $60cd7512204e9906$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return $60cd7512204e9906$require$Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function $60cd7512204e9906$var$createCipheriv(suite, password, iv) {
    var config = $1OG5o[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = $60cd7512204e9906$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = $60cd7512204e9906$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new $ctiRE(config.module, password, iv);
    else if (config.type === 'auth') return new $1cV2f(config.module, password, iv);
    return new $60cd7512204e9906$var$Cipher(config.module, password, iv);
}
function $60cd7512204e9906$var$createCipher(suite, password) {
    var config = $1OG5o[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $l5861(password, false, config.key, config.iv);
    return $60cd7512204e9906$var$createCipheriv(suite, keys.key, keys.iv);
}
$60cd7512204e9906$export$2f64596b8cbf08b4 = $60cd7512204e9906$var$createCipheriv;
$60cd7512204e9906$export$bdd223f16383713e = $60cd7512204e9906$var$createCipher;

});
parcelRequire.register("1OG5o", function(module, exports) {








var $152b1b58585f42cc$var$modeModules = {
    ECB: (parcelRequire("eNV1H")),
    CBC: (parcelRequire("ioZrc")),
    CFB: (parcelRequire("6pXmJ")),
    CFB8: (parcelRequire("hQ83m")),
    CFB1: (parcelRequire("bDOGt")),
    OFB: (parcelRequire("cfjxP")),
    CTR: (parcelRequire("d1WJT")),
    GCM: (parcelRequire("d1WJT"))
};

var $iOqZM = parcelRequire("iOqZM");
for(var $152b1b58585f42cc$var$key in $iOqZM)$iOqZM[$152b1b58585f42cc$var$key].module = $152b1b58585f42cc$var$modeModules[$iOqZM[$152b1b58585f42cc$var$key].mode];
module.exports = $iOqZM;

});
parcelRequire.register("eNV1H", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $ac71e0901c15c0ce$export$5b0f6292f11d1d18; }, function (v) { return $ac71e0901c15c0ce$export$5b0f6292f11d1d18 = v; });
$parcel$export(module.exports, "decrypt", function () { return $ac71e0901c15c0ce$export$e85a0c9a1067c5d3; }, function (v) { return $ac71e0901c15c0ce$export$e85a0c9a1067c5d3 = v; });
var $ac71e0901c15c0ce$export$5b0f6292f11d1d18;
var $ac71e0901c15c0ce$export$e85a0c9a1067c5d3;
$ac71e0901c15c0ce$export$5b0f6292f11d1d18 = function(self, block) {
    return self._cipher.encryptBlock(block);
};
$ac71e0901c15c0ce$export$e85a0c9a1067c5d3 = function(self, block) {
    return self._cipher.decryptBlock(block);
};

});

parcelRequire.register("ioZrc", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $d65a201c652cf4b4$export$5b0f6292f11d1d18; }, function (v) { return $d65a201c652cf4b4$export$5b0f6292f11d1d18 = v; });
$parcel$export(module.exports, "decrypt", function () { return $d65a201c652cf4b4$export$e85a0c9a1067c5d3; }, function (v) { return $d65a201c652cf4b4$export$e85a0c9a1067c5d3 = v; });
var $d65a201c652cf4b4$export$5b0f6292f11d1d18;
var $d65a201c652cf4b4$export$e85a0c9a1067c5d3;

var $fQBn9 = parcelRequire("fQBn9");
$d65a201c652cf4b4$export$5b0f6292f11d1d18 = function(self, block) {
    var data = $fQBn9(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
$d65a201c652cf4b4$export$e85a0c9a1067c5d3 = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return $fQBn9(out, pad);
};

});
parcelRequire.register("fQBn9", function(module, exports) {

var $gGU47 = parcelRequire("gGU47");
var $b898b3bf838aeea2$require$Buffer = $gGU47.Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new $b898b3bf838aeea2$require$Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

});


parcelRequire.register("6pXmJ", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $4ac320ac14a3027a$export$5b0f6292f11d1d18; }, function (v) { return $4ac320ac14a3027a$export$5b0f6292f11d1d18 = v; });
var $4ac320ac14a3027a$export$5b0f6292f11d1d18;

var $8k9oS = parcelRequire("8k9oS");
var $4ac320ac14a3027a$require$Buffer = $8k9oS.Buffer;

var $fQBn9 = parcelRequire("fQBn9");
function $4ac320ac14a3027a$var$encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = $fQBn9(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = $4ac320ac14a3027a$require$Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
$4ac320ac14a3027a$export$5b0f6292f11d1d18 = function(self, data, decrypt) {
    var out = $4ac320ac14a3027a$require$Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = $4ac320ac14a3027a$require$Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = $4ac320ac14a3027a$require$Buffer.concat([
                out,
                $4ac320ac14a3027a$var$encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = $4ac320ac14a3027a$require$Buffer.concat([
                out,
                $4ac320ac14a3027a$var$encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

});

parcelRequire.register("hQ83m", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $cfcd8a33ed1bd424$export$5b0f6292f11d1d18; }, function (v) { return $cfcd8a33ed1bd424$export$5b0f6292f11d1d18 = v; });
var $cfcd8a33ed1bd424$export$5b0f6292f11d1d18;

var $8k9oS = parcelRequire("8k9oS");
var $cfcd8a33ed1bd424$require$Buffer = $8k9oS.Buffer;
function $cfcd8a33ed1bd424$var$encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = $cfcd8a33ed1bd424$require$Buffer.concat([
        self._prev.slice(1),
        $cfcd8a33ed1bd424$require$Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
$cfcd8a33ed1bd424$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $cfcd8a33ed1bd424$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $cfcd8a33ed1bd424$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("bDOGt", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $879aa70a26a146c4$export$5b0f6292f11d1d18; }, function (v) { return $879aa70a26a146c4$export$5b0f6292f11d1d18 = v; });
var $879aa70a26a146c4$export$5b0f6292f11d1d18;

var $8k9oS = parcelRequire("8k9oS");
var $879aa70a26a146c4$require$Buffer = $8k9oS.Buffer;
function $879aa70a26a146c4$var$encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = $879aa70a26a146c4$var$shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function $879aa70a26a146c4$var$shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = $879aa70a26a146c4$require$Buffer.allocUnsafe(buffer.length);
    buffer = $879aa70a26a146c4$require$Buffer.concat([
        buffer,
        $879aa70a26a146c4$require$Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
$879aa70a26a146c4$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $879aa70a26a146c4$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $879aa70a26a146c4$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("cfjxP", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $8ea60be2262e3068$export$5b0f6292f11d1d18; }, function (v) { return $8ea60be2262e3068$export$5b0f6292f11d1d18 = v; });
var $8ea60be2262e3068$export$5b0f6292f11d1d18;

var $gGU47 = parcelRequire("gGU47");
var $8ea60be2262e3068$require$Buffer = $gGU47.Buffer;

var $fQBn9 = parcelRequire("fQBn9");
function $8ea60be2262e3068$var$getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
$8ea60be2262e3068$export$5b0f6292f11d1d18 = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = $8ea60be2262e3068$require$Buffer.concat([
        self._cache,
        $8ea60be2262e3068$var$getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $fQBn9(chunk, pad);
};

});

parcelRequire.register("d1WJT", function(module, exports) {

$parcel$export(module.exports, "encrypt", function () { return $97c8eebc849d074e$export$5b0f6292f11d1d18; }, function (v) { return $97c8eebc849d074e$export$5b0f6292f11d1d18 = v; });
var $97c8eebc849d074e$export$5b0f6292f11d1d18;

var $fQBn9 = parcelRequire("fQBn9");

var $8k9oS = parcelRequire("8k9oS");
var $97c8eebc849d074e$require$Buffer = $8k9oS.Buffer;

var $eUQFg = parcelRequire("eUQFg");
function $97c8eebc849d074e$var$getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    $eUQFg(self._prev);
    return out;
}
var $97c8eebc849d074e$var$blockSize = 16;
$97c8eebc849d074e$export$5b0f6292f11d1d18 = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / $97c8eebc849d074e$var$blockSize);
    var start = self._cache.length;
    self._cache = $97c8eebc849d074e$require$Buffer.concat([
        self._cache,
        $97c8eebc849d074e$require$Buffer.allocUnsafe(chunkNum * $97c8eebc849d074e$var$blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = $97c8eebc849d074e$var$getBlock(self);
        var offset = start + i * $97c8eebc849d074e$var$blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $fQBn9(chunk, pad);
};

});
parcelRequire.register("eUQFg", function(module, exports) {
function $adbf25b7a65ceb68$var$incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = $adbf25b7a65ceb68$var$incr32;

});


parcelRequire.register("iOqZM", function(module, exports) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

});


parcelRequire.register("1cV2f", function(module, exports) {

var $gx5ZG = parcelRequire("gx5ZG");

var $8k9oS = parcelRequire("8k9oS");
var $0e13276f98d1c782$require$Buffer = $8k9oS.Buffer;

var $h2SJW = parcelRequire("h2SJW");

var $baEok = parcelRequire("baEok");

var $aaScu = parcelRequire("aaScu");

var $fQBn9 = parcelRequire("fQBn9");

var $eUQFg = parcelRequire("eUQFg");
function $0e13276f98d1c782$var$xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function $0e13276f98d1c782$var$calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = $0e13276f98d1c782$require$Buffer.concat([
            iv,
            $0e13276f98d1c782$require$Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return $0e13276f98d1c782$require$Buffer.concat([
            iv,
            $0e13276f98d1c782$require$Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new $aaScu(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update($0e13276f98d1c782$require$Buffer.alloc(toPad, 0));
    }
    ghash.update($0e13276f98d1c782$require$Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = $0e13276f98d1c782$require$Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = $0e13276f98d1c782$require$Buffer.from(self._finID);
    $eUQFg(out);
    return out;
}
function $0e13276f98d1c782$var$StreamCipher(mode, key, iv, decrypt) {
    $h2SJW.call(this);
    var h = $0e13276f98d1c782$require$Buffer.alloc(4, 0);
    this._cipher = new $gx5ZG.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new $aaScu(ck);
    iv = $0e13276f98d1c782$var$calcIv(this, iv, ck);
    this._prev = $0e13276f98d1c782$require$Buffer.from(iv);
    this._cache = $0e13276f98d1c782$require$Buffer.allocUnsafe(0);
    this._secCache = $0e13276f98d1c782$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
$baEok($0e13276f98d1c782$var$StreamCipher, $h2SJW);
$0e13276f98d1c782$var$StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = $0e13276f98d1c782$require$Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
$0e13276f98d1c782$var$StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = $fQBn9(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && $0e13276f98d1c782$var$xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
$0e13276f98d1c782$var$StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !$0e13276f98d1c782$require$Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
$0e13276f98d1c782$var$StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
$0e13276f98d1c782$var$StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = $0e13276f98d1c782$var$StreamCipher;

});
parcelRequire.register("gx5ZG", function(module, exports) {

$parcel$export(module.exports, "AES", function () { return $c09460a7125c2c96$export$b80fbe1c3a2b92b5; }, function (v) { return $c09460a7125c2c96$export$b80fbe1c3a2b92b5 = v; });
var $c09460a7125c2c96$export$b80fbe1c3a2b92b5;

var $8k9oS = parcelRequire("8k9oS");
var $c09460a7125c2c96$require$Buffer = $8k9oS.Buffer;
function $c09460a7125c2c96$var$asUInt32Array(buf) {
    if (!$c09460a7125c2c96$require$Buffer.isBuffer(buf)) buf = $c09460a7125c2c96$require$Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function $c09460a7125c2c96$var$scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function $c09460a7125c2c96$var$cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var $c09460a7125c2c96$var$RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
];
var $c09460a7125c2c96$var$G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 0x11b;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function $c09460a7125c2c96$var$AES(key) {
    this._key = $c09460a7125c2c96$var$asUInt32Array(key);
    this._reset();
}
$c09460a7125c2c96$var$AES.blockSize = 16;
$c09460a7125c2c96$var$AES.keySize = 32;
$c09460a7125c2c96$var$AES.prototype.blockSize = $c09460a7125c2c96$var$AES.blockSize;
$c09460a7125c2c96$var$AES.prototype.keySize = $c09460a7125c2c96$var$AES.keySize;
$c09460a7125c2c96$var$AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = $c09460a7125c2c96$var$G.SBOX[t >>> 24] << 24 | $c09460a7125c2c96$var$G.SBOX[t >>> 16 & 0xff] << 16 | $c09460a7125c2c96$var$G.SBOX[t >>> 8 & 0xff] << 8 | $c09460a7125c2c96$var$G.SBOX[t & 0xff];
            t ^= $c09460a7125c2c96$var$RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = $c09460a7125c2c96$var$G.SBOX[t >>> 24] << 24 | $c09460a7125c2c96$var$G.SBOX[t >>> 16 & 0xff] << 16 | $c09460a7125c2c96$var$G.SBOX[t >>> 8 & 0xff] << 8 | $c09460a7125c2c96$var$G.SBOX[t & 0xff];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = $c09460a7125c2c96$var$G.INV_SUB_MIX[0][$c09460a7125c2c96$var$G.SBOX[tt >>> 24]] ^ $c09460a7125c2c96$var$G.INV_SUB_MIX[1][$c09460a7125c2c96$var$G.SBOX[tt >>> 16 & 0xff]] ^ $c09460a7125c2c96$var$G.INV_SUB_MIX[2][$c09460a7125c2c96$var$G.SBOX[tt >>> 8 & 0xff]] ^ $c09460a7125c2c96$var$G.INV_SUB_MIX[3][$c09460a7125c2c96$var$G.SBOX[tt & 0xff]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
$c09460a7125c2c96$var$AES.prototype.encryptBlockRaw = function(M) {
    M = $c09460a7125c2c96$var$asUInt32Array(M);
    return $c09460a7125c2c96$var$cryptBlock(M, this._keySchedule, $c09460a7125c2c96$var$G.SUB_MIX, $c09460a7125c2c96$var$G.SBOX, this._nRounds);
};
$c09460a7125c2c96$var$AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = $c09460a7125c2c96$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
$c09460a7125c2c96$var$AES.prototype.decryptBlock = function(M) {
    M = $c09460a7125c2c96$var$asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = $c09460a7125c2c96$var$cryptBlock(M, this._invKeySchedule, $c09460a7125c2c96$var$G.INV_SUB_MIX, $c09460a7125c2c96$var$G.INV_SBOX, this._nRounds);
    var buf = $c09460a7125c2c96$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
$c09460a7125c2c96$var$AES.prototype.scrub = function() {
    $c09460a7125c2c96$var$scrubVec(this._keySchedule);
    $c09460a7125c2c96$var$scrubVec(this._invKeySchedule);
    $c09460a7125c2c96$var$scrubVec(this._key);
};
$c09460a7125c2c96$export$b80fbe1c3a2b92b5 = $c09460a7125c2c96$var$AES;

});

parcelRequire.register("aaScu", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $7684e19c29ccdf64$require$Buffer = $8k9oS.Buffer;
var $7684e19c29ccdf64$var$ZEROES = $7684e19c29ccdf64$require$Buffer.alloc(16, 0);
function $7684e19c29ccdf64$var$toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function $7684e19c29ccdf64$var$fromArray(out) {
    var buf = $7684e19c29ccdf64$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function $7684e19c29ccdf64$var$GHASH(key) {
    this.h = key;
    this.state = $7684e19c29ccdf64$require$Buffer.alloc(16, 0);
    this.cache = $7684e19c29ccdf64$require$Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
$7684e19c29ccdf64$var$GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
$7684e19c29ccdf64$var$GHASH.prototype._multiply = function() {
    var Vi = $7684e19c29ccdf64$var$toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = $7684e19c29ccdf64$var$fromArray(Zi);
};
$7684e19c29ccdf64$var$GHASH.prototype.update = function(buf) {
    this.cache = $7684e19c29ccdf64$require$Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
$7684e19c29ccdf64$var$GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash($7684e19c29ccdf64$require$Buffer.concat([
        this.cache,
        $7684e19c29ccdf64$var$ZEROES
    ], 16));
    this.ghash($7684e19c29ccdf64$var$fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = $7684e19c29ccdf64$var$GHASH;

});


parcelRequire.register("ctiRE", function(module, exports) {

var $gx5ZG = parcelRequire("gx5ZG");

var $8k9oS = parcelRequire("8k9oS");
var $9146d38bb17d9905$require$Buffer = $8k9oS.Buffer;

var $h2SJW = parcelRequire("h2SJW");

var $baEok = parcelRequire("baEok");
function $9146d38bb17d9905$var$StreamCipher(mode, key, iv, decrypt) {
    $h2SJW.call(this);
    this._cipher = new $gx5ZG.AES(key);
    this._prev = $9146d38bb17d9905$require$Buffer.from(iv);
    this._cache = $9146d38bb17d9905$require$Buffer.allocUnsafe(0);
    this._secCache = $9146d38bb17d9905$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
$baEok($9146d38bb17d9905$var$StreamCipher, $h2SJW);
$9146d38bb17d9905$var$StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
$9146d38bb17d9905$var$StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = $9146d38bb17d9905$var$StreamCipher;

});

parcelRequire.register("l5861", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $f59058584f418962$require$Buffer = $8k9oS.Buffer;

var $2MW9T = parcelRequire("2MW9T");
/* eslint-disable camelcase */ function $f59058584f418962$var$EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!$f59058584f418962$require$Buffer.isBuffer(password)) password = $f59058584f418962$require$Buffer.from(password, 'binary');
    if (salt) {
        if (!$f59058584f418962$require$Buffer.isBuffer(salt)) salt = $f59058584f418962$require$Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = $f59058584f418962$require$Buffer.alloc(keyLen);
    var iv = $f59058584f418962$require$Buffer.alloc(ivLen || 0);
    var tmp = $f59058584f418962$require$Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new $2MW9T();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = $f59058584f418962$var$EVP_BytesToKey;

});


parcelRequire.register("dU2nL", function(module, exports) {

$parcel$export(module.exports, "createDecipher", function () { return $a1f25a694b42ad04$export$12ada9414fbc594c; }, function (v) { return $a1f25a694b42ad04$export$12ada9414fbc594c = v; });
$parcel$export(module.exports, "createDecipheriv", function () { return $a1f25a694b42ad04$export$36b6d6ef312eab39; }, function (v) { return $a1f25a694b42ad04$export$36b6d6ef312eab39 = v; });
var $a1f25a694b42ad04$export$12ada9414fbc594c;
var $a1f25a694b42ad04$export$36b6d6ef312eab39;

var $1cV2f = parcelRequire("1cV2f");

var $8k9oS = parcelRequire("8k9oS");
var $a1f25a694b42ad04$require$Buffer = $8k9oS.Buffer;

var $1OG5o = parcelRequire("1OG5o");

var $ctiRE = parcelRequire("ctiRE");

var $h2SJW = parcelRequire("h2SJW");

var $gx5ZG = parcelRequire("gx5ZG");

var $l5861 = parcelRequire("l5861");

var $baEok = parcelRequire("baEok");
function $a1f25a694b42ad04$var$Decipher(mode, key, iv) {
    $h2SJW.call(this);
    this._cache = new $a1f25a694b42ad04$var$Splitter();
    this._last = void 0;
    this._cipher = new $gx5ZG.AES(key);
    this._prev = $a1f25a694b42ad04$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$baEok($a1f25a694b42ad04$var$Decipher, $h2SJW);
$a1f25a694b42ad04$var$Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return $a1f25a694b42ad04$require$Buffer.concat(out);
};
$a1f25a694b42ad04$var$Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return $a1f25a694b42ad04$var$unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
$a1f25a694b42ad04$var$Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $a1f25a694b42ad04$var$Splitter() {
    this.cache = $a1f25a694b42ad04$require$Buffer.allocUnsafe(0);
}
$a1f25a694b42ad04$var$Splitter.prototype.add = function(data) {
    this.cache = $a1f25a694b42ad04$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$a1f25a694b42ad04$var$Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$a1f25a694b42ad04$var$Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function $a1f25a694b42ad04$var$unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function $a1f25a694b42ad04$var$createDecipheriv(suite, password, iv) {
    var config = $1OG5o[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = $a1f25a694b42ad04$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = $a1f25a694b42ad04$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new $ctiRE(config.module, password, iv, true);
    else if (config.type === 'auth') return new $1cV2f(config.module, password, iv, true);
    return new $a1f25a694b42ad04$var$Decipher(config.module, password, iv);
}
function $a1f25a694b42ad04$var$createDecipher(suite, password) {
    var config = $1OG5o[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $l5861(password, false, config.key, config.iv);
    return $a1f25a694b42ad04$var$createDecipheriv(suite, keys.key, keys.iv);
}
$a1f25a694b42ad04$export$12ada9414fbc594c = $a1f25a694b42ad04$var$createDecipher;
$a1f25a694b42ad04$export$36b6d6ef312eab39 = $a1f25a694b42ad04$var$createDecipheriv;

});


parcelRequire.register("cUscF", function(module, exports) {

$parcel$export(module.exports, "des-ecb", function () { return $966097906e786390$export$116f8a5cee447347; }, function (v) { return $966097906e786390$export$116f8a5cee447347 = v; });
$parcel$export(module.exports, "des-cbc", function () { return $966097906e786390$export$7483c4066bfb7ae9; }, function (v) { return $966097906e786390$export$7483c4066bfb7ae9 = v; });
$parcel$export(module.exports, "des", function () { return $966097906e786390$export$e7a565d2e588bb06; }, function (v) { return $966097906e786390$export$e7a565d2e588bb06 = v; });
$parcel$export(module.exports, "des-ede3-cbc", function () { return $966097906e786390$export$aaa2f54a426f3eb8; }, function (v) { return $966097906e786390$export$aaa2f54a426f3eb8 = v; });
$parcel$export(module.exports, "des3", function () { return $966097906e786390$export$eba20568dde4ada; }, function (v) { return $966097906e786390$export$eba20568dde4ada = v; });
$parcel$export(module.exports, "des-ede3", function () { return $966097906e786390$export$d3b5e5996938f5ae; }, function (v) { return $966097906e786390$export$d3b5e5996938f5ae = v; });
$parcel$export(module.exports, "des-ede-cbc", function () { return $966097906e786390$export$57c08356130bc99b; }, function (v) { return $966097906e786390$export$57c08356130bc99b = v; });
$parcel$export(module.exports, "des-ede", function () { return $966097906e786390$export$c7169791d5c1e65d; }, function (v) { return $966097906e786390$export$c7169791d5c1e65d = v; });
var $966097906e786390$export$116f8a5cee447347;
var $966097906e786390$export$7483c4066bfb7ae9;
var $966097906e786390$export$e7a565d2e588bb06;
var $966097906e786390$export$aaa2f54a426f3eb8;
var $966097906e786390$export$eba20568dde4ada;
var $966097906e786390$export$d3b5e5996938f5ae;
var $966097906e786390$export$57c08356130bc99b;
var $966097906e786390$export$c7169791d5c1e65d;
$966097906e786390$export$116f8a5cee447347 = {
    key: 8,
    iv: 0
};
$966097906e786390$export$7483c4066bfb7ae9 = $966097906e786390$export$e7a565d2e588bb06 = {
    key: 8,
    iv: 8
};
$966097906e786390$export$aaa2f54a426f3eb8 = $966097906e786390$export$eba20568dde4ada = {
    key: 24,
    iv: 8
};
$966097906e786390$export$d3b5e5996938f5ae = {
    key: 24,
    iv: 0
};
$966097906e786390$export$57c08356130bc99b = {
    key: 16,
    iv: 8
};
$966097906e786390$export$c7169791d5c1e65d = {
    key: 16,
    iv: 0
};

});


parcelRequire.register("6J17g", function(module, exports) {

$parcel$export(module.exports, "DiffieHellmanGroup", function () { return $4e57cfabef8abb13$export$971862a2fcb1bb40; }, function (v) { return $4e57cfabef8abb13$export$971862a2fcb1bb40 = v; });
$parcel$export(module.exports, "createDiffieHellmanGroup", function () { return $4e57cfabef8abb13$export$c6ff6a88acbeaf40; }, function (v) { return $4e57cfabef8abb13$export$c6ff6a88acbeaf40 = v; });
$parcel$export(module.exports, "getDiffieHellman", function () { return $4e57cfabef8abb13$export$fdc27893e98845cc; }, function (v) { return $4e57cfabef8abb13$export$fdc27893e98845cc = v; });
$parcel$export(module.exports, "createDiffieHellman", function () { return $4e57cfabef8abb13$export$6671fb9a1323bed; }, function (v) { return $4e57cfabef8abb13$export$6671fb9a1323bed = v; });
$parcel$export(module.exports, "DiffieHellman", function () { return $4e57cfabef8abb13$export$d74daf141a551db; }, function (v) { return $4e57cfabef8abb13$export$d74daf141a551db = v; });
var $4e57cfabef8abb13$export$971862a2fcb1bb40;
var $4e57cfabef8abb13$export$c6ff6a88acbeaf40;
var $4e57cfabef8abb13$export$fdc27893e98845cc;
var $4e57cfabef8abb13$export$6671fb9a1323bed;
var $4e57cfabef8abb13$export$d74daf141a551db;

var $gGU47 = parcelRequire("gGU47");
var $4e57cfabef8abb13$require$Buffer = $gGU47.Buffer;

var $j89TZ = parcelRequire("j89TZ");

var $jEY0F = parcelRequire("jEY0F");

var $gxraZ = parcelRequire("gxraZ");
function $4e57cfabef8abb13$var$getDiffieHellman(mod) {
    var prime = new $4e57cfabef8abb13$require$Buffer($jEY0F[mod].prime, 'hex');
    var gen = new $4e57cfabef8abb13$require$Buffer($jEY0F[mod].gen, 'hex');
    return new $gxraZ(prime, gen);
}
var $4e57cfabef8abb13$var$ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function $4e57cfabef8abb13$var$createDiffieHellman(prime, enc, generator, genc) {
    if ($4e57cfabef8abb13$require$Buffer.isBuffer(enc) || $4e57cfabef8abb13$var$ENCODINGS[enc] === undefined) return $4e57cfabef8abb13$var$createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new $4e57cfabef8abb13$require$Buffer([
        2
    ]);
    if (!$4e57cfabef8abb13$require$Buffer.isBuffer(generator)) generator = new $4e57cfabef8abb13$require$Buffer(generator, genc);
    if (typeof prime === 'number') return new $gxraZ($j89TZ(prime, generator), generator, true);
    if (!$4e57cfabef8abb13$require$Buffer.isBuffer(prime)) prime = new $4e57cfabef8abb13$require$Buffer(prime, enc);
    return new $gxraZ(prime, generator, true);
}
$4e57cfabef8abb13$export$971862a2fcb1bb40 = $4e57cfabef8abb13$export$c6ff6a88acbeaf40 = $4e57cfabef8abb13$export$fdc27893e98845cc = $4e57cfabef8abb13$var$getDiffieHellman;
$4e57cfabef8abb13$export$6671fb9a1323bed = $4e57cfabef8abb13$export$d74daf141a551db = $4e57cfabef8abb13$var$createDiffieHellman;

});
parcelRequire.register("j89TZ", function(module, exports) {

var $94o1H = parcelRequire("94o1H");
module.exports = $ded6720299bdb2e3$var$findPrime;
$ded6720299bdb2e3$var$findPrime.simpleSieve = $ded6720299bdb2e3$var$simpleSieve;
$ded6720299bdb2e3$var$findPrime.fermatTest = $ded6720299bdb2e3$var$fermatTest;

var $ifKRX = parcelRequire("ifKRX");
var $ded6720299bdb2e3$var$TWENTYFOUR = new $ifKRX(24);

var $hRFcS = parcelRequire("hRFcS");
var $ded6720299bdb2e3$var$millerRabin = new $hRFcS();
var $ded6720299bdb2e3$var$ONE = new $ifKRX(1);
var $ded6720299bdb2e3$var$TWO = new $ifKRX(2);
var $ded6720299bdb2e3$var$FIVE = new $ifKRX(5);
var $ded6720299bdb2e3$var$SIXTEEN = new $ifKRX(16);
var $ded6720299bdb2e3$var$EIGHT = new $ifKRX(8);
var $ded6720299bdb2e3$var$TEN = new $ifKRX(10);
var $ded6720299bdb2e3$var$THREE = new $ifKRX(3);
var $ded6720299bdb2e3$var$SEVEN = new $ifKRX(7);
var $ded6720299bdb2e3$var$ELEVEN = new $ifKRX(11);
var $ded6720299bdb2e3$var$FOUR = new $ifKRX(4);
var $ded6720299bdb2e3$var$TWELVE = new $ifKRX(12);
var $ded6720299bdb2e3$var$primes = null;
function $ded6720299bdb2e3$var$_getPrimes() {
    if ($ded6720299bdb2e3$var$primes !== null) return $ded6720299bdb2e3$var$primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    $ded6720299bdb2e3$var$primes = res;
    return res;
}
function $ded6720299bdb2e3$var$simpleSieve(p) {
    var primes = $ded6720299bdb2e3$var$_getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function $ded6720299bdb2e3$var$fermatTest(p) {
    var red = $ifKRX.mont(p);
    return $ded6720299bdb2e3$var$TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function $ded6720299bdb2e3$var$findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new $ifKRX([
            0x8c,
            0x7b
        ]);
        else return new $ifKRX([
            0x8c,
            0x27
        ]);
    }
    gen = new $ifKRX(gen);
    var num, n2;
    while(true){
        num = new $ifKRX($94o1H(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd($ded6720299bdb2e3$var$ONE);
        if (!num.testn(1)) num.iadd($ded6720299bdb2e3$var$TWO);
        if (!gen.cmp($ded6720299bdb2e3$var$TWO)) while(num.mod($ded6720299bdb2e3$var$TWENTYFOUR).cmp($ded6720299bdb2e3$var$ELEVEN))num.iadd($ded6720299bdb2e3$var$FOUR);
        else if (!gen.cmp($ded6720299bdb2e3$var$FIVE)) while(num.mod($ded6720299bdb2e3$var$TEN).cmp($ded6720299bdb2e3$var$THREE))num.iadd($ded6720299bdb2e3$var$FOUR);
        n2 = num.shrn(1);
        if ($ded6720299bdb2e3$var$simpleSieve(n2) && $ded6720299bdb2e3$var$simpleSieve(num) && $ded6720299bdb2e3$var$fermatTest(n2) && $ded6720299bdb2e3$var$fermatTest(num) && $ded6720299bdb2e3$var$millerRabin.test(n2) && $ded6720299bdb2e3$var$millerRabin.test(num)) return num;
    }
}

});
parcelRequire.register("ifKRX", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("c7mcJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("hRFcS", function(module, exports) {

var $2rt5I = parcelRequire("2rt5I");

var $0dAuo = parcelRequire("0dAuo");
function $d01759ae1838a303$var$MillerRabin(rand) {
    this.rand = rand || new $0dAuo.Rand();
}
module.exports = $d01759ae1838a303$var$MillerRabin;
$d01759ae1838a303$var$MillerRabin.create = function create(rand) {
    return new $d01759ae1838a303$var$MillerRabin(rand);
};
$d01759ae1838a303$var$MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new $2rt5I(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0)
    return a;
};
$d01759ae1838a303$var$MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
$d01759ae1838a303$var$MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = $2rt5I.mont(n);
    var rone = new $2rt5I(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new $2rt5I(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
$d01759ae1838a303$var$MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = $2rt5I.mont(n);
    var rone = new $2rt5I(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new $2rt5I(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

});
parcelRequire.register("2rt5I", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("c7mcJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("0dAuo", function(module, exports) {
var $000a8a6747c0f660$var$r;
module.exports = function rand(len) {
    if (!$000a8a6747c0f660$var$r) $000a8a6747c0f660$var$r = new $000a8a6747c0f660$var$Rand(null);
    return $000a8a6747c0f660$var$r.generate(len);
};
function $000a8a6747c0f660$var$Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = $000a8a6747c0f660$var$Rand;
$000a8a6747c0f660$var$Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
$000a8a6747c0f660$var$Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};

if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    $000a8a6747c0f660$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    $000a8a6747c0f660$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    $000a8a6747c0f660$var$Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var $000a8a6747c0f660$var$crypto = (parcelRequire("c7mcJ"));
    if (typeof $000a8a6747c0f660$var$crypto.randomBytes !== 'function') throw new Error('Not supported');
    $000a8a6747c0f660$var$Rand.prototype._rand = function _rand(n) {
        return $000a8a6747c0f660$var$crypto.randomBytes(n);
    };
} catch (e) {}

});



parcelRequire.register("jEY0F", function(module, exports) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

});

parcelRequire.register("gxraZ", function(module, exports) {

var $gGU47 = parcelRequire("gGU47");
var $c0a4cf0a474304c9$require$Buffer = $gGU47.Buffer;

var $ifKRX = parcelRequire("ifKRX");

var $hRFcS = parcelRequire("hRFcS");
var $c0a4cf0a474304c9$var$millerRabin = new $hRFcS();
var $c0a4cf0a474304c9$var$TWENTYFOUR = new $ifKRX(24);
var $c0a4cf0a474304c9$var$ELEVEN = new $ifKRX(11);
var $c0a4cf0a474304c9$var$TEN = new $ifKRX(10);
var $c0a4cf0a474304c9$var$THREE = new $ifKRX(3);
var $c0a4cf0a474304c9$var$SEVEN = new $ifKRX(7);

var $j89TZ = parcelRequire("j89TZ");

var $94o1H = parcelRequire("94o1H");
module.exports = $c0a4cf0a474304c9$var$DH;
function $c0a4cf0a474304c9$var$setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!$c0a4cf0a474304c9$require$Buffer.isBuffer(pub)) pub = new $c0a4cf0a474304c9$require$Buffer(pub, enc);
    this._pub = new $ifKRX(pub);
    return this;
}
function $c0a4cf0a474304c9$var$setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!$c0a4cf0a474304c9$require$Buffer.isBuffer(priv)) priv = new $c0a4cf0a474304c9$require$Buffer(priv, enc);
    this._priv = new $ifKRX(priv);
    return this;
}
var $c0a4cf0a474304c9$var$primeCache = {};
function $c0a4cf0a474304c9$var$checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in $c0a4cf0a474304c9$var$primeCache) return $c0a4cf0a474304c9$var$primeCache[hex];
    var error = 0;
    if (prime.isEven() || !$j89TZ.simpleSieve || !$j89TZ.fermatTest(prime) || !$c0a4cf0a474304c9$var$millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        $c0a4cf0a474304c9$var$primeCache[hex] = error;
        return error;
    }
    if (!$c0a4cf0a474304c9$var$millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod($c0a4cf0a474304c9$var$TWENTYFOUR).cmp($c0a4cf0a474304c9$var$ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod($c0a4cf0a474304c9$var$TEN);
            if (rem.cmp($c0a4cf0a474304c9$var$THREE) && rem.cmp($c0a4cf0a474304c9$var$SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    $c0a4cf0a474304c9$var$primeCache[hex] = error;
    return error;
}
function $c0a4cf0a474304c9$var$DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new $ifKRX(prime);
    this._prime = $ifKRX.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = $c0a4cf0a474304c9$var$setPublicKey;
        this.setPrivateKey = $c0a4cf0a474304c9$var$setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty($c0a4cf0a474304c9$var$DH.prototype, 'verifyError', {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== 'number') this._primeCode = $c0a4cf0a474304c9$var$checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
$c0a4cf0a474304c9$var$DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new $ifKRX($94o1H(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
$c0a4cf0a474304c9$var$DH.prototype.computeSecret = function(other) {
    other = new $ifKRX(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new $c0a4cf0a474304c9$require$Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new $c0a4cf0a474304c9$require$Buffer(prime.length - out.length);
        front.fill(0);
        out = $c0a4cf0a474304c9$require$Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
$c0a4cf0a474304c9$var$DH.prototype.getPublicKey = function getPublicKey(enc) {
    return $c0a4cf0a474304c9$var$formatReturnValue(this._pub, enc);
};
$c0a4cf0a474304c9$var$DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return $c0a4cf0a474304c9$var$formatReturnValue(this._priv, enc);
};
$c0a4cf0a474304c9$var$DH.prototype.getPrime = function(enc) {
    return $c0a4cf0a474304c9$var$formatReturnValue(this.__prime, enc);
};
$c0a4cf0a474304c9$var$DH.prototype.getGenerator = function(enc) {
    return $c0a4cf0a474304c9$var$formatReturnValue(this._gen, enc);
};
$c0a4cf0a474304c9$var$DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!$c0a4cf0a474304c9$require$Buffer.isBuffer(gen)) gen = new $c0a4cf0a474304c9$require$Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new $ifKRX(gen);
    return this;
};
function $c0a4cf0a474304c9$var$formatReturnValue(bn, enc) {
    var buf = new $c0a4cf0a474304c9$require$Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

});


parcelRequire.register("408oY", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $2e9dadee67a5ccc5$require$Buffer = $8k9oS.Buffer;

var $cv73a = parcelRequire("cv73a");

var $8jMh9 = parcelRequire("8jMh9");

var $baEok = parcelRequire("baEok");

var $ae4VA = parcelRequire("ae4VA");

var $aznpG = parcelRequire("aznpG");

var $bPHlq = parcelRequire("bPHlq");
Object.keys($bPHlq).forEach(function(key) {
    $bPHlq[key].id = $2e9dadee67a5ccc5$require$Buffer.from($bPHlq[key].id, 'hex');
    $bPHlq[key.toLowerCase()] = $bPHlq[key];
});
function $2e9dadee67a5ccc5$var$Sign(algorithm) {
    $8jMh9.Writable.call(this);
    var data = $bPHlq[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = $cv73a(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$baEok($2e9dadee67a5ccc5$var$Sign, $8jMh9.Writable);
$2e9dadee67a5ccc5$var$Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$2e9dadee67a5ccc5$var$Sign.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $2e9dadee67a5ccc5$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$2e9dadee67a5ccc5$var$Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = $ae4VA(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function $2e9dadee67a5ccc5$var$Verify(algorithm) {
    $8jMh9.Writable.call(this);
    var data = $bPHlq[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = $cv73a(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$baEok($2e9dadee67a5ccc5$var$Verify, $8jMh9.Writable);
$2e9dadee67a5ccc5$var$Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$2e9dadee67a5ccc5$var$Verify.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $2e9dadee67a5ccc5$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$2e9dadee67a5ccc5$var$Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === 'string') sig = $2e9dadee67a5ccc5$require$Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return $aznpG(sig, hash, key, this._signType, this._tag);
};
function $2e9dadee67a5ccc5$var$createSign(algorithm) {
    return new $2e9dadee67a5ccc5$var$Sign(algorithm);
}
function $2e9dadee67a5ccc5$var$createVerify(algorithm) {
    return new $2e9dadee67a5ccc5$var$Verify(algorithm);
}
module.exports = {
    Sign: $2e9dadee67a5ccc5$var$createSign,
    Verify: $2e9dadee67a5ccc5$var$createVerify,
    createSign: $2e9dadee67a5ccc5$var$createSign,
    createVerify: $2e9dadee67a5ccc5$var$createVerify
};

});
parcelRequire.register("ae4VA", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $771f08c4b26066d5$require$Buffer = $8k9oS.Buffer;

var $dA0oy = parcelRequire("dA0oy");

var $it3Jn = parcelRequire("it3Jn");

var $2Tmp9 = parcelRequire("2Tmp9");
var $771f08c4b26066d5$require$EC = $2Tmp9.ec;

var $3wN9B = parcelRequire("3wN9B");

var $8NP2t = parcelRequire("8NP2t");

var $21yZU = parcelRequire("21yZU");
function $771f08c4b26066d5$var$sign(hash, key, hashType, signType, tag) {
    var priv = $8NP2t(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return $771f08c4b26066d5$var$ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return $771f08c4b26066d5$var$dsaSign(hash, priv, hashType);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    }
    hash = $771f08c4b26066d5$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = $it3Jn(pad, priv);
    return out;
}
function $771f08c4b26066d5$var$ecSign(hash, priv) {
    var curveId = $21yZU[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new $771f08c4b26066d5$require$EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return $771f08c4b26066d5$require$Buffer.from(out.toDER());
}
function $771f08c4b26066d5$var$dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new $3wN9B(0);
    var k;
    var H = $771f08c4b26066d5$var$bits2int(hash, q).mod(q);
    var s = false;
    var kv = $771f08c4b26066d5$var$getKey(x, q, hash, algo);
    while(s === false){
        k = $771f08c4b26066d5$var$makeKey(q, kv, algo);
        r = $771f08c4b26066d5$var$makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new $3wN9B(0);
        }
    }
    return $771f08c4b26066d5$var$toDER(r, s);
}
function $771f08c4b26066d5$var$toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        0x30,
        total,
        0x02,
        r.length
    ];
    res = res.concat(r, [
        0x02,
        s.length
    ], s);
    return $771f08c4b26066d5$require$Buffer.from(res);
}
function $771f08c4b26066d5$var$getKey(x, q, hash, algo) {
    x = $771f08c4b26066d5$require$Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = $771f08c4b26066d5$require$Buffer.alloc(q.byteLength() - x.length);
        x = $771f08c4b26066d5$require$Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = $771f08c4b26066d5$var$bits2octets(hash, q);
    var v = $771f08c4b26066d5$require$Buffer.alloc(hlen);
    v.fill(1);
    var k = $771f08c4b26066d5$require$Buffer.alloc(hlen);
    k = $dA0oy(algo, k).update(v).update($771f08c4b26066d5$require$Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = $dA0oy(algo, k).update(v).digest();
    k = $dA0oy(algo, k).update(v).update($771f08c4b26066d5$require$Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = $dA0oy(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function $771f08c4b26066d5$var$bits2int(obits, q) {
    var bits = new $3wN9B(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function $771f08c4b26066d5$var$bits2octets(bits, q) {
    bits = $771f08c4b26066d5$var$bits2int(bits, q);
    bits = bits.mod(q);
    var out = $771f08c4b26066d5$require$Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = $771f08c4b26066d5$require$Buffer.alloc(q.byteLength() - out.length);
        out = $771f08c4b26066d5$require$Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function $771f08c4b26066d5$var$makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = $771f08c4b26066d5$require$Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = $dA0oy(algo, kv.k).update(kv.v).digest();
            t = $771f08c4b26066d5$require$Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = $771f08c4b26066d5$var$bits2int(t, q);
        kv.k = $dA0oy(algo, kv.k).update(kv.v).update($771f08c4b26066d5$require$Buffer.from([
            0
        ])).digest();
        kv.v = $dA0oy(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1)
    return k;
}
function $771f08c4b26066d5$var$makeR(g, k, p, q) {
    return g.toRed($3wN9B.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = $771f08c4b26066d5$var$sign;
module.exports.getKey = $771f08c4b26066d5$var$getKey;
module.exports.makeKey = $771f08c4b26066d5$var$makeKey;

});
parcelRequire.register("it3Jn", function(module, exports) {

var $gGU47 = parcelRequire("gGU47");
var $d71dd453f6fd8253$require$Buffer = $gGU47.Buffer;

var $3wN9B = parcelRequire("3wN9B");

var $94o1H = parcelRequire("94o1H");
function $d71dd453f6fd8253$var$blind(priv) {
    var r = $d71dd453f6fd8253$var$getr(priv);
    var blinder = r.toRed($3wN9B.mont(priv.modulus)).redPow(new $3wN9B(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function $d71dd453f6fd8253$var$getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new $3wN9B($94o1H(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
    return r;
}
function $d71dd453f6fd8253$var$crt(msg, priv) {
    var blinds = $d71dd453f6fd8253$var$blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new $3wN9B(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed($3wN9B.mont(priv.prime1));
    var c2 = blinded.toRed($3wN9B.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike($d71dd453f6fd8253$require$Buffer, 'be', len);
}
$d71dd453f6fd8253$var$crt.getr = $d71dd453f6fd8253$var$getr;
module.exports = $d71dd453f6fd8253$var$crt;

});
parcelRequire.register("3wN9B", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("c7mcJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("2Tmp9", function(module, exports) {
'use strict';
var $21b218e8c46b8219$var$elliptic = module.exports;

$21b218e8c46b8219$var$elliptic.version = (parcelRequire("6ebIM")).version;

$21b218e8c46b8219$var$elliptic.utils = (parcelRequire("frLve"));

$21b218e8c46b8219$var$elliptic.rand = (parcelRequire("0dAuo"));

$21b218e8c46b8219$var$elliptic.curve = (parcelRequire("eb0RN"));

$21b218e8c46b8219$var$elliptic.curves = (parcelRequire("3J9Yr"));

// Protocols
$21b218e8c46b8219$var$elliptic.ec = (parcelRequire("70bli"));

$21b218e8c46b8219$var$elliptic.eddsa = (parcelRequire("4tVTF"));

});
parcelRequire.register("6ebIM", function(module, exports) {
module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

});

parcelRequire.register("frLve", function(module, exports) {
'use strict';
var $b3ee39ae062919b7$var$utils = module.exports;

var $jBtqe = parcelRequire("jBtqe");

var $dN0Q4 = parcelRequire("dN0Q4");

var $3xppW = parcelRequire("3xppW");
$b3ee39ae062919b7$var$utils.assert = $dN0Q4;
$b3ee39ae062919b7$var$utils.toArray = $3xppW.toArray;
$b3ee39ae062919b7$var$utils.zero2 = $3xppW.zero2;
$b3ee39ae062919b7$var$utils.toHex = $3xppW.toHex;
$b3ee39ae062919b7$var$utils.encode = $3xppW.encode;
// Represent num in a w-NAF form
function $b3ee39ae062919b7$var$getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
$b3ee39ae062919b7$var$utils.getNAF = $b3ee39ae062919b7$var$getNAF;
// Represent k1, k2 in a Joint Sparse Form
function $b3ee39ae062919b7$var$getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
$b3ee39ae062919b7$var$utils.getJSF = $b3ee39ae062919b7$var$getJSF;
function $b3ee39ae062919b7$var$cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
$b3ee39ae062919b7$var$utils.cachedProperty = $b3ee39ae062919b7$var$cachedProperty;
function $b3ee39ae062919b7$var$parseBytes(bytes) {
    return typeof bytes === 'string' ? $b3ee39ae062919b7$var$utils.toArray(bytes, 'hex') : bytes;
}
$b3ee39ae062919b7$var$utils.parseBytes = $b3ee39ae062919b7$var$parseBytes;
function $b3ee39ae062919b7$var$intFromLE(bytes) {
    return new $jBtqe(bytes, 'hex', 'le');
}
$b3ee39ae062919b7$var$utils.intFromLE = $b3ee39ae062919b7$var$intFromLE;

});
parcelRequire.register("jBtqe", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("c7mcJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("3xppW", function(module, exports) {
'use strict';
var $29382b869e14dd93$var$utils = module.exports;
function $29382b869e14dd93$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
$29382b869e14dd93$var$utils.toArray = $29382b869e14dd93$var$toArray;
function $29382b869e14dd93$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$29382b869e14dd93$var$utils.zero2 = $29382b869e14dd93$var$zero2;
function $29382b869e14dd93$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $29382b869e14dd93$var$zero2(msg[i].toString(16));
    return res;
}
$29382b869e14dd93$var$utils.toHex = $29382b869e14dd93$var$toHex;
$29382b869e14dd93$var$utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return $29382b869e14dd93$var$toHex(arr);
    else return arr;
};

});


parcelRequire.register("eb0RN", function(module, exports) {
'use strict';
var $02a9d9de804f9b3e$var$curve = module.exports;

$02a9d9de804f9b3e$var$curve.base = (parcelRequire("6EQXx"));

$02a9d9de804f9b3e$var$curve.short = (parcelRequire("h3spS"));

$02a9d9de804f9b3e$var$curve.mont = (parcelRequire("iysLf"));

$02a9d9de804f9b3e$var$curve.edwards = (parcelRequire("43aj5"));

});
parcelRequire.register("6EQXx", function(module, exports) {
'use strict';

var $jBtqe = parcelRequire("jBtqe");

var $frLve = parcelRequire("frLve");
var $4d8f8f1c493d6c5b$var$getNAF = $frLve.getNAF;
var $4d8f8f1c493d6c5b$var$getJSF = $frLve.getJSF;
var $4d8f8f1c493d6c5b$var$assert = $frLve.assert;
function $4d8f8f1c493d6c5b$var$BaseCurve(type, conf) {
    this.type = type;
    this.p = new $jBtqe(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? $jBtqe.red(conf.prime) : $jBtqe.mont(this.p);
    // Useful for many curves
    this.zero = new $jBtqe(0).toRed(this.red);
    this.one = new $jBtqe(1).toRed(this.red);
    this.two = new $jBtqe(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new $jBtqe(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = $4d8f8f1c493d6c5b$var$BaseCurve;
$4d8f8f1c493d6c5b$var$BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
$4d8f8f1c493d6c5b$var$BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
$4d8f8f1c493d6c5b$var$BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    $4d8f8f1c493d6c5b$var$assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = $4d8f8f1c493d6c5b$var$getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
$4d8f8f1c493d6c5b$var$BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = $4d8f8f1c493d6c5b$var$getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        $4d8f8f1c493d6c5b$var$assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
$4d8f8f1c493d6c5b$var$BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = $4d8f8f1c493d6c5b$var$getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = $4d8f8f1c493d6c5b$var$getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = $4d8f8f1c493d6c5b$var$getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function $4d8f8f1c493d6c5b$var$BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
$4d8f8f1c493d6c5b$var$BaseCurve.BasePoint = $4d8f8f1c493d6c5b$var$BasePoint;
$4d8f8f1c493d6c5b$var$BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
$4d8f8f1c493d6c5b$var$BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = $frLve.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) $4d8f8f1c493d6c5b$var$assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) $4d8f8f1c493d6c5b$var$assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error('Unknown point format');
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray('be', len));
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype.encode = function encode(enc, compact) {
    return $frLve.encode(this._encode(compact), enc);
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
$4d8f8f1c493d6c5b$var$BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

});

parcelRequire.register("h3spS", function(module, exports) {
'use strict';

var $frLve = parcelRequire("frLve");

var $jBtqe = parcelRequire("jBtqe");

var $baEok = parcelRequire("baEok");

var $6EQXx = parcelRequire("6EQXx");
var $c6a8c25dd87d6a96$var$assert = $frLve.assert;
function $c6a8c25dd87d6a96$var$ShortCurve(conf) {
    $6EQXx.call(this, 'short', conf);
    this.a = new $jBtqe(conf.a, 16).toRed(this.red);
    this.b = new $jBtqe(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
$baEok($c6a8c25dd87d6a96$var$ShortCurve, $6EQXx);
module.exports = $c6a8c25dd87d6a96$var$ShortCurve;
$c6a8c25dd87d6a96$var$ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new $jBtqe(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new $jBtqe(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            $c6a8c25dd87d6a96$var$assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new $jBtqe(vec.a, 16),
            b: new $jBtqe(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
$c6a8c25dd87d6a96$var$ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : $jBtqe.mont(num);
    var tinv = new $jBtqe(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new $jBtqe(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
$c6a8c25dd87d6a96$var$ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new $jBtqe(1);
    var y1 = new $jBtqe(0);
    var x2 = new $jBtqe(0);
    var y2 = new $jBtqe(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
$c6a8c25dd87d6a96$var$ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
$c6a8c25dd87d6a96$var$ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $jBtqe(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$c6a8c25dd87d6a96$var$ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
$c6a8c25dd87d6a96$var$ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function $c6a8c25dd87d6a96$var$Point(curve, x, y, isRed) {
    $6EQXx.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new $jBtqe(x, 16);
        this.y = new $jBtqe(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
$baEok($c6a8c25dd87d6a96$var$Point, $6EQXx.BasePoint);
$c6a8c25dd87d6a96$var$ShortCurve.prototype.point = function point(x, y, isRed) {
    return new $c6a8c25dd87d6a96$var$Point(this, x, y, isRed);
};
$c6a8c25dd87d6a96$var$ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return $c6a8c25dd87d6a96$var$Point.fromJSON(this, obj, red);
};
$c6a8c25dd87d6a96$var$Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
$c6a8c25dd87d6a96$var$Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
$c6a8c25dd87d6a96$var$Point.fromJSON = function fromJSON(curve, obj1, red) {
    if (typeof obj1 === 'string') obj1 = JSON.parse(obj1);
    var res = curve.point(obj1[0], obj1[1], red);
    if (!obj1[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj1[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
$c6a8c25dd87d6a96$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
$c6a8c25dd87d6a96$var$Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
$c6a8c25dd87d6a96$var$Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$c6a8c25dd87d6a96$var$Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$c6a8c25dd87d6a96$var$Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
$c6a8c25dd87d6a96$var$Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
$c6a8c25dd87d6a96$var$Point.prototype.mul = function mul(k) {
    k = new $jBtqe(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
$c6a8c25dd87d6a96$var$Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
$c6a8c25dd87d6a96$var$Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
$c6a8c25dd87d6a96$var$Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
$c6a8c25dd87d6a96$var$Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
$c6a8c25dd87d6a96$var$Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function $c6a8c25dd87d6a96$var$JPoint(curve, x, y, z) {
    $6EQXx.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new $jBtqe(0);
    } else {
        this.x = new $jBtqe(x, 16);
        this.y = new $jBtqe(y, 16);
        this.z = new $jBtqe(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
$baEok($c6a8c25dd87d6a96$var$JPoint, $6EQXx.BasePoint);
$c6a8c25dd87d6a96$var$ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new $c6a8c25dd87d6a96$var$JPoint(this, x, y, z);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
$c6a8c25dd87d6a96$var$JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$c6a8c25dd87d6a96$var$JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$c6a8c25dd87d6a96$var$JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.mul = function mul(k, kbase) {
    k = new $jBtqe(k, kbase);
    return this.curve._wnafMul(this, k);
};
$c6a8c25dd87d6a96$var$JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
$c6a8c25dd87d6a96$var$JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
$c6a8c25dd87d6a96$var$JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
$c6a8c25dd87d6a96$var$JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

});

parcelRequire.register("iysLf", function(module, exports) {
'use strict';

var $jBtqe = parcelRequire("jBtqe");

var $baEok = parcelRequire("baEok");

var $6EQXx = parcelRequire("6EQXx");

var $frLve = parcelRequire("frLve");
function $d821b657e61f3c9b$var$MontCurve(conf) {
    $6EQXx.call(this, 'mont', conf);
    this.a = new $jBtqe(conf.a, 16).toRed(this.red);
    this.b = new $jBtqe(conf.b, 16).toRed(this.red);
    this.i4 = new $jBtqe(4).toRed(this.red).redInvm();
    this.two = new $jBtqe(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
$baEok($d821b657e61f3c9b$var$MontCurve, $6EQXx);
module.exports = $d821b657e61f3c9b$var$MontCurve;
$d821b657e61f3c9b$var$MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function $d821b657e61f3c9b$var$Point(curve, x, z) {
    $6EQXx.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new $jBtqe(x, 16);
        this.z = new $jBtqe(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
$baEok($d821b657e61f3c9b$var$Point, $6EQXx.BasePoint);
$d821b657e61f3c9b$var$MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point($frLve.toArray(bytes, enc), 1);
};
$d821b657e61f3c9b$var$MontCurve.prototype.point = function point(x, z) {
    return new $d821b657e61f3c9b$var$Point(this, x, z);
};
$d821b657e61f3c9b$var$MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $d821b657e61f3c9b$var$Point.fromJSON(this, obj);
};
$d821b657e61f3c9b$var$Point.prototype.precompute = function precompute() {
// No-op
};
$d821b657e61f3c9b$var$Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
$d821b657e61f3c9b$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $d821b657e61f3c9b$var$Point(curve, obj[0], obj[1] || curve.one);
};
$d821b657e61f3c9b$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$d821b657e61f3c9b$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
$d821b657e61f3c9b$var$Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
$d821b657e61f3c9b$var$Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
$d821b657e61f3c9b$var$Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
$d821b657e61f3c9b$var$Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
$d821b657e61f3c9b$var$Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$d821b657e61f3c9b$var$Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$d821b657e61f3c9b$var$Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
$d821b657e61f3c9b$var$Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
$d821b657e61f3c9b$var$Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

});

parcelRequire.register("43aj5", function(module, exports) {
'use strict';

var $frLve = parcelRequire("frLve");

var $jBtqe = parcelRequire("jBtqe");

var $baEok = parcelRequire("baEok");

var $6EQXx = parcelRequire("6EQXx");
var $2f2f6ff03f151bef$var$assert = $frLve.assert;
function $2f2f6ff03f151bef$var$EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    $6EQXx.call(this, 'edwards', conf);
    this.a = new $jBtqe(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new $jBtqe(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new $jBtqe(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    $2f2f6ff03f151bef$var$assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
$baEok($2f2f6ff03f151bef$var$EdwardsCurve, $6EQXx);
module.exports = $2f2f6ff03f151bef$var$EdwardsCurve;
$2f2f6ff03f151bef$var$EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
$2f2f6ff03f151bef$var$EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
$2f2f6ff03f151bef$var$EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
$2f2f6ff03f151bef$var$EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $jBtqe(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$2f2f6ff03f151bef$var$EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new $jBtqe(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
$2f2f6ff03f151bef$var$EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function $2f2f6ff03f151bef$var$Point(curve, x, y, z, t) {
    $6EQXx.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new $jBtqe(x, 16);
        this.y = new $jBtqe(y, 16);
        this.z = z ? new $jBtqe(z, 16) : this.curve.one;
        this.t = t && new $jBtqe(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
$baEok($2f2f6ff03f151bef$var$Point, $6EQXx.BasePoint);
$2f2f6ff03f151bef$var$EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $2f2f6ff03f151bef$var$Point.fromJSON(this, obj);
};
$2f2f6ff03f151bef$var$EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new $2f2f6ff03f151bef$var$Point(this, x, y, z, t);
};
$2f2f6ff03f151bef$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $2f2f6ff03f151bef$var$Point(curve, obj[0], obj[1], obj[2]);
};
$2f2f6ff03f151bef$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$2f2f6ff03f151bef$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
$2f2f6ff03f151bef$var$Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$2f2f6ff03f151bef$var$Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
$2f2f6ff03f151bef$var$Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
$2f2f6ff03f151bef$var$Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$2f2f6ff03f151bef$var$Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
$2f2f6ff03f151bef$var$Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
$2f2f6ff03f151bef$var$Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
$2f2f6ff03f151bef$var$Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
$2f2f6ff03f151bef$var$Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
$2f2f6ff03f151bef$var$Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
$2f2f6ff03f151bef$var$Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
$2f2f6ff03f151bef$var$Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
$2f2f6ff03f151bef$var$Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
$2f2f6ff03f151bef$var$Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
$2f2f6ff03f151bef$var$Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
$2f2f6ff03f151bef$var$Point.prototype.toP = $2f2f6ff03f151bef$var$Point.prototype.normalize;
$2f2f6ff03f151bef$var$Point.prototype.mixedAdd = $2f2f6ff03f151bef$var$Point.prototype.add;

});


parcelRequire.register("3J9Yr", function(module, exports) {
'use strict';
var $2b6d4faa53388540$var$curves = module.exports;

var $hv5Fa = parcelRequire("hv5Fa");

var $eb0RN = parcelRequire("eb0RN");

var $frLve = parcelRequire("frLve");
var $2b6d4faa53388540$var$assert = $frLve.assert;
function $2b6d4faa53388540$var$PresetCurve(options) {
    if (options.type === 'short') this.curve = new $eb0RN.short(options);
    else if (options.type === 'edwards') this.curve = new $eb0RN.edwards(options);
    else this.curve = new $eb0RN.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    $2b6d4faa53388540$var$assert(this.g.validate(), 'Invalid curve');
    $2b6d4faa53388540$var$assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
$2b6d4faa53388540$var$curves.PresetCurve = $2b6d4faa53388540$var$PresetCurve;
function $2b6d4faa53388540$var$defineCurve(name, options) {
    Object.defineProperty($2b6d4faa53388540$var$curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new $2b6d4faa53388540$var$PresetCurve(options);
            Object.defineProperty($2b6d4faa53388540$var$curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
$2b6d4faa53388540$var$defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: $hv5Fa.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811', 
    ]
});
$2b6d4faa53388540$var$defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: $hv5Fa.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34', 
    ]
});
$2b6d4faa53388540$var$defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: $hv5Fa.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5', 
    ]
});
$2b6d4faa53388540$var$defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: $hv5Fa.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
$2b6d4faa53388540$var$defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: $hv5Fa.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
$2b6d4faa53388540$var$defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $hv5Fa.sha256,
    gRed: false,
    g: [
        '9', 
    ]
});
$2b6d4faa53388540$var$defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $hv5Fa.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658', 
    ]
});
var $2b6d4faa53388540$var$pre;

try {
    $2b6d4faa53388540$var$pre = (parcelRequire("f3SJj"));
} catch (e) {
    $2b6d4faa53388540$var$pre = undefined;
}
$2b6d4faa53388540$var$defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: $hv5Fa.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }, 
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        $2b6d4faa53388540$var$pre, 
    ]
});

});
parcelRequire.register("hv5Fa", function(module, exports) {
var $cbd9b97b685912f1$var$hash = module.exports;

$cbd9b97b685912f1$var$hash.utils = (parcelRequire("7JIad"));

$cbd9b97b685912f1$var$hash.common = (parcelRequire("ab6am"));

$cbd9b97b685912f1$var$hash.sha = (parcelRequire("bmHbt"));

$cbd9b97b685912f1$var$hash.ripemd = (parcelRequire("idr5w"));

$cbd9b97b685912f1$var$hash.hmac = (parcelRequire("hR5UO"));
// Proxy hash functions to the main object
$cbd9b97b685912f1$var$hash.sha1 = $cbd9b97b685912f1$var$hash.sha.sha1;
$cbd9b97b685912f1$var$hash.sha256 = $cbd9b97b685912f1$var$hash.sha.sha256;
$cbd9b97b685912f1$var$hash.sha224 = $cbd9b97b685912f1$var$hash.sha.sha224;
$cbd9b97b685912f1$var$hash.sha384 = $cbd9b97b685912f1$var$hash.sha.sha384;
$cbd9b97b685912f1$var$hash.sha512 = $cbd9b97b685912f1$var$hash.sha.sha512;
$cbd9b97b685912f1$var$hash.ripemd160 = $cbd9b97b685912f1$var$hash.ripemd.ripemd160;

});
parcelRequire.register("7JIad", function(module, exports) {

$parcel$export(module.exports, "inherits", function () { return $5a1efe64814a8c7b$export$69f1b2dcda23c5f8; }, function (v) { return $5a1efe64814a8c7b$export$69f1b2dcda23c5f8 = v; });
$parcel$export(module.exports, "toArray", function () { return $5a1efe64814a8c7b$export$45b10814cc054894; }, function (v) { return $5a1efe64814a8c7b$export$45b10814cc054894 = v; });
$parcel$export(module.exports, "toHex", function () { return $5a1efe64814a8c7b$export$7ea66e3774a60b67; }, function (v) { return $5a1efe64814a8c7b$export$7ea66e3774a60b67 = v; });
$parcel$export(module.exports, "htonl", function () { return $5a1efe64814a8c7b$export$34a52f00f601f6f1; }, function (v) { return $5a1efe64814a8c7b$export$34a52f00f601f6f1 = v; });
$parcel$export(module.exports, "toHex32", function () { return $5a1efe64814a8c7b$export$812b0cbd5e8a72ab; }, function (v) { return $5a1efe64814a8c7b$export$812b0cbd5e8a72ab = v; });
$parcel$export(module.exports, "zero2", function () { return $5a1efe64814a8c7b$export$f24f9e11d63bb314; }, function (v) { return $5a1efe64814a8c7b$export$f24f9e11d63bb314 = v; });
$parcel$export(module.exports, "zero8", function () { return $5a1efe64814a8c7b$export$b71357c7e07ca1f1; }, function (v) { return $5a1efe64814a8c7b$export$b71357c7e07ca1f1 = v; });
$parcel$export(module.exports, "join32", function () { return $5a1efe64814a8c7b$export$2e58a4b541fdcbe8; }, function (v) { return $5a1efe64814a8c7b$export$2e58a4b541fdcbe8 = v; });
$parcel$export(module.exports, "split32", function () { return $5a1efe64814a8c7b$export$183b950bde9faab8; }, function (v) { return $5a1efe64814a8c7b$export$183b950bde9faab8 = v; });
$parcel$export(module.exports, "rotr32", function () { return $5a1efe64814a8c7b$export$4785c77169fea59e; }, function (v) { return $5a1efe64814a8c7b$export$4785c77169fea59e = v; });
$parcel$export(module.exports, "rotl32", function () { return $5a1efe64814a8c7b$export$242a185dfcffac5b; }, function (v) { return $5a1efe64814a8c7b$export$242a185dfcffac5b = v; });
$parcel$export(module.exports, "sum32", function () { return $5a1efe64814a8c7b$export$58c04ae0ae31877d; }, function (v) { return $5a1efe64814a8c7b$export$58c04ae0ae31877d = v; });
$parcel$export(module.exports, "sum32_3", function () { return $5a1efe64814a8c7b$export$d058ca695f8c6f11; }, function (v) { return $5a1efe64814a8c7b$export$d058ca695f8c6f11 = v; });
$parcel$export(module.exports, "sum32_4", function () { return $5a1efe64814a8c7b$export$a1efd7fc3e986367; }, function (v) { return $5a1efe64814a8c7b$export$a1efd7fc3e986367 = v; });
$parcel$export(module.exports, "sum32_5", function () { return $5a1efe64814a8c7b$export$bbfea4a2b5abaab4; }, function (v) { return $5a1efe64814a8c7b$export$bbfea4a2b5abaab4 = v; });
$parcel$export(module.exports, "sum64", function () { return $5a1efe64814a8c7b$export$97ad4afc7de86152; }, function (v) { return $5a1efe64814a8c7b$export$97ad4afc7de86152 = v; });
$parcel$export(module.exports, "sum64_hi", function () { return $5a1efe64814a8c7b$export$ce4673d9a79f6a4b; }, function (v) { return $5a1efe64814a8c7b$export$ce4673d9a79f6a4b = v; });
$parcel$export(module.exports, "sum64_lo", function () { return $5a1efe64814a8c7b$export$786cc99fc6eedc0b; }, function (v) { return $5a1efe64814a8c7b$export$786cc99fc6eedc0b = v; });
$parcel$export(module.exports, "sum64_4_hi", function () { return $5a1efe64814a8c7b$export$45c59b9a1848dd0; }, function (v) { return $5a1efe64814a8c7b$export$45c59b9a1848dd0 = v; });
$parcel$export(module.exports, "sum64_4_lo", function () { return $5a1efe64814a8c7b$export$50d8f613e76d3034; }, function (v) { return $5a1efe64814a8c7b$export$50d8f613e76d3034 = v; });
$parcel$export(module.exports, "sum64_5_hi", function () { return $5a1efe64814a8c7b$export$b8e83683c60ee162; }, function (v) { return $5a1efe64814a8c7b$export$b8e83683c60ee162 = v; });
$parcel$export(module.exports, "sum64_5_lo", function () { return $5a1efe64814a8c7b$export$aeeb51790d1bcc4a; }, function (v) { return $5a1efe64814a8c7b$export$aeeb51790d1bcc4a = v; });
$parcel$export(module.exports, "rotr64_hi", function () { return $5a1efe64814a8c7b$export$bb7c616f719ad9c; }, function (v) { return $5a1efe64814a8c7b$export$bb7c616f719ad9c = v; });
$parcel$export(module.exports, "rotr64_lo", function () { return $5a1efe64814a8c7b$export$4d63290824f9d7df; }, function (v) { return $5a1efe64814a8c7b$export$4d63290824f9d7df = v; });
$parcel$export(module.exports, "shr64_hi", function () { return $5a1efe64814a8c7b$export$2f64ceb90ef28ea1; }, function (v) { return $5a1efe64814a8c7b$export$2f64ceb90ef28ea1 = v; });
$parcel$export(module.exports, "shr64_lo", function () { return $5a1efe64814a8c7b$export$8d2089d465f6d10d; }, function (v) { return $5a1efe64814a8c7b$export$8d2089d465f6d10d = v; });
var $5a1efe64814a8c7b$export$69f1b2dcda23c5f8;
var $5a1efe64814a8c7b$export$45b10814cc054894;
var $5a1efe64814a8c7b$export$7ea66e3774a60b67;
var $5a1efe64814a8c7b$export$34a52f00f601f6f1;
var $5a1efe64814a8c7b$export$812b0cbd5e8a72ab;
var $5a1efe64814a8c7b$export$f24f9e11d63bb314;
var $5a1efe64814a8c7b$export$b71357c7e07ca1f1;
var $5a1efe64814a8c7b$export$2e58a4b541fdcbe8;
var $5a1efe64814a8c7b$export$183b950bde9faab8;
var $5a1efe64814a8c7b$export$4785c77169fea59e;
var $5a1efe64814a8c7b$export$242a185dfcffac5b;
var $5a1efe64814a8c7b$export$58c04ae0ae31877d;
var $5a1efe64814a8c7b$export$d058ca695f8c6f11;
var $5a1efe64814a8c7b$export$a1efd7fc3e986367;
var $5a1efe64814a8c7b$export$bbfea4a2b5abaab4;
var $5a1efe64814a8c7b$export$97ad4afc7de86152;
var $5a1efe64814a8c7b$export$ce4673d9a79f6a4b;
var $5a1efe64814a8c7b$export$786cc99fc6eedc0b;
var $5a1efe64814a8c7b$export$45c59b9a1848dd0;
var $5a1efe64814a8c7b$export$50d8f613e76d3034;
var $5a1efe64814a8c7b$export$b8e83683c60ee162;
var $5a1efe64814a8c7b$export$aeeb51790d1bcc4a;
var $5a1efe64814a8c7b$export$bb7c616f719ad9c;
var $5a1efe64814a8c7b$export$4d63290824f9d7df;
var $5a1efe64814a8c7b$export$2f64ceb90ef28ea1;
var $5a1efe64814a8c7b$export$8d2089d465f6d10d;
'use strict';

var $dN0Q4 = parcelRequire("dN0Q4");

var $baEok = parcelRequire("baEok");
$5a1efe64814a8c7b$export$69f1b2dcda23c5f8 = $baEok;
function $5a1efe64814a8c7b$var$isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function $5a1efe64814a8c7b$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if ($5a1efe64814a8c7b$var$isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
$5a1efe64814a8c7b$export$45b10814cc054894 = $5a1efe64814a8c7b$var$toArray;
function $5a1efe64814a8c7b$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $5a1efe64814a8c7b$var$zero2(msg[i].toString(16));
    return res;
}
$5a1efe64814a8c7b$export$7ea66e3774a60b67 = $5a1efe64814a8c7b$var$toHex;
function $5a1efe64814a8c7b$var$htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
$5a1efe64814a8c7b$export$34a52f00f601f6f1 = $5a1efe64814a8c7b$var$htonl;
function $5a1efe64814a8c7b$var$toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = $5a1efe64814a8c7b$var$htonl(w);
        res += $5a1efe64814a8c7b$var$zero8(w.toString(16));
    }
    return res;
}
$5a1efe64814a8c7b$export$812b0cbd5e8a72ab = $5a1efe64814a8c7b$var$toHex32;
function $5a1efe64814a8c7b$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$5a1efe64814a8c7b$export$f24f9e11d63bb314 = $5a1efe64814a8c7b$var$zero2;
function $5a1efe64814a8c7b$var$zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
$5a1efe64814a8c7b$export$b71357c7e07ca1f1 = $5a1efe64814a8c7b$var$zero8;
function $5a1efe64814a8c7b$var$join32(msg, start, end, endian) {
    var len = end - start;
    $dN0Q4(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
$5a1efe64814a8c7b$export$2e58a4b541fdcbe8 = $5a1efe64814a8c7b$var$join32;
function $5a1efe64814a8c7b$var$split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
$5a1efe64814a8c7b$export$183b950bde9faab8 = $5a1efe64814a8c7b$var$split32;
function $5a1efe64814a8c7b$var$rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
$5a1efe64814a8c7b$export$4785c77169fea59e = $5a1efe64814a8c7b$var$rotr32;
function $5a1efe64814a8c7b$var$rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
$5a1efe64814a8c7b$export$242a185dfcffac5b = $5a1efe64814a8c7b$var$rotl32;
function $5a1efe64814a8c7b$var$sum32(a, b) {
    return a + b >>> 0;
}
$5a1efe64814a8c7b$export$58c04ae0ae31877d = $5a1efe64814a8c7b$var$sum32;
function $5a1efe64814a8c7b$var$sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
$5a1efe64814a8c7b$export$d058ca695f8c6f11 = $5a1efe64814a8c7b$var$sum32_3;
function $5a1efe64814a8c7b$var$sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
$5a1efe64814a8c7b$export$a1efd7fc3e986367 = $5a1efe64814a8c7b$var$sum32_4;
function $5a1efe64814a8c7b$var$sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
$5a1efe64814a8c7b$export$bbfea4a2b5abaab4 = $5a1efe64814a8c7b$var$sum32_5;
function $5a1efe64814a8c7b$var$sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
$5a1efe64814a8c7b$export$97ad4afc7de86152 = $5a1efe64814a8c7b$var$sum64;
function $5a1efe64814a8c7b$var$sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
$5a1efe64814a8c7b$export$ce4673d9a79f6a4b = $5a1efe64814a8c7b$var$sum64_hi;
function $5a1efe64814a8c7b$var$sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
$5a1efe64814a8c7b$export$786cc99fc6eedc0b = $5a1efe64814a8c7b$var$sum64_lo;
function $5a1efe64814a8c7b$var$sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
$5a1efe64814a8c7b$export$45c59b9a1848dd0 = $5a1efe64814a8c7b$var$sum64_4_hi;
function $5a1efe64814a8c7b$var$sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
$5a1efe64814a8c7b$export$50d8f613e76d3034 = $5a1efe64814a8c7b$var$sum64_4_lo;
function $5a1efe64814a8c7b$var$sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
$5a1efe64814a8c7b$export$b8e83683c60ee162 = $5a1efe64814a8c7b$var$sum64_5_hi;
function $5a1efe64814a8c7b$var$sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
$5a1efe64814a8c7b$export$aeeb51790d1bcc4a = $5a1efe64814a8c7b$var$sum64_5_lo;
function $5a1efe64814a8c7b$var$rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
$5a1efe64814a8c7b$export$bb7c616f719ad9c = $5a1efe64814a8c7b$var$rotr64_hi;
function $5a1efe64814a8c7b$var$rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$5a1efe64814a8c7b$export$4d63290824f9d7df = $5a1efe64814a8c7b$var$rotr64_lo;
function $5a1efe64814a8c7b$var$shr64_hi(ah, al, num) {
    return ah >>> num;
}
$5a1efe64814a8c7b$export$2f64ceb90ef28ea1 = $5a1efe64814a8c7b$var$shr64_hi;
function $5a1efe64814a8c7b$var$shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$5a1efe64814a8c7b$export$8d2089d465f6d10d = $5a1efe64814a8c7b$var$shr64_lo;

});

parcelRequire.register("ab6am", function(module, exports) {

$parcel$export(module.exports, "BlockHash", function () { return $768fb6ec7fd9dee2$export$8687658379b577e6; }, function (v) { return $768fb6ec7fd9dee2$export$8687658379b577e6 = v; });
var $768fb6ec7fd9dee2$export$8687658379b577e6;
'use strict';

var $7JIad = parcelRequire("7JIad");

var $dN0Q4 = parcelRequire("dN0Q4");
function $768fb6ec7fd9dee2$var$BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
$768fb6ec7fd9dee2$export$8687658379b577e6 = $768fb6ec7fd9dee2$var$BlockHash;
$768fb6ec7fd9dee2$var$BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = $7JIad.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = $7JIad.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
$768fb6ec7fd9dee2$var$BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    $dN0Q4(this.pending === null);
    return this._digest(enc);
};
$768fb6ec7fd9dee2$var$BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

});

parcelRequire.register("bmHbt", function(module, exports) {

$parcel$export(module.exports, "sha1", function () { return $84633f39a729bcd2$export$5091bdda49ba90f5; }, function (v) { return $84633f39a729bcd2$export$5091bdda49ba90f5 = v; });
$parcel$export(module.exports, "sha224", function () { return $84633f39a729bcd2$export$97b70509d4e397ea; }, function (v) { return $84633f39a729bcd2$export$97b70509d4e397ea = v; });
$parcel$export(module.exports, "sha256", function () { return $84633f39a729bcd2$export$bced8d2aada2d1c9; }, function (v) { return $84633f39a729bcd2$export$bced8d2aada2d1c9 = v; });
$parcel$export(module.exports, "sha384", function () { return $84633f39a729bcd2$export$612d47d55dedde45; }, function (v) { return $84633f39a729bcd2$export$612d47d55dedde45 = v; });
$parcel$export(module.exports, "sha512", function () { return $84633f39a729bcd2$export$a888d2532e6dc7bb; }, function (v) { return $84633f39a729bcd2$export$a888d2532e6dc7bb = v; });
var $84633f39a729bcd2$export$5091bdda49ba90f5;
var $84633f39a729bcd2$export$97b70509d4e397ea;
var $84633f39a729bcd2$export$bced8d2aada2d1c9;
var $84633f39a729bcd2$export$612d47d55dedde45;
var $84633f39a729bcd2$export$a888d2532e6dc7bb;
'use strict';

$84633f39a729bcd2$export$5091bdda49ba90f5 = (parcelRequire("6HzRz"));

$84633f39a729bcd2$export$97b70509d4e397ea = (parcelRequire("kd2Qw"));

$84633f39a729bcd2$export$bced8d2aada2d1c9 = (parcelRequire("gCSsQ"));

$84633f39a729bcd2$export$612d47d55dedde45 = (parcelRequire("aUDnG"));

$84633f39a729bcd2$export$a888d2532e6dc7bb = (parcelRequire("cA7O6"));

});
parcelRequire.register("6HzRz", function(module, exports) {
'use strict';

var $7JIad = parcelRequire("7JIad");

var $ab6am = parcelRequire("ab6am");

var $dkUcc = parcelRequire("dkUcc");
var $4e1293e644c7cf96$var$rotl32 = $7JIad.rotl32;
var $4e1293e644c7cf96$var$sum32 = $7JIad.sum32;
var $4e1293e644c7cf96$var$sum32_5 = $7JIad.sum32_5;
var $4e1293e644c7cf96$var$ft_1 = $dkUcc.ft_1;
var $4e1293e644c7cf96$var$BlockHash = $ab6am.BlockHash;
var $4e1293e644c7cf96$var$sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function $4e1293e644c7cf96$var$SHA1() {
    if (!(this instanceof $4e1293e644c7cf96$var$SHA1)) return new $4e1293e644c7cf96$var$SHA1();
    $4e1293e644c7cf96$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
$7JIad.inherits($4e1293e644c7cf96$var$SHA1, $4e1293e644c7cf96$var$BlockHash);
module.exports = $4e1293e644c7cf96$var$SHA1;
$4e1293e644c7cf96$var$SHA1.blockSize = 512;
$4e1293e644c7cf96$var$SHA1.outSize = 160;
$4e1293e644c7cf96$var$SHA1.hmacStrength = 80;
$4e1293e644c7cf96$var$SHA1.padLength = 64;
$4e1293e644c7cf96$var$SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $4e1293e644c7cf96$var$rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = $4e1293e644c7cf96$var$sum32_5($4e1293e644c7cf96$var$rotl32(a, 5), $4e1293e644c7cf96$var$ft_1(s, b, c, d), e, W[i], $4e1293e644c7cf96$var$sha1_K[s]);
        e = d;
        d = c;
        c = $4e1293e644c7cf96$var$rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = $4e1293e644c7cf96$var$sum32(this.h[0], a);
    this.h[1] = $4e1293e644c7cf96$var$sum32(this.h[1], b);
    this.h[2] = $4e1293e644c7cf96$var$sum32(this.h[2], c);
    this.h[3] = $4e1293e644c7cf96$var$sum32(this.h[3], d);
    this.h[4] = $4e1293e644c7cf96$var$sum32(this.h[4], e);
};
$4e1293e644c7cf96$var$SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $7JIad.toHex32(this.h, 'big');
    else return $7JIad.split32(this.h, 'big');
};

});
parcelRequire.register("dkUcc", function(module, exports) {

$parcel$export(module.exports, "ft_1", function () { return $9b58bbef1b9ccccd$export$5a92649d7ddb9f63; }, function (v) { return $9b58bbef1b9ccccd$export$5a92649d7ddb9f63 = v; });
$parcel$export(module.exports, "ch32", function () { return $9b58bbef1b9ccccd$export$c6d0d020c3a6269; }, function (v) { return $9b58bbef1b9ccccd$export$c6d0d020c3a6269 = v; });
$parcel$export(module.exports, "maj32", function () { return $9b58bbef1b9ccccd$export$eb90c27fca05f956; }, function (v) { return $9b58bbef1b9ccccd$export$eb90c27fca05f956 = v; });
$parcel$export(module.exports, "s0_256", function () { return $9b58bbef1b9ccccd$export$14a4a98e063b1999; }, function (v) { return $9b58bbef1b9ccccd$export$14a4a98e063b1999 = v; });
$parcel$export(module.exports, "s1_256", function () { return $9b58bbef1b9ccccd$export$d20cecfa1564c686; }, function (v) { return $9b58bbef1b9ccccd$export$d20cecfa1564c686 = v; });
$parcel$export(module.exports, "g0_256", function () { return $9b58bbef1b9ccccd$export$44fd472a12fc6db; }, function (v) { return $9b58bbef1b9ccccd$export$44fd472a12fc6db = v; });
$parcel$export(module.exports, "g1_256", function () { return $9b58bbef1b9ccccd$export$1ed238bb6ea1dd47; }, function (v) { return $9b58bbef1b9ccccd$export$1ed238bb6ea1dd47 = v; });
var $9b58bbef1b9ccccd$export$5a92649d7ddb9f63;
var $9b58bbef1b9ccccd$export$c6d0d020c3a6269;
var $9b58bbef1b9ccccd$export$eb90c27fca05f956;
var $9b58bbef1b9ccccd$export$cc992891a14496a1;
var $9b58bbef1b9ccccd$export$14a4a98e063b1999;
var $9b58bbef1b9ccccd$export$d20cecfa1564c686;
var $9b58bbef1b9ccccd$export$44fd472a12fc6db;
var $9b58bbef1b9ccccd$export$1ed238bb6ea1dd47;
'use strict';

var $7JIad = parcelRequire("7JIad");
var $9b58bbef1b9ccccd$var$rotr32 = $7JIad.rotr32;
function $9b58bbef1b9ccccd$var$ft_1(s, x, y, z) {
    if (s === 0) return $9b58bbef1b9ccccd$var$ch32(x, y, z);
    if (s === 1 || s === 3) return $9b58bbef1b9ccccd$var$p32(x, y, z);
    if (s === 2) return $9b58bbef1b9ccccd$var$maj32(x, y, z);
}
$9b58bbef1b9ccccd$export$5a92649d7ddb9f63 = $9b58bbef1b9ccccd$var$ft_1;
function $9b58bbef1b9ccccd$var$ch32(x, y, z) {
    return x & y ^ ~x & z;
}
$9b58bbef1b9ccccd$export$c6d0d020c3a6269 = $9b58bbef1b9ccccd$var$ch32;
function $9b58bbef1b9ccccd$var$maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
$9b58bbef1b9ccccd$export$eb90c27fca05f956 = $9b58bbef1b9ccccd$var$maj32;
function $9b58bbef1b9ccccd$var$p32(x, y, z) {
    return x ^ y ^ z;
}
$9b58bbef1b9ccccd$export$cc992891a14496a1 = $9b58bbef1b9ccccd$var$p32;
function $9b58bbef1b9ccccd$var$s0_256(x) {
    return $9b58bbef1b9ccccd$var$rotr32(x, 2) ^ $9b58bbef1b9ccccd$var$rotr32(x, 13) ^ $9b58bbef1b9ccccd$var$rotr32(x, 22);
}
$9b58bbef1b9ccccd$export$14a4a98e063b1999 = $9b58bbef1b9ccccd$var$s0_256;
function $9b58bbef1b9ccccd$var$s1_256(x) {
    return $9b58bbef1b9ccccd$var$rotr32(x, 6) ^ $9b58bbef1b9ccccd$var$rotr32(x, 11) ^ $9b58bbef1b9ccccd$var$rotr32(x, 25);
}
$9b58bbef1b9ccccd$export$d20cecfa1564c686 = $9b58bbef1b9ccccd$var$s1_256;
function $9b58bbef1b9ccccd$var$g0_256(x) {
    return $9b58bbef1b9ccccd$var$rotr32(x, 7) ^ $9b58bbef1b9ccccd$var$rotr32(x, 18) ^ x >>> 3;
}
$9b58bbef1b9ccccd$export$44fd472a12fc6db = $9b58bbef1b9ccccd$var$g0_256;
function $9b58bbef1b9ccccd$var$g1_256(x) {
    return $9b58bbef1b9ccccd$var$rotr32(x, 17) ^ $9b58bbef1b9ccccd$var$rotr32(x, 19) ^ x >>> 10;
}
$9b58bbef1b9ccccd$export$1ed238bb6ea1dd47 = $9b58bbef1b9ccccd$var$g1_256;

});


parcelRequire.register("kd2Qw", function(module, exports) {
'use strict';

var $7JIad = parcelRequire("7JIad");

var $gCSsQ = parcelRequire("gCSsQ");
function $eb673ac053c71d62$var$SHA224() {
    if (!(this instanceof $eb673ac053c71d62$var$SHA224)) return new $eb673ac053c71d62$var$SHA224();
    $gCSsQ.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
$7JIad.inherits($eb673ac053c71d62$var$SHA224, $gCSsQ);
module.exports = $eb673ac053c71d62$var$SHA224;
$eb673ac053c71d62$var$SHA224.blockSize = 512;
$eb673ac053c71d62$var$SHA224.outSize = 224;
$eb673ac053c71d62$var$SHA224.hmacStrength = 192;
$eb673ac053c71d62$var$SHA224.padLength = 64;
$eb673ac053c71d62$var$SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return $7JIad.toHex32(this.h.slice(0, 7), 'big');
    else return $7JIad.split32(this.h.slice(0, 7), 'big');
};

});
parcelRequire.register("gCSsQ", function(module, exports) {
'use strict';

var $7JIad = parcelRequire("7JIad");

var $ab6am = parcelRequire("ab6am");

var $dkUcc = parcelRequire("dkUcc");

var $dN0Q4 = parcelRequire("dN0Q4");
var $c1aa716abf2b7af1$var$sum32 = $7JIad.sum32;
var $c1aa716abf2b7af1$var$sum32_4 = $7JIad.sum32_4;
var $c1aa716abf2b7af1$var$sum32_5 = $7JIad.sum32_5;
var $c1aa716abf2b7af1$var$ch32 = $dkUcc.ch32;
var $c1aa716abf2b7af1$var$maj32 = $dkUcc.maj32;
var $c1aa716abf2b7af1$var$s0_256 = $dkUcc.s0_256;
var $c1aa716abf2b7af1$var$s1_256 = $dkUcc.s1_256;
var $c1aa716abf2b7af1$var$g0_256 = $dkUcc.g0_256;
var $c1aa716abf2b7af1$var$g1_256 = $dkUcc.g1_256;
var $c1aa716abf2b7af1$var$BlockHash = $ab6am.BlockHash;
var $c1aa716abf2b7af1$var$sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function $c1aa716abf2b7af1$var$SHA256() {
    if (!(this instanceof $c1aa716abf2b7af1$var$SHA256)) return new $c1aa716abf2b7af1$var$SHA256();
    $c1aa716abf2b7af1$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = $c1aa716abf2b7af1$var$sha256_K;
    this.W = new Array(64);
}
$7JIad.inherits($c1aa716abf2b7af1$var$SHA256, $c1aa716abf2b7af1$var$BlockHash);
module.exports = $c1aa716abf2b7af1$var$SHA256;
$c1aa716abf2b7af1$var$SHA256.blockSize = 512;
$c1aa716abf2b7af1$var$SHA256.outSize = 256;
$c1aa716abf2b7af1$var$SHA256.hmacStrength = 192;
$c1aa716abf2b7af1$var$SHA256.padLength = 64;
$c1aa716abf2b7af1$var$SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $c1aa716abf2b7af1$var$sum32_4($c1aa716abf2b7af1$var$g1_256(W[i - 2]), W[i - 7], $c1aa716abf2b7af1$var$g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    $dN0Q4(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = $c1aa716abf2b7af1$var$sum32_5(h, $c1aa716abf2b7af1$var$s1_256(e), $c1aa716abf2b7af1$var$ch32(e, f, g), this.k[i], W[i]);
        var T2 = $c1aa716abf2b7af1$var$sum32($c1aa716abf2b7af1$var$s0_256(a), $c1aa716abf2b7af1$var$maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = $c1aa716abf2b7af1$var$sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = $c1aa716abf2b7af1$var$sum32(T1, T2);
    }
    this.h[0] = $c1aa716abf2b7af1$var$sum32(this.h[0], a);
    this.h[1] = $c1aa716abf2b7af1$var$sum32(this.h[1], b);
    this.h[2] = $c1aa716abf2b7af1$var$sum32(this.h[2], c);
    this.h[3] = $c1aa716abf2b7af1$var$sum32(this.h[3], d);
    this.h[4] = $c1aa716abf2b7af1$var$sum32(this.h[4], e);
    this.h[5] = $c1aa716abf2b7af1$var$sum32(this.h[5], f);
    this.h[6] = $c1aa716abf2b7af1$var$sum32(this.h[6], g);
    this.h[7] = $c1aa716abf2b7af1$var$sum32(this.h[7], h);
};
$c1aa716abf2b7af1$var$SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $7JIad.toHex32(this.h, 'big');
    else return $7JIad.split32(this.h, 'big');
};

});


parcelRequire.register("aUDnG", function(module, exports) {
'use strict';

var $7JIad = parcelRequire("7JIad");

var $cA7O6 = parcelRequire("cA7O6");
function $7f1dae9734e6698d$var$SHA384() {
    if (!(this instanceof $7f1dae9734e6698d$var$SHA384)) return new $7f1dae9734e6698d$var$SHA384();
    $cA7O6.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
$7JIad.inherits($7f1dae9734e6698d$var$SHA384, $cA7O6);
module.exports = $7f1dae9734e6698d$var$SHA384;
$7f1dae9734e6698d$var$SHA384.blockSize = 1024;
$7f1dae9734e6698d$var$SHA384.outSize = 384;
$7f1dae9734e6698d$var$SHA384.hmacStrength = 192;
$7f1dae9734e6698d$var$SHA384.padLength = 128;
$7f1dae9734e6698d$var$SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $7JIad.toHex32(this.h.slice(0, 12), 'big');
    else return $7JIad.split32(this.h.slice(0, 12), 'big');
};

});
parcelRequire.register("cA7O6", function(module, exports) {
'use strict';

var $7JIad = parcelRequire("7JIad");

var $ab6am = parcelRequire("ab6am");

var $dN0Q4 = parcelRequire("dN0Q4");
var $928ee72dcabd90e3$var$rotr64_hi = $7JIad.rotr64_hi;
var $928ee72dcabd90e3$var$rotr64_lo = $7JIad.rotr64_lo;
var $928ee72dcabd90e3$var$shr64_hi = $7JIad.shr64_hi;
var $928ee72dcabd90e3$var$shr64_lo = $7JIad.shr64_lo;
var $928ee72dcabd90e3$var$sum64 = $7JIad.sum64;
var $928ee72dcabd90e3$var$sum64_hi = $7JIad.sum64_hi;
var $928ee72dcabd90e3$var$sum64_lo = $7JIad.sum64_lo;
var $928ee72dcabd90e3$var$sum64_4_hi = $7JIad.sum64_4_hi;
var $928ee72dcabd90e3$var$sum64_4_lo = $7JIad.sum64_4_lo;
var $928ee72dcabd90e3$var$sum64_5_hi = $7JIad.sum64_5_hi;
var $928ee72dcabd90e3$var$sum64_5_lo = $7JIad.sum64_5_lo;
var $928ee72dcabd90e3$var$BlockHash = $ab6am.BlockHash;
var $928ee72dcabd90e3$var$sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function $928ee72dcabd90e3$var$SHA512() {
    if (!(this instanceof $928ee72dcabd90e3$var$SHA512)) return new $928ee72dcabd90e3$var$SHA512();
    $928ee72dcabd90e3$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = $928ee72dcabd90e3$var$sha512_K;
    this.W = new Array(160);
}
$7JIad.inherits($928ee72dcabd90e3$var$SHA512, $928ee72dcabd90e3$var$BlockHash);
module.exports = $928ee72dcabd90e3$var$SHA512;
$928ee72dcabd90e3$var$SHA512.blockSize = 1024;
$928ee72dcabd90e3$var$SHA512.outSize = 512;
$928ee72dcabd90e3$var$SHA512.hmacStrength = 192;
$928ee72dcabd90e3$var$SHA512.padLength = 128;
$928ee72dcabd90e3$var$SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = $928ee72dcabd90e3$var$g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = $928ee72dcabd90e3$var$g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = $928ee72dcabd90e3$var$g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = $928ee72dcabd90e3$var$g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = $928ee72dcabd90e3$var$sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = $928ee72dcabd90e3$var$sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
$928ee72dcabd90e3$var$SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    $dN0Q4(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = $928ee72dcabd90e3$var$s1_512_hi(eh, el);
        var c1_lo = $928ee72dcabd90e3$var$s1_512_lo(eh, el);
        var c2_hi = $928ee72dcabd90e3$var$ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = $928ee72dcabd90e3$var$ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = $928ee72dcabd90e3$var$sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = $928ee72dcabd90e3$var$sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = $928ee72dcabd90e3$var$s0_512_hi(ah, al);
        c0_lo = $928ee72dcabd90e3$var$s0_512_lo(ah, al);
        c1_hi = $928ee72dcabd90e3$var$maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = $928ee72dcabd90e3$var$maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = $928ee72dcabd90e3$var$sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = $928ee72dcabd90e3$var$sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = $928ee72dcabd90e3$var$sum64_hi(dh, dl, T1_hi, T1_lo);
        el = $928ee72dcabd90e3$var$sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = $928ee72dcabd90e3$var$sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = $928ee72dcabd90e3$var$sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    $928ee72dcabd90e3$var$sum64(this.h, 0, ah, al);
    $928ee72dcabd90e3$var$sum64(this.h, 2, bh, bl);
    $928ee72dcabd90e3$var$sum64(this.h, 4, ch, cl);
    $928ee72dcabd90e3$var$sum64(this.h, 6, dh, dl);
    $928ee72dcabd90e3$var$sum64(this.h, 8, eh, el);
    $928ee72dcabd90e3$var$sum64(this.h, 10, fh, fl);
    $928ee72dcabd90e3$var$sum64(this.h, 12, gh, gl);
    $928ee72dcabd90e3$var$sum64(this.h, 14, hh, hl);
};
$928ee72dcabd90e3$var$SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $7JIad.toHex32(this.h, 'big');
    else return $7JIad.split32(this.h, 'big');
};
function $928ee72dcabd90e3$var$ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$s0_512_hi(xh, xl) {
    var c0_hi = $928ee72dcabd90e3$var$rotr64_hi(xh, xl, 28);
    var c1_hi = $928ee72dcabd90e3$var$rotr64_hi(xl, xh, 2); // 34
    var c2_hi = $928ee72dcabd90e3$var$rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$s0_512_lo(xh, xl) {
    var c0_lo = $928ee72dcabd90e3$var$rotr64_lo(xh, xl, 28);
    var c1_lo = $928ee72dcabd90e3$var$rotr64_lo(xl, xh, 2); // 34
    var c2_lo = $928ee72dcabd90e3$var$rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$s1_512_hi(xh, xl) {
    var c0_hi = $928ee72dcabd90e3$var$rotr64_hi(xh, xl, 14);
    var c1_hi = $928ee72dcabd90e3$var$rotr64_hi(xh, xl, 18);
    var c2_hi = $928ee72dcabd90e3$var$rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$s1_512_lo(xh, xl) {
    var c0_lo = $928ee72dcabd90e3$var$rotr64_lo(xh, xl, 14);
    var c1_lo = $928ee72dcabd90e3$var$rotr64_lo(xh, xl, 18);
    var c2_lo = $928ee72dcabd90e3$var$rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$g0_512_hi(xh, xl) {
    var c0_hi = $928ee72dcabd90e3$var$rotr64_hi(xh, xl, 1);
    var c1_hi = $928ee72dcabd90e3$var$rotr64_hi(xh, xl, 8);
    var c2_hi = $928ee72dcabd90e3$var$shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$g0_512_lo(xh, xl) {
    var c0_lo = $928ee72dcabd90e3$var$rotr64_lo(xh, xl, 1);
    var c1_lo = $928ee72dcabd90e3$var$rotr64_lo(xh, xl, 8);
    var c2_lo = $928ee72dcabd90e3$var$shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$g1_512_hi(xh, xl) {
    var c0_hi = $928ee72dcabd90e3$var$rotr64_hi(xh, xl, 19);
    var c1_hi = $928ee72dcabd90e3$var$rotr64_hi(xl, xh, 29); // 61
    var c2_hi = $928ee72dcabd90e3$var$shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $928ee72dcabd90e3$var$g1_512_lo(xh, xl) {
    var c0_lo = $928ee72dcabd90e3$var$rotr64_lo(xh, xl, 19);
    var c1_lo = $928ee72dcabd90e3$var$rotr64_lo(xl, xh, 29); // 61
    var c2_lo = $928ee72dcabd90e3$var$shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

});



parcelRequire.register("idr5w", function(module, exports) {

$parcel$export(module.exports, "ripemd160", function () { return $d42e74058f4ca7d4$export$d1cea0ee4e3f0d3e; }, function (v) { return $d42e74058f4ca7d4$export$d1cea0ee4e3f0d3e = v; });
var $d42e74058f4ca7d4$export$d1cea0ee4e3f0d3e;
'use strict';

var $7JIad = parcelRequire("7JIad");

var $ab6am = parcelRequire("ab6am");
var $d42e74058f4ca7d4$var$rotl32 = $7JIad.rotl32;
var $d42e74058f4ca7d4$var$sum32 = $7JIad.sum32;
var $d42e74058f4ca7d4$var$sum32_3 = $7JIad.sum32_3;
var $d42e74058f4ca7d4$var$sum32_4 = $7JIad.sum32_4;
var $d42e74058f4ca7d4$var$BlockHash = $ab6am.BlockHash;
function $d42e74058f4ca7d4$var$RIPEMD160() {
    if (!(this instanceof $d42e74058f4ca7d4$var$RIPEMD160)) return new $d42e74058f4ca7d4$var$RIPEMD160();
    $d42e74058f4ca7d4$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = 'little';
}
$7JIad.inherits($d42e74058f4ca7d4$var$RIPEMD160, $d42e74058f4ca7d4$var$BlockHash);
$d42e74058f4ca7d4$export$d1cea0ee4e3f0d3e = $d42e74058f4ca7d4$var$RIPEMD160;
$d42e74058f4ca7d4$var$RIPEMD160.blockSize = 512;
$d42e74058f4ca7d4$var$RIPEMD160.outSize = 160;
$d42e74058f4ca7d4$var$RIPEMD160.hmacStrength = 192;
$d42e74058f4ca7d4$var$RIPEMD160.padLength = 64;
$d42e74058f4ca7d4$var$RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = $d42e74058f4ca7d4$var$sum32($d42e74058f4ca7d4$var$rotl32($d42e74058f4ca7d4$var$sum32_4(A, $d42e74058f4ca7d4$var$f(j, B, C, D), msg[$d42e74058f4ca7d4$var$r[j] + start], $d42e74058f4ca7d4$var$K(j)), $d42e74058f4ca7d4$var$s[j]), E);
        A = E;
        E = D;
        D = $d42e74058f4ca7d4$var$rotl32(C, 10);
        C = B;
        B = T;
        T = $d42e74058f4ca7d4$var$sum32($d42e74058f4ca7d4$var$rotl32($d42e74058f4ca7d4$var$sum32_4(Ah, $d42e74058f4ca7d4$var$f(79 - j, Bh, Ch, Dh), msg[$d42e74058f4ca7d4$var$rh[j] + start], $d42e74058f4ca7d4$var$Kh(j)), $d42e74058f4ca7d4$var$sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = $d42e74058f4ca7d4$var$rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = $d42e74058f4ca7d4$var$sum32_3(this.h[1], C, Dh);
    this.h[1] = $d42e74058f4ca7d4$var$sum32_3(this.h[2], D, Eh);
    this.h[2] = $d42e74058f4ca7d4$var$sum32_3(this.h[3], E, Ah);
    this.h[3] = $d42e74058f4ca7d4$var$sum32_3(this.h[4], A, Bh);
    this.h[4] = $d42e74058f4ca7d4$var$sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
$d42e74058f4ca7d4$var$RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $7JIad.toHex32(this.h, 'little');
    else return $7JIad.split32(this.h, 'little');
};
function $d42e74058f4ca7d4$var$f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function $d42e74058f4ca7d4$var$K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function $d42e74058f4ca7d4$var$Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var $d42e74058f4ca7d4$var$r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $d42e74058f4ca7d4$var$rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $d42e74058f4ca7d4$var$s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $d42e74058f4ca7d4$var$sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

});

parcelRequire.register("hR5UO", function(module, exports) {
'use strict';

var $7JIad = parcelRequire("7JIad");

var $dN0Q4 = parcelRequire("dN0Q4");
function $cffbf990bc42b2c6$var$Hmac(hash, key, enc) {
    if (!(this instanceof $cffbf990bc42b2c6$var$Hmac)) return new $cffbf990bc42b2c6$var$Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init($7JIad.toArray(key, enc));
}
module.exports = $cffbf990bc42b2c6$var$Hmac;
$cffbf990bc42b2c6$var$Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    $dN0Q4(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
$cffbf990bc42b2c6$var$Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
$cffbf990bc42b2c6$var$Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

});


parcelRequire.register("f3SJj", function(module, exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821', 
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf', 
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695', 
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9', 
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36', 
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f', 
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999', 
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09', 
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d', 
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088', 
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d', 
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8', 
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a', 
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453', 
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160', 
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0', 
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6', 
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589', 
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17', 
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda', 
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd', 
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2', 
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6', 
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f', 
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01', 
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3', 
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f', 
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7', 
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78', 
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1', 
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150', 
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82', 
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc', 
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b', 
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51', 
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45', 
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120', 
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84', 
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d', 
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d', 
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8', 
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8', 
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac', 
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f', 
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962', 
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907', 
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec', 
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d', 
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414', 
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd', 
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0', 
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811', 
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1', 
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c', 
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73', 
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd', 
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405', 
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589', 
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e', 
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27', 
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1', 
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482', 
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945', 
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573', 
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82', 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672', 
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6', 
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da', 
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37', 
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b', 
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81', 
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58', 
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77', 
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a', 
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c', 
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67', 
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402', 
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55', 
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482', 
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82', 
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396', 
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49', 
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf', 
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a', 
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7', 
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933', 
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a', 
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6', 
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37', 
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e', 
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6', 
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476', 
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40', 
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61', 
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683', 
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5', 
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b', 
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417', 
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868', 
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a', 
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6', 
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996', 
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e', 
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d', 
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2', 
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e', 
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437', 
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311', 
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4', 
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575', 
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d', 
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d', 
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629', 
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06', 
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374', 
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee', 
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1', 
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b', 
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661', 
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6', 
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e', 
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d', 
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc', 
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4', 
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c', 
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b', 
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913', 
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154', 
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865', 
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc', 
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224', 
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e', 
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6', 
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511', 
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b', 
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2', 
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c', 
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3', 
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d', 
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700', 
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4', 
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196', 
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4', 
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257', 
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13', 
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096', 
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38', 
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f', 
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448', 
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a', 
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4', 
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437', 
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7', 
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d', 
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a', 
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54', 
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77', 
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517', 
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10', 
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125', 
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e', 
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1', 
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2', 
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423', 
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8', 
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758', 
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375', 
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d', 
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec', 
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0', 
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c', 
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4', 
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f', 
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649', 
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826', 
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5', 
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87', 
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b', 
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc', 
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c', 
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f', 
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a', 
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46', 
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f', 
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03', 
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08', 
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8', 
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373', 
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3', 
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8', 
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1', 
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9', 
            ], 
        ]
    }
};

});


parcelRequire.register("70bli", function(module, exports) {
'use strict';

var $jBtqe = parcelRequire("jBtqe");

var $6X5ci = parcelRequire("6X5ci");

var $frLve = parcelRequire("frLve");

var $3J9Yr = parcelRequire("3J9Yr");

var $0dAuo = parcelRequire("0dAuo");
var $519154d9dc50807e$var$assert = $frLve.assert;

var $7sQNP = parcelRequire("7sQNP");

var $638Zq = parcelRequire("638Zq");
function $519154d9dc50807e$var$EC(options) {
    if (!(this instanceof $519154d9dc50807e$var$EC)) return new $519154d9dc50807e$var$EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        $519154d9dc50807e$var$assert(Object.prototype.hasOwnProperty.call($3J9Yr, options), 'Unknown curve ' + options);
        options = $3J9Yr[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof $3J9Yr.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = $519154d9dc50807e$var$EC;
$519154d9dc50807e$var$EC.prototype.keyPair = function keyPair(options) {
    return new $7sQNP(this, options);
};
$519154d9dc50807e$var$EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return $7sQNP.fromPrivate(this, priv, enc);
};
$519154d9dc50807e$var$EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return $7sQNP.fromPublic(this, pub, enc);
};
$519154d9dc50807e$var$EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new $6X5ci({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || $0dAuo(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new $jBtqe(2));
    for(;;){
        var priv = new $jBtqe(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
$519154d9dc50807e$var$EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
$519154d9dc50807e$var$EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new $jBtqe(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new $6X5ci({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new $jBtqe(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new $jBtqe(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new $638Zq({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
$519154d9dc50807e$var$EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new $jBtqe(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new $638Zq(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
$519154d9dc50807e$var$EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    $519154d9dc50807e$var$assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new $638Zq(signature, enc);
    var n = this.n;
    var e = new $jBtqe(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
$519154d9dc50807e$var$EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new $638Zq(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

});
parcelRequire.register("6X5ci", function(module, exports) {
'use strict';

var $hv5Fa = parcelRequire("hv5Fa");

var $3xppW = parcelRequire("3xppW");

var $dN0Q4 = parcelRequire("dN0Q4");
function $50fc48d35c5347a0$var$HmacDRBG(options) {
    if (!(this instanceof $50fc48d35c5347a0$var$HmacDRBG)) return new $50fc48d35c5347a0$var$HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = $3xppW.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = $3xppW.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = $3xppW.toArray(options.pers, options.persEnc || 'hex');
    $dN0Q4(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = $50fc48d35c5347a0$var$HmacDRBG;
$50fc48d35c5347a0$var$HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
$50fc48d35c5347a0$var$HmacDRBG.prototype._hmac = function hmac() {
    return new $hv5Fa.hmac(this.hash, this.K);
};
$50fc48d35c5347a0$var$HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
$50fc48d35c5347a0$var$HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = $3xppW.toArray(entropy, entropyEnc);
    add = $3xppW.toArray(add, addEnc);
    $dN0Q4(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
$50fc48d35c5347a0$var$HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = $3xppW.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return $3xppW.encode(res, enc);
};

});

parcelRequire.register("7sQNP", function(module, exports) {
'use strict';

var $jBtqe = parcelRequire("jBtqe");

var $frLve = parcelRequire("frLve");
var $56f41b6c5effc9ed$var$assert = $frLve.assert;
function $56f41b6c5effc9ed$var$KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = $56f41b6c5effc9ed$var$KeyPair;
$56f41b6c5effc9ed$var$KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof $56f41b6c5effc9ed$var$KeyPair) return pub;
    return new $56f41b6c5effc9ed$var$KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
$56f41b6c5effc9ed$var$KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof $56f41b6c5effc9ed$var$KeyPair) return priv;
    return new $56f41b6c5effc9ed$var$KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
$56f41b6c5effc9ed$var$KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
$56f41b6c5effc9ed$var$KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
$56f41b6c5effc9ed$var$KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
$56f41b6c5effc9ed$var$KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new $jBtqe(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
$56f41b6c5effc9ed$var$KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') $56f41b6c5effc9ed$var$assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') $56f41b6c5effc9ed$var$assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
$56f41b6c5effc9ed$var$KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) $56f41b6c5effc9ed$var$assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
$56f41b6c5effc9ed$var$KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
$56f41b6c5effc9ed$var$KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
$56f41b6c5effc9ed$var$KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

});

parcelRequire.register("638Zq", function(module, exports) {
'use strict';

var $jBtqe = parcelRequire("jBtqe");

var $frLve = parcelRequire("frLve");
var $4679ff0db22b6955$var$assert = $frLve.assert;
function $4679ff0db22b6955$var$Signature(options, enc) {
    if (options instanceof $4679ff0db22b6955$var$Signature) return options;
    if (this._importDER(options, enc)) return;
    $4679ff0db22b6955$var$assert(options.r && options.s, 'Signature without r or s');
    this.r = new $jBtqe(options.r, 16);
    this.s = new $jBtqe(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = $4679ff0db22b6955$var$Signature;
function $4679ff0db22b6955$var$Position() {
    this.place = 0;
}
function $4679ff0db22b6955$var$getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function $4679ff0db22b6955$var$rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
$4679ff0db22b6955$var$Signature.prototype._importDER = function _importDER(data, enc) {
    data = $frLve.toArray(data, enc);
    var p = new $4679ff0db22b6955$var$Position();
    if (data[p.place++] !== 0x30) return false;
    var len = $4679ff0db22b6955$var$getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = $4679ff0db22b6955$var$getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = $4679ff0db22b6955$var$getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new $jBtqe(r);
    this.s = new $jBtqe(s);
    this.recoveryParam = null;
    return true;
};
function $4679ff0db22b6955$var$constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
$4679ff0db22b6955$var$Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = $4679ff0db22b6955$var$rmPadding(r);
    s = $4679ff0db22b6955$var$rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    $4679ff0db22b6955$var$constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    $4679ff0db22b6955$var$constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    $4679ff0db22b6955$var$constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return $frLve.encode(res, enc);
};

});


parcelRequire.register("4tVTF", function(module, exports) {
'use strict';

var $hv5Fa = parcelRequire("hv5Fa");

var $3J9Yr = parcelRequire("3J9Yr");

var $frLve = parcelRequire("frLve");
var $3436c7fe3bb2577f$var$assert = $frLve.assert;
var $3436c7fe3bb2577f$var$parseBytes = $frLve.parseBytes;

var $hZoRa = parcelRequire("hZoRa");

var $ixIYD = parcelRequire("ixIYD");
function $3436c7fe3bb2577f$var$EDDSA(curve) {
    $3436c7fe3bb2577f$var$assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof $3436c7fe3bb2577f$var$EDDSA)) return new $3436c7fe3bb2577f$var$EDDSA(curve);
    curve = $3J9Yr[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = $hv5Fa.sha512;
}
module.exports = $3436c7fe3bb2577f$var$EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ $3436c7fe3bb2577f$var$EDDSA.prototype.sign = function sign(message, secret) {
    message = $3436c7fe3bb2577f$var$parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ $3436c7fe3bb2577f$var$EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = $3436c7fe3bb2577f$var$parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
$3436c7fe3bb2577f$var$EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return $frLve.intFromLE(hash.digest()).umod(this.curve.n);
};
$3436c7fe3bb2577f$var$EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return $hZoRa.fromPublic(this, pub);
};
$3436c7fe3bb2577f$var$EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return $hZoRa.fromSecret(this, secret);
};
$3436c7fe3bb2577f$var$EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof $ixIYD) return sig;
    return new $ixIYD(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ $3436c7fe3bb2577f$var$EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
$3436c7fe3bb2577f$var$EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = $frLve.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = $frLve.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
$3436c7fe3bb2577f$var$EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
$3436c7fe3bb2577f$var$EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return $frLve.intFromLE(bytes);
};
$3436c7fe3bb2577f$var$EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

});
parcelRequire.register("hZoRa", function(module, exports) {
'use strict';

var $frLve = parcelRequire("frLve");
var $d18b6a285efdac11$var$assert = $frLve.assert;
var $d18b6a285efdac11$var$parseBytes = $frLve.parseBytes;
var $d18b6a285efdac11$var$cachedProperty = $frLve.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function $d18b6a285efdac11$var$KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = $d18b6a285efdac11$var$parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = $d18b6a285efdac11$var$parseBytes(params.pub);
}
$d18b6a285efdac11$var$KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof $d18b6a285efdac11$var$KeyPair) return pub;
    return new $d18b6a285efdac11$var$KeyPair(eddsa, {
        pub: pub
    });
};
$d18b6a285efdac11$var$KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof $d18b6a285efdac11$var$KeyPair) return secret;
    return new $d18b6a285efdac11$var$KeyPair(eddsa, {
        secret: secret
    });
};
$d18b6a285efdac11$var$KeyPair.prototype.secret = function secret() {
    return this._secret;
};
$d18b6a285efdac11$var$cachedProperty($d18b6a285efdac11$var$KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
$d18b6a285efdac11$var$cachedProperty($d18b6a285efdac11$var$KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
$d18b6a285efdac11$var$cachedProperty($d18b6a285efdac11$var$KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
$d18b6a285efdac11$var$cachedProperty($d18b6a285efdac11$var$KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
$d18b6a285efdac11$var$cachedProperty($d18b6a285efdac11$var$KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
$d18b6a285efdac11$var$cachedProperty($d18b6a285efdac11$var$KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
$d18b6a285efdac11$var$KeyPair.prototype.sign = function sign(message) {
    $d18b6a285efdac11$var$assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
$d18b6a285efdac11$var$KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
$d18b6a285efdac11$var$KeyPair.prototype.getSecret = function getSecret(enc) {
    $d18b6a285efdac11$var$assert(this._secret, 'KeyPair is public only');
    return $frLve.encode(this.secret(), enc);
};
$d18b6a285efdac11$var$KeyPair.prototype.getPublic = function getPublic(enc) {
    return $frLve.encode(this.pubBytes(), enc);
};
module.exports = $d18b6a285efdac11$var$KeyPair;

});

parcelRequire.register("ixIYD", function(module, exports) {
'use strict';

var $jBtqe = parcelRequire("jBtqe");

var $frLve = parcelRequire("frLve");
var $037bd78656a24c6e$var$assert = $frLve.assert;
var $037bd78656a24c6e$var$cachedProperty = $frLve.cachedProperty;
var $037bd78656a24c6e$var$parseBytes = $frLve.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function $037bd78656a24c6e$var$Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = $037bd78656a24c6e$var$parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    $037bd78656a24c6e$var$assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof $jBtqe) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
$037bd78656a24c6e$var$cachedProperty($037bd78656a24c6e$var$Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
$037bd78656a24c6e$var$cachedProperty($037bd78656a24c6e$var$Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
$037bd78656a24c6e$var$cachedProperty($037bd78656a24c6e$var$Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
$037bd78656a24c6e$var$cachedProperty($037bd78656a24c6e$var$Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
$037bd78656a24c6e$var$Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
$037bd78656a24c6e$var$Signature.prototype.toHex = function toHex() {
    return $frLve.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = $037bd78656a24c6e$var$Signature;

});



parcelRequire.register("8NP2t", function(module, exports) {

var $h8RWs = parcelRequire("h8RWs");

var $f0e0R = parcelRequire("f0e0R");

var $bxCSe = parcelRequire("bxCSe");

var $jEWuG = parcelRequire("jEWuG");

var $6Cw3h = parcelRequire("6Cw3h");

var $8k9oS = parcelRequire("8k9oS");
var $668a7d92865c2bd7$require$Buffer = $8k9oS.Buffer;
module.exports = $668a7d92865c2bd7$var$parseKeys;
function $668a7d92865c2bd7$var$parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !$668a7d92865c2bd7$require$Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = $668a7d92865c2bd7$require$Buffer.from(buffer);
    var stripped = $bxCSe(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = $h8RWs.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = $h8RWs.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $h8RWs.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = $h8RWs.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = $h8RWs.EncryptedPrivateKey.decode(data, 'der');
            data = $668a7d92865c2bd7$var$decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = $h8RWs.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $h8RWs.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: $h8RWs.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = $h8RWs.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return $h8RWs.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return $h8RWs.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: $h8RWs.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = $h8RWs.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
$668a7d92865c2bd7$var$parseKeys.signature = $h8RWs.signature;
function $668a7d92865c2bd7$var$decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = $f0e0R[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = $6Cw3h.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = $jEWuG.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return $668a7d92865c2bd7$require$Buffer.concat(out);
}

});
parcelRequire.register("h8RWs", function(module, exports) {

$parcel$export(module.exports, "certificate", function () { return $c7ad06c22e45d69a$export$c98397a6eb8d0678; }, function (v) { return $c7ad06c22e45d69a$export$c98397a6eb8d0678 = v; });
$parcel$export(module.exports, "RSAPrivateKey", function () { return $c7ad06c22e45d69a$export$f4aab6816f64fa6b; }, function (v) { return $c7ad06c22e45d69a$export$f4aab6816f64fa6b = v; });
$parcel$export(module.exports, "RSAPublicKey", function () { return $c7ad06c22e45d69a$export$4471f5c65d097c11; }, function (v) { return $c7ad06c22e45d69a$export$4471f5c65d097c11 = v; });
$parcel$export(module.exports, "PublicKey", function () { return $c7ad06c22e45d69a$export$ca8b6604d6ce14de; }, function (v) { return $c7ad06c22e45d69a$export$ca8b6604d6ce14de = v; });
$parcel$export(module.exports, "PrivateKey", function () { return $c7ad06c22e45d69a$export$8f54525b330fd87b; }, function (v) { return $c7ad06c22e45d69a$export$8f54525b330fd87b = v; });
$parcel$export(module.exports, "EncryptedPrivateKey", function () { return $c7ad06c22e45d69a$export$23cd2842b44ca3e7; }, function (v) { return $c7ad06c22e45d69a$export$23cd2842b44ca3e7 = v; });
$parcel$export(module.exports, "DSAPrivateKey", function () { return $c7ad06c22e45d69a$export$245c9aaa9f5ce4ce; }, function (v) { return $c7ad06c22e45d69a$export$245c9aaa9f5ce4ce = v; });
$parcel$export(module.exports, "DSAparam", function () { return $c7ad06c22e45d69a$export$8ad762e3e6399afe; }, function (v) { return $c7ad06c22e45d69a$export$8ad762e3e6399afe = v; });
$parcel$export(module.exports, "ECPrivateKey", function () { return $c7ad06c22e45d69a$export$32ef6f92e22c6ab0; }, function (v) { return $c7ad06c22e45d69a$export$32ef6f92e22c6ab0 = v; });
$parcel$export(module.exports, "signature", function () { return $c7ad06c22e45d69a$export$c9cd164b539ebb63; }, function (v) { return $c7ad06c22e45d69a$export$c9cd164b539ebb63 = v; });
var $c7ad06c22e45d69a$export$c98397a6eb8d0678;
var $c7ad06c22e45d69a$export$f4aab6816f64fa6b;
var $c7ad06c22e45d69a$export$4471f5c65d097c11;
var $c7ad06c22e45d69a$export$ca8b6604d6ce14de;
var $c7ad06c22e45d69a$export$8f54525b330fd87b;
var $c7ad06c22e45d69a$export$23cd2842b44ca3e7;
var $c7ad06c22e45d69a$export$245c9aaa9f5ce4ce;
var $c7ad06c22e45d69a$export$8ad762e3e6399afe;
var $c7ad06c22e45d69a$export$32ef6f92e22c6ab0;
var $c7ad06c22e45d69a$export$c9cd164b539ebb63;
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';

var $8ul9W = parcelRequire("8ul9W");

$c7ad06c22e45d69a$export$c98397a6eb8d0678 = (parcelRequire("dWLj3"));
var $c7ad06c22e45d69a$var$RSAPrivateKey = $8ul9W.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
$c7ad06c22e45d69a$export$f4aab6816f64fa6b = $c7ad06c22e45d69a$var$RSAPrivateKey;
var $c7ad06c22e45d69a$var$RSAPublicKey = $8ul9W.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
$c7ad06c22e45d69a$export$4471f5c65d097c11 = $c7ad06c22e45d69a$var$RSAPublicKey;
var $c7ad06c22e45d69a$var$PublicKey = $8ul9W.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($c7ad06c22e45d69a$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
$c7ad06c22e45d69a$export$ca8b6604d6ce14de = $c7ad06c22e45d69a$var$PublicKey;
var $c7ad06c22e45d69a$var$AlgorithmIdentifier = $8ul9W.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var $c7ad06c22e45d69a$var$PrivateKeyInfo = $8ul9W.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use($c7ad06c22e45d69a$var$AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
$c7ad06c22e45d69a$export$8f54525b330fd87b = $c7ad06c22e45d69a$var$PrivateKeyInfo;
var $c7ad06c22e45d69a$var$EncryptedPrivateKeyInfo = $8ul9W.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
$c7ad06c22e45d69a$export$23cd2842b44ca3e7 = $c7ad06c22e45d69a$var$EncryptedPrivateKeyInfo;
var $c7ad06c22e45d69a$var$DSAPrivateKey = $8ul9W.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
$c7ad06c22e45d69a$export$245c9aaa9f5ce4ce = $c7ad06c22e45d69a$var$DSAPrivateKey;
$c7ad06c22e45d69a$export$8ad762e3e6399afe = $8ul9W.define('DSAparam', function() {
    this.int();
});
var $c7ad06c22e45d69a$var$ECPrivateKey = $8ul9W.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use($c7ad06c22e45d69a$var$ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
$c7ad06c22e45d69a$export$32ef6f92e22c6ab0 = $c7ad06c22e45d69a$var$ECPrivateKey;
var $c7ad06c22e45d69a$var$ECParameters = $8ul9W.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
$c7ad06c22e45d69a$export$c9cd164b539ebb63 = $8ul9W.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});

});
parcelRequire.register("8ul9W", function(module, exports) {
'use strict';
const $62e189e199c934b0$var$asn1 = module.exports;

$62e189e199c934b0$var$asn1.bignum = (parcelRequire("8Riw1"));

$62e189e199c934b0$var$asn1.define = (parcelRequire("eKJX4")).define;

$62e189e199c934b0$var$asn1.base = (parcelRequire("8mBiy"));

$62e189e199c934b0$var$asn1.constants = (parcelRequire("i3Icg"));

$62e189e199c934b0$var$asn1.decoders = (parcelRequire("iq7P6"));

$62e189e199c934b0$var$asn1.encoders = (parcelRequire("AAzYW"));

});
parcelRequire.register("8Riw1", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("c7mcJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("eKJX4", function(module, exports) {
'use strict';

var $AAzYW = parcelRequire("AAzYW");

var $iq7P6 = parcelRequire("iq7P6");

var $baEok = parcelRequire("baEok");
const $abd901a59adfe5f6$var$api = module.exports;
$abd901a59adfe5f6$var$api.define = function define(name, body) {
    return new $abd901a59adfe5f6$var$Entity(name, body);
};
function $abd901a59adfe5f6$var$Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
$abd901a59adfe5f6$var$Entity.prototype._createNamed = function createNamed(Base) {
    const name1 = this.name;
    function Generated(entity) {
        this._initNamed(entity, name1);
    }
    $baEok(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
$abd901a59adfe5f6$var$Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed($iq7P6[enc]);
    return this.decoders[enc];
};
$abd901a59adfe5f6$var$Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
$abd901a59adfe5f6$var$Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed($AAzYW[enc]);
    return this.encoders[enc];
};
$abd901a59adfe5f6$var$Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

});
parcelRequire.register("AAzYW", function(module, exports) {
'use strict';
const $06dfbcce2f899fd0$var$encoders = module.exports;

$06dfbcce2f899fd0$var$encoders.der = (parcelRequire("aeiSd"));

$06dfbcce2f899fd0$var$encoders.pem = (parcelRequire("9VwZ7"));

});
parcelRequire.register("aeiSd", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $iEdK1 = parcelRequire("iEdK1");
var $7729da1275a9e77b$require$Buffer = $iEdK1.Buffer;

var $gZnnC = parcelRequire("gZnnC");

var $87TbL = parcelRequire("87TbL");
function $7729da1275a9e77b$var$DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $7729da1275a9e77b$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $7729da1275a9e77b$var$DEREncoder;
$7729da1275a9e77b$var$DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function $7729da1275a9e77b$var$DERNode(parent) {
    $gZnnC.call(this, 'der', parent);
}
$baEok($7729da1275a9e77b$var$DERNode, $gZnnC);
$7729da1275a9e77b$var$DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = $7729da1275a9e77b$var$encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 0x80) {
        const header = $7729da1275a9e77b$require$Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 0x100; i >>= 8)lenOctets++;
    const header = $7729da1275a9e77b$require$Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;
    for(let i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header[i1] = j & 0xff;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
$7729da1275a9e77b$var$DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        const buf = $7729da1275a9e77b$require$Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
$7729da1275a9e77b$var$DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 0x80; ident >>= 7)size++;
    }
    const objid = $7729da1275a9e77b$require$Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i2 = id.length - 1; i2 >= 0; i2--){
        let ident = id[i2];
        objid[offset--] = ident & 0x7f;
        while((ident >>= 7) > 0)objid[offset--] = 0x80 | ident & 0x7f;
    }
    return this._createEncoderBuffer(objid);
};
function $7729da1275a9e77b$var$two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
$7729da1275a9e77b$var$DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === 'gentime') str = [
        $7729da1275a9e77b$var$two(date.getUTCFullYear()),
        $7729da1275a9e77b$var$two(date.getUTCMonth() + 1),
        $7729da1275a9e77b$var$two(date.getUTCDate()),
        $7729da1275a9e77b$var$two(date.getUTCHours()),
        $7729da1275a9e77b$var$two(date.getUTCMinutes()),
        $7729da1275a9e77b$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        $7729da1275a9e77b$var$two(date.getUTCFullYear() % 100),
        $7729da1275a9e77b$var$two(date.getUTCMonth() + 1),
        $7729da1275a9e77b$var$two(date.getUTCDate()),
        $7729da1275a9e77b$var$two(date.getUTCHours()),
        $7729da1275a9e77b$var$two(date.getUTCMinutes()),
        $7729da1275a9e77b$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
$7729da1275a9e77b$var$DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
$7729da1275a9e77b$var$DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !$7729da1275a9e77b$require$Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
        num = $7729da1275a9e77b$require$Buffer.from(numArray);
    }
    if ($7729da1275a9e77b$require$Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = $7729da1275a9e77b$require$Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 0x80) return this._createEncoderBuffer(num);
    if (num < 0x100) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 0x100; i >>= 8)size++;
    const out = new Array(size);
    for(let i3 = out.length - 1; i3 >= 0; i3--){
        out[i3] = num & 0xff;
        num >>= 8;
    }
    if (out[0] & 0x80) out.unshift(0);
    return this._createEncoderBuffer($7729da1275a9e77b$require$Buffer.from(out));
};
$7729da1275a9e77b$var$DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
};
$7729da1275a9e77b$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
$7729da1275a9e77b$var$DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state['default'] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function $7729da1275a9e77b$var$encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if ($87TbL.tagByName.hasOwnProperty(tag)) res = $87TbL.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 0x20;
    res |= $87TbL.tagClassByName[cls || 'universal'] << 6;
    return res;
}

});
parcelRequire.register("iEdK1", function(module, exports) {
/* eslint-disable node/no-deprecated-api */ 'use strict';

var $36zFS = parcelRequire("36zFS");

var $gGU47 = parcelRequire("gGU47");
var $d9369f2a2843daa0$var$Buffer = $gGU47.Buffer;
var $d9369f2a2843daa0$var$safer = {};
var $d9369f2a2843daa0$var$key;
for($d9369f2a2843daa0$var$key in $gGU47){
    if (!$gGU47.hasOwnProperty($d9369f2a2843daa0$var$key)) continue;
    if ($d9369f2a2843daa0$var$key === 'SlowBuffer' || $d9369f2a2843daa0$var$key === 'Buffer') continue;
    $d9369f2a2843daa0$var$safer[$d9369f2a2843daa0$var$key] = $gGU47[$d9369f2a2843daa0$var$key];
}
var $d9369f2a2843daa0$var$Safer = $d9369f2a2843daa0$var$safer.Buffer = {};
for($d9369f2a2843daa0$var$key in $d9369f2a2843daa0$var$Buffer){
    if (!$d9369f2a2843daa0$var$Buffer.hasOwnProperty($d9369f2a2843daa0$var$key)) continue;
    if ($d9369f2a2843daa0$var$key === 'allocUnsafe' || $d9369f2a2843daa0$var$key === 'allocUnsafeSlow') continue;
    $d9369f2a2843daa0$var$Safer[$d9369f2a2843daa0$var$key] = $d9369f2a2843daa0$var$Buffer[$d9369f2a2843daa0$var$key];
}
$d9369f2a2843daa0$var$safer.Buffer.prototype = $d9369f2a2843daa0$var$Buffer.prototype;
if (!$d9369f2a2843daa0$var$Safer.from || $d9369f2a2843daa0$var$Safer.from === Uint8Array.from) $d9369f2a2843daa0$var$Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === 'undefined') throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    return $d9369f2a2843daa0$var$Buffer(value, encodingOrOffset, length);
};
if (!$d9369f2a2843daa0$var$Safer.alloc) $d9369f2a2843daa0$var$Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = $d9369f2a2843daa0$var$Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === 'string') buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!$d9369f2a2843daa0$var$safer.kStringMaxLength) try {
    $d9369f2a2843daa0$var$safer.kStringMaxLength = $36zFS.binding('buffer').kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!$d9369f2a2843daa0$var$safer.constants) {
    $d9369f2a2843daa0$var$safer.constants = {
        MAX_LENGTH: $d9369f2a2843daa0$var$safer.kMaxLength
    };
    if ($d9369f2a2843daa0$var$safer.kStringMaxLength) $d9369f2a2843daa0$var$safer.constants.MAX_STRING_LENGTH = $d9369f2a2843daa0$var$safer.kStringMaxLength;
}
module.exports = $d9369f2a2843daa0$var$safer;

});

parcelRequire.register("gZnnC", function(module, exports) {
'use strict';

var $1CZyY = parcelRequire("1CZyY");
var $c5e47aa10856127e$require$Reporter = $1CZyY.Reporter;

var $3CNQ0 = parcelRequire("3CNQ0");
var $c5e47aa10856127e$require$EncoderBuffer = $3CNQ0.EncoderBuffer;

var $3CNQ0 = parcelRequire("3CNQ0");
var $c5e47aa10856127e$require$DecoderBuffer = $3CNQ0.DecoderBuffer;

var $dN0Q4 = parcelRequire("dN0Q4");
// Supported tags
const $c5e47aa10856127e$var$tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
const $c5e47aa10856127e$var$methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat($c5e47aa10856127e$var$tags);
// Overrided methods list
const $c5e47aa10856127e$var$overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function $c5e47aa10856127e$var$Node(enc, parent, name) {
    const state = {};
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = $c5e47aa10856127e$var$Node;
const $c5e47aa10856127e$var$stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
$c5e47aa10856127e$var$Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    $c5e47aa10856127e$var$stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
$c5e47aa10856127e$var$Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    $c5e47aa10856127e$var$methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
$c5e47aa10856127e$var$Node.prototype._init = function init(body) {
    const state = this._baseState;
    $dN0Q4(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    $dN0Q4.equal(state.children.length, 1, 'Root node can have only one child');
};
$c5e47aa10856127e$var$Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        $dN0Q4(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        $dN0Q4(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            const res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
$c5e47aa10856127e$var$overrided.forEach(function(method) {
    $c5e47aa10856127e$var$Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
$c5e47aa10856127e$var$tags.forEach(function(tag) {
    $c5e47aa10856127e$var$Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        $dN0Q4(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
$c5e47aa10856127e$var$Node.prototype.use = function use(item) {
    $dN0Q4(item);
    const state = this._baseState;
    $dN0Q4(state.use === null);
    state.use = item;
    return this;
};
$c5e47aa10856127e$var$Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
$c5e47aa10856127e$var$Node.prototype.def = function def(val) {
    const state = this._baseState;
    $dN0Q4(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
$c5e47aa10856127e$var$Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    $dN0Q4(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
$c5e47aa10856127e$var$Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    $dN0Q4(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
$c5e47aa10856127e$var$Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
$c5e47aa10856127e$var$Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    $dN0Q4(state.key === null);
    state.key = newKey;
    return this;
};
$c5e47aa10856127e$var$Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
$c5e47aa10856127e$var$Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    $dN0Q4(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
$c5e47aa10856127e$var$Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    $dN0Q4(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
$c5e47aa10856127e$var$Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state['default'];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            const data = new $c5e47aa10856127e$require$DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
$c5e47aa10856127e$var$Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
$c5e47aa10856127e$var$Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    $dN0Q4(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
$c5e47aa10856127e$var$Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
$c5e47aa10856127e$var$Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new $c5e47aa10856127e$require$EncoderBuffer(data, this.reporter);
};
$c5e47aa10856127e$var$Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
$c5e47aa10856127e$var$Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state1 = this._baseState;
    // Decode root node
    if (state1.parent === null) return state1.children[0]._encode(data, reporter || new $c5e47aa10856127e$require$Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state1.optional && data === undefined) {
        if (state1['default'] !== null) data = state1['default'];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state1.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state1.choice) result = this._encodeChoice(data, reporter);
    else if (state1.contains) {
        content = this._getUse(state1.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state1.children) {
        content = state1.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state1.tag === 'seqof' || state1.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state1.args && state1.args.length === 1)) return reporter.error('Too many args for : ' + state1.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state1.use !== null) result = this._getUse(state1.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state1.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state1.any && state1.choice === null) {
        const tag = state1.implicit !== null ? state1.implicit : state1.tag;
        const cls = state1.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state1.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state1.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state1.explicit !== null) result = this._encodeComposite(state1.explicit, false, 'context', result);
    return result;
};
$c5e47aa10856127e$var$Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) $dN0Q4(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
$c5e47aa10856127e$var$Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
$c5e47aa10856127e$var$Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
$c5e47aa10856127e$var$Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

});
parcelRequire.register("1CZyY", function(module, exports) {

$parcel$export(module.exports, "Reporter", function () { return $12f9182fe0149d3e$export$957313a2f485e5ed; }, function (v) { return $12f9182fe0149d3e$export$957313a2f485e5ed = v; });
var $12f9182fe0149d3e$export$957313a2f485e5ed;
'use strict';

var $baEok = parcelRequire("baEok");
function $12f9182fe0149d3e$var$Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
$12f9182fe0149d3e$export$957313a2f485e5ed = $12f9182fe0149d3e$var$Reporter;
$12f9182fe0149d3e$var$Reporter.prototype.isError = function isError(obj) {
    return obj instanceof $12f9182fe0149d3e$var$ReporterError;
};
$12f9182fe0149d3e$var$Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
$12f9182fe0149d3e$var$Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
$12f9182fe0149d3e$var$Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
$12f9182fe0149d3e$var$Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
$12f9182fe0149d3e$var$Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
$12f9182fe0149d3e$var$Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
$12f9182fe0149d3e$var$Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
};
$12f9182fe0149d3e$var$Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
$12f9182fe0149d3e$var$Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof $12f9182fe0149d3e$var$ReporterError;
    if (inherited) err = msg;
    else err = new $12f9182fe0149d3e$var$ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
$12f9182fe0149d3e$var$Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function $12f9182fe0149d3e$var$ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
$baEok($12f9182fe0149d3e$var$ReporterError, Error);
$12f9182fe0149d3e$var$ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, $12f9182fe0149d3e$var$ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

});

parcelRequire.register("3CNQ0", function(module, exports) {

$parcel$export(module.exports, "DecoderBuffer", function () { return $2a3b9473d6493fcf$export$bf9f79cdc4a49163; }, function (v) { return $2a3b9473d6493fcf$export$bf9f79cdc4a49163 = v; });
$parcel$export(module.exports, "EncoderBuffer", function () { return $2a3b9473d6493fcf$export$8ff24f7760c7a78e; }, function (v) { return $2a3b9473d6493fcf$export$8ff24f7760c7a78e = v; });
var $2a3b9473d6493fcf$export$bf9f79cdc4a49163;
var $2a3b9473d6493fcf$export$8ff24f7760c7a78e;
'use strict';

var $baEok = parcelRequire("baEok");

var $1CZyY = parcelRequire("1CZyY");
var $2a3b9473d6493fcf$require$Reporter = $1CZyY.Reporter;

var $iEdK1 = parcelRequire("iEdK1");
var $2a3b9473d6493fcf$require$Buffer = $iEdK1.Buffer;
function $2a3b9473d6493fcf$var$DecoderBuffer(base, options) {
    $2a3b9473d6493fcf$require$Reporter.call(this, options);
    if (!$2a3b9473d6493fcf$require$Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
$baEok($2a3b9473d6493fcf$var$DecoderBuffer, $2a3b9473d6493fcf$require$Reporter);
$2a3b9473d6493fcf$export$bf9f79cdc4a49163 = $2a3b9473d6493fcf$var$DecoderBuffer;
$2a3b9473d6493fcf$var$DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof $2a3b9473d6493fcf$var$DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && $2a3b9473d6493fcf$require$Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
    return isCompatible;
};
$2a3b9473d6493fcf$var$DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: $2a3b9473d6493fcf$require$Reporter.prototype.save.call(this)
    };
};
$2a3b9473d6493fcf$var$DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new $2a3b9473d6493fcf$var$DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    $2a3b9473d6493fcf$require$Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
$2a3b9473d6493fcf$var$DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
$2a3b9473d6493fcf$var$DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
$2a3b9473d6493fcf$var$DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    const res = new $2a3b9473d6493fcf$var$DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
$2a3b9473d6493fcf$var$DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function $2a3b9473d6493fcf$var$EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!$2a3b9473d6493fcf$var$EncoderBuffer.isEncoderBuffer(item)) item = new $2a3b9473d6493fcf$var$EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = $2a3b9473d6493fcf$require$Buffer.byteLength(value);
    } else if ($2a3b9473d6493fcf$require$Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + typeof value);
}
$2a3b9473d6493fcf$export$8ff24f7760c7a78e = $2a3b9473d6493fcf$var$EncoderBuffer;
$2a3b9473d6493fcf$var$EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof $2a3b9473d6493fcf$var$EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
    return isCompatible;
};
$2a3b9473d6493fcf$var$EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = $2a3b9473d6493fcf$require$Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if ($2a3b9473d6493fcf$require$Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

});


parcelRequire.register("87TbL", function(module, exports) {

$parcel$export(module.exports, "tagClass", function () { return $5ea9c9874a7fa4e6$export$3584c46ed60baee8; }, function (v) { return $5ea9c9874a7fa4e6$export$3584c46ed60baee8 = v; });
$parcel$export(module.exports, "tagClassByName", function () { return $5ea9c9874a7fa4e6$export$f18596ef8d632e49; }, function (v) { return $5ea9c9874a7fa4e6$export$f18596ef8d632e49 = v; });
$parcel$export(module.exports, "tag", function () { return $5ea9c9874a7fa4e6$export$2b067c6666111485; }, function (v) { return $5ea9c9874a7fa4e6$export$2b067c6666111485 = v; });
$parcel$export(module.exports, "tagByName", function () { return $5ea9c9874a7fa4e6$export$f17df38a421ab9e3; }, function (v) { return $5ea9c9874a7fa4e6$export$f17df38a421ab9e3 = v; });
var $5ea9c9874a7fa4e6$export$3584c46ed60baee8;
var $5ea9c9874a7fa4e6$export$f18596ef8d632e49;
var $5ea9c9874a7fa4e6$export$2b067c6666111485;
var $5ea9c9874a7fa4e6$export$f17df38a421ab9e3;
'use strict';
// Helper
function $5ea9c9874a7fa4e6$var$reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
$5ea9c9874a7fa4e6$export$3584c46ed60baee8 = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
$5ea9c9874a7fa4e6$export$f18596ef8d632e49 = $5ea9c9874a7fa4e6$var$reverse($5ea9c9874a7fa4e6$export$3584c46ed60baee8);
$5ea9c9874a7fa4e6$export$2b067c6666111485 = {
    0x00: 'end',
    0x01: 'bool',
    0x02: 'int',
    0x03: 'bitstr',
    0x04: 'octstr',
    0x05: 'null_',
    0x06: 'objid',
    0x07: 'objDesc',
    0x08: 'external',
    0x09: 'real',
    0x0a: 'enum',
    0x0b: 'embed',
    0x0c: 'utf8str',
    0x0d: 'relativeOid',
    0x10: 'seq',
    0x11: 'set',
    0x12: 'numstr',
    0x13: 'printstr',
    0x14: 't61str',
    0x15: 'videostr',
    0x16: 'ia5str',
    0x17: 'utctime',
    0x18: 'gentime',
    0x19: 'graphstr',
    0x1a: 'iso646str',
    0x1b: 'genstr',
    0x1c: 'unistr',
    0x1d: 'charstr',
    0x1e: 'bmpstr'
};
$5ea9c9874a7fa4e6$export$f17df38a421ab9e3 = $5ea9c9874a7fa4e6$var$reverse($5ea9c9874a7fa4e6$export$2b067c6666111485);

});


parcelRequire.register("9VwZ7", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $aeiSd = parcelRequire("aeiSd");
function $73a3060a7b3b8059$var$PEMEncoder(entity) {
    $aeiSd.call(this, entity);
    this.enc = 'pem';
}
$baEok($73a3060a7b3b8059$var$PEMEncoder, $aeiSd);
module.exports = $73a3060a7b3b8059$var$PEMEncoder;
$73a3060a7b3b8059$var$PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = $aeiSd.prototype.encode.call(this, data);
    const p = buf.toString('base64');
    const out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

});


parcelRequire.register("iq7P6", function(module, exports) {
'use strict';
const $d690b93852dd7901$var$decoders = module.exports;

$d690b93852dd7901$var$decoders.der = (parcelRequire("bhkP6"));

$d690b93852dd7901$var$decoders.pem = (parcelRequire("6HyUb"));

});
parcelRequire.register("bhkP6", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $8Riw1 = parcelRequire("8Riw1");

var $3CNQ0 = parcelRequire("3CNQ0");
var $83616f489b52de10$require$DecoderBuffer = $3CNQ0.DecoderBuffer;

var $gZnnC = parcelRequire("gZnnC");

var $87TbL = parcelRequire("87TbL");
function $83616f489b52de10$var$DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $83616f489b52de10$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $83616f489b52de10$var$DERDecoder;
$83616f489b52de10$var$DERDecoder.prototype.decode = function decode(data, options) {
    if (!$83616f489b52de10$require$DecoderBuffer.isDecoderBuffer(data)) data = new $83616f489b52de10$require$DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function $83616f489b52de10$var$DERNode(parent) {
    $gZnnC.call(this, 'der', parent);
}
$baEok($83616f489b52de10$var$DERNode, $gZnnC);
$83616f489b52de10$var$DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = $83616f489b52de10$var$derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
$83616f489b52de10$var$DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = $83616f489b52de10$var$derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = $83616f489b52de10$var$derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
$83616f489b52de10$var$DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = $83616f489b52de10$var$derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = $83616f489b52de10$var$derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
$83616f489b52de10$var$DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
$83616f489b52de10$var$DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        let str = '';
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
$83616f489b52de10$var$DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 0x80) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
$83616f489b52de10$var$DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
$83616f489b52de10$var$DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
$83616f489b52de10$var$DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
$83616f489b52de10$var$DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new $8Riw1(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
$83616f489b52de10$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function $83616f489b52de10$var$derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = $87TbL.tagClass[tag >> 6];
    const primitive = (tag & 0x20) === 0;
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while((oct & 0x80) === 0x80){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 0x7f;
        }
    } else tag &= 0x1f;
    const tagStr = $87TbL.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function $83616f489b52de10$var$derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 0x80) return null;
    // Definite form
    if ((len & 0x80) === 0) // Short form
    return len;
    // Long form
    const num = len & 0x7f;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

});

parcelRequire.register("6HyUb", function(module, exports) {
'use strict';

var $baEok = parcelRequire("baEok");

var $iEdK1 = parcelRequire("iEdK1");
var $4e11d5ae80dd944e$require$Buffer = $iEdK1.Buffer;

var $bhkP6 = parcelRequire("bhkP6");
function $4e11d5ae80dd944e$var$PEMDecoder(entity) {
    $bhkP6.call(this, entity);
    this.enc = 'pem';
}
$baEok($4e11d5ae80dd944e$var$PEMDecoder, $bhkP6);
module.exports = $4e11d5ae80dd944e$var$PEMDecoder;
$4e11d5ae80dd944e$var$PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    const base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, '');
    const input = $4e11d5ae80dd944e$require$Buffer.from(base64, 'base64');
    return $bhkP6.prototype.decode.call(this, input, options);
};

});



parcelRequire.register("8mBiy", function(module, exports) {
'use strict';
const $616d4f7309640664$var$base = module.exports;

$616d4f7309640664$var$base.Reporter = (parcelRequire("1CZyY")).Reporter;

$616d4f7309640664$var$base.DecoderBuffer = (parcelRequire("3CNQ0")).DecoderBuffer;

$616d4f7309640664$var$base.EncoderBuffer = (parcelRequire("3CNQ0")).EncoderBuffer;

$616d4f7309640664$var$base.Node = (parcelRequire("gZnnC"));

});

parcelRequire.register("i3Icg", function(module, exports) {
'use strict';
const $d25aca5b17a38bf1$var$constants = module.exports;
// Helper
$d25aca5b17a38bf1$var$constants._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};

$d25aca5b17a38bf1$var$constants.der = (parcelRequire("87TbL"));

});


parcelRequire.register("dWLj3", function(module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';

var $8ul9W = parcelRequire("8ul9W");
var $a275632c621a931d$var$Time = $8ul9W.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var $a275632c621a931d$var$AttributeTypeValue = $8ul9W.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var $a275632c621a931d$var$AlgorithmIdentifier = $8ul9W.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var $a275632c621a931d$var$SubjectPublicKeyInfo = $8ul9W.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($a275632c621a931d$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var $a275632c621a931d$var$RelativeDistinguishedName = $8ul9W.define('RelativeDistinguishedName', function() {
    this.setof($a275632c621a931d$var$AttributeTypeValue);
});
var $a275632c621a931d$var$RDNSequence = $8ul9W.define('RDNSequence', function() {
    this.seqof($a275632c621a931d$var$RelativeDistinguishedName);
});
var $a275632c621a931d$var$Name = $8ul9W.define('Name', function() {
    this.choice({
        rdnSequence: this.use($a275632c621a931d$var$RDNSequence)
    });
});
var $a275632c621a931d$var$Validity = $8ul9W.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use($a275632c621a931d$var$Time), this.key('notAfter').use($a275632c621a931d$var$Time));
});
var $a275632c621a931d$var$Extension = $8ul9W.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var $a275632c621a931d$var$TBSCertificate = $8ul9W.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use($a275632c621a931d$var$AlgorithmIdentifier), this.key('issuer').use($a275632c621a931d$var$Name), this.key('validity').use($a275632c621a931d$var$Validity), this.key('subject').use($a275632c621a931d$var$Name), this.key('subjectPublicKeyInfo').use($a275632c621a931d$var$SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof($a275632c621a931d$var$Extension).optional());
});
var $a275632c621a931d$var$X509Certificate = $8ul9W.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use($a275632c621a931d$var$TBSCertificate), this.key('signatureAlgorithm').use($a275632c621a931d$var$AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = $a275632c621a931d$var$X509Certificate;

});


parcelRequire.register("f0e0R", function(module, exports) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

});

parcelRequire.register("bxCSe", function(module, exports) {
// adapted from https://github.com/apatil/pemstrip
var $8670ee4f221001c7$var$findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var $8670ee4f221001c7$var$startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var $8670ee4f221001c7$var$fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;

var $l5861 = parcelRequire("l5861");

var $jEWuG = parcelRequire("jEWuG");

var $8k9oS = parcelRequire("8k9oS");
var $8670ee4f221001c7$require$Buffer = $8k9oS.Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match($8670ee4f221001c7$var$findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match($8670ee4f221001c7$var$fullRegex);
        decrypted = $8670ee4f221001c7$require$Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = $8670ee4f221001c7$require$Buffer.from(match[2], 'hex');
        var cipherText = $8670ee4f221001c7$require$Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = $l5861(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = $jEWuG.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = $8670ee4f221001c7$require$Buffer.concat(out);
    }
    var tag = key.match($8670ee4f221001c7$var$startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

});


parcelRequire.register("21yZU", function(module, exports) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

});


parcelRequire.register("aznpG", function(module, exports) {

var $8k9oS = parcelRequire("8k9oS");
var $7b1f55a244b06cb7$require$Buffer = $8k9oS.Buffer;

var $3wN9B = parcelRequire("3wN9B");

var $2Tmp9 = parcelRequire("2Tmp9");
var $7b1f55a244b06cb7$require$EC = $2Tmp9.ec;

var $8NP2t = parcelRequire("8NP2t");

var $21yZU = parcelRequire("21yZU");
function $7b1f55a244b06cb7$var$verify(sig, hash, key, signType, tag) {
    var pub = $8NP2t(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return $7b1f55a244b06cb7$var$ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return $7b1f55a244b06cb7$var$dsaVerify(sig, hash, pub);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    }
    hash = $7b1f55a244b06cb7$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(0xff);
        padNum++;
    }
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = $7b1f55a244b06cb7$require$Buffer.from(pad);
    var red = $3wN9B.mont(pub.modulus);
    sig = new $3wN9B(sig).toRed(red);
    sig = sig.redPow(new $3wN9B(pub.publicExponent));
    sig = $7b1f55a244b06cb7$require$Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function $7b1f55a244b06cb7$var$ecVerify(sig, hash, pub) {
    var curveId = $21yZU[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new $7b1f55a244b06cb7$require$EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function $7b1f55a244b06cb7$var$dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = $8NP2t.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    $7b1f55a244b06cb7$var$checkValue(s, q);
    $7b1f55a244b06cb7$var$checkValue(r, q);
    var montp = $3wN9B.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new $3wN9B(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function $7b1f55a244b06cb7$var$checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= q) throw new Error('invalid sig');
}
module.exports = $7b1f55a244b06cb7$var$verify;

});


parcelRequire.register("jloLi", function(module, exports) {

var $gGU47 = parcelRequire("gGU47");
var $e1532fa80ff8d6bd$require$Buffer = $gGU47.Buffer;

var $2Tmp9 = parcelRequire("2Tmp9");

var $744G5 = parcelRequire("744G5");
module.exports = function createECDH(curve) {
    return new $e1532fa80ff8d6bd$var$ECDH(curve);
};
var $e1532fa80ff8d6bd$var$aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
$e1532fa80ff8d6bd$var$aliases.p224 = $e1532fa80ff8d6bd$var$aliases.secp224r1;
$e1532fa80ff8d6bd$var$aliases.p256 = $e1532fa80ff8d6bd$var$aliases.secp256r1 = $e1532fa80ff8d6bd$var$aliases.prime256v1;
$e1532fa80ff8d6bd$var$aliases.p192 = $e1532fa80ff8d6bd$var$aliases.secp192r1 = $e1532fa80ff8d6bd$var$aliases.prime192v1;
$e1532fa80ff8d6bd$var$aliases.p384 = $e1532fa80ff8d6bd$var$aliases.secp384r1;
$e1532fa80ff8d6bd$var$aliases.p521 = $e1532fa80ff8d6bd$var$aliases.secp521r1;
function $e1532fa80ff8d6bd$var$ECDH(curve) {
    this.curveType = $e1532fa80ff8d6bd$var$aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new $2Tmp9.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
$e1532fa80ff8d6bd$var$ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
$e1532fa80ff8d6bd$var$ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!$e1532fa80ff8d6bd$require$Buffer.isBuffer(other)) other = new $e1532fa80ff8d6bd$require$Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return $e1532fa80ff8d6bd$var$formatReturnValue(out, enc, this.curveType.byteLength);
};
$e1532fa80ff8d6bd$var$ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return $e1532fa80ff8d6bd$var$formatReturnValue(key, enc);
};
$e1532fa80ff8d6bd$var$ECDH.prototype.getPrivateKey = function(enc) {
    return $e1532fa80ff8d6bd$var$formatReturnValue(this.keys.getPrivate(), enc);
};
$e1532fa80ff8d6bd$var$ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!$e1532fa80ff8d6bd$require$Buffer.isBuffer(pub)) pub = new $e1532fa80ff8d6bd$require$Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
$e1532fa80ff8d6bd$var$ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!$e1532fa80ff8d6bd$require$Buffer.isBuffer(priv)) priv = new $e1532fa80ff8d6bd$require$Buffer(priv, enc);
    var _priv = new $744G5(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function $e1532fa80ff8d6bd$var$formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new $e1532fa80ff8d6bd$require$Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new $e1532fa80ff8d6bd$require$Buffer(len - buf.length);
        zeros.fill(0);
        buf = $e1532fa80ff8d6bd$require$Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

});
parcelRequire.register("744G5", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("c7mcJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("61C3k", function(module, exports) {

$parcel$export(module.exports, "publicEncrypt", function () { return $46305a89c70413c7$export$512823e338ddb1b7; }, function (v) { return $46305a89c70413c7$export$512823e338ddb1b7 = v; });
$parcel$export(module.exports, "privateDecrypt", function () { return $46305a89c70413c7$export$7efb24e2fddf99b9; }, function (v) { return $46305a89c70413c7$export$7efb24e2fddf99b9 = v; });
$parcel$export(module.exports, "privateEncrypt", function () { return $46305a89c70413c7$export$9d0e0c0c4a8d30f3; }, function (v) { return $46305a89c70413c7$export$9d0e0c0c4a8d30f3 = v; });
$parcel$export(module.exports, "publicDecrypt", function () { return $46305a89c70413c7$export$b9d55ff329113abd; }, function (v) { return $46305a89c70413c7$export$b9d55ff329113abd = v; });
var $46305a89c70413c7$export$512823e338ddb1b7;
var $46305a89c70413c7$export$7efb24e2fddf99b9;
var $46305a89c70413c7$export$9d0e0c0c4a8d30f3;
var $46305a89c70413c7$export$b9d55ff329113abd;

$46305a89c70413c7$export$512823e338ddb1b7 = (parcelRequire("9h3zY"));

$46305a89c70413c7$export$7efb24e2fddf99b9 = (parcelRequire("3vicP"));
$46305a89c70413c7$export$9d0e0c0c4a8d30f3 = function privateEncrypt(key, buf) {
    return $46305a89c70413c7$export$512823e338ddb1b7(key, buf, true);
};
$46305a89c70413c7$export$b9d55ff329113abd = function publicDecrypt(key, buf) {
    return $46305a89c70413c7$export$7efb24e2fddf99b9(key, buf, true);
};

});
parcelRequire.register("9h3zY", function(module, exports) {

var $8NP2t = parcelRequire("8NP2t");

var $94o1H = parcelRequire("94o1H");

var $cv73a = parcelRequire("cv73a");

var $1us7W = parcelRequire("1us7W");

var $72llI = parcelRequire("72llI");

var $hOV2p = parcelRequire("hOV2p");

var $bbNQX = parcelRequire("bbNQX");

var $it3Jn = parcelRequire("it3Jn");

var $8k9oS = parcelRequire("8k9oS");
var $6c087a5388810e3a$require$Buffer = $8k9oS.Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $8NP2t(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = $6c087a5388810e3a$var$oaep(key, msg);
    else if (padding === 1) paddedMsg = $6c087a5388810e3a$var$pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new $hOV2p(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return $it3Jn(paddedMsg, key);
    else return $bbNQX(paddedMsg, key);
};
function $6c087a5388810e3a$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = $cv73a('sha1').update($6c087a5388810e3a$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = $6c087a5388810e3a$require$Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = $94o1H(hLen);
    var maskedDb = $72llI($6c087a5388810e3a$require$Buffer.concat([
        iHash,
        ps,
        $6c087a5388810e3a$require$Buffer.alloc(1, 1),
        msg
    ], dblen), $1us7W(seed, dblen));
    var maskedSeed = $72llI(seed, $1us7W(maskedDb, hLen));
    return new $hOV2p($6c087a5388810e3a$require$Buffer.concat([
        $6c087a5388810e3a$require$Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function $6c087a5388810e3a$var$pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = $6c087a5388810e3a$require$Buffer.alloc(k - mLen - 3, 0xff);
    else ps = $6c087a5388810e3a$var$nonZero(k - mLen - 3);
    return new $hOV2p($6c087a5388810e3a$require$Buffer.concat([
        $6c087a5388810e3a$require$Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        $6c087a5388810e3a$require$Buffer.alloc(1),
        msg
    ], k));
}
function $6c087a5388810e3a$var$nonZero(len) {
    var out = $6c087a5388810e3a$require$Buffer.allocUnsafe(len);
    var i = 0;
    var cache = $94o1H(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = $94o1H(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

});
parcelRequire.register("1us7W", function(module, exports) {

var $cv73a = parcelRequire("cv73a");

var $8k9oS = parcelRequire("8k9oS");
var $115e693a74059021$require$Buffer = $8k9oS.Buffer;
module.exports = function(seed, len) {
    var t = $115e693a74059021$require$Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = $115e693a74059021$var$i2ops(i++);
        t = $115e693a74059021$require$Buffer.concat([
            t,
            $cv73a('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function $115e693a74059021$var$i2ops(c) {
    var out = $115e693a74059021$require$Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

});

parcelRequire.register("72llI", function(module, exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

});

parcelRequire.register("hOV2p", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("c7mcJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("bbNQX", function(module, exports) {

var $hOV2p = parcelRequire("hOV2p");

var $8k9oS = parcelRequire("8k9oS");
var $8257649b62870dd9$require$Buffer = $8k9oS.Buffer;
function $8257649b62870dd9$var$withPublic(paddedMsg, key) {
    return $8257649b62870dd9$require$Buffer.from(paddedMsg.toRed($hOV2p.mont(key.modulus)).redPow(new $hOV2p(key.publicExponent)).fromRed().toArray());
}
module.exports = $8257649b62870dd9$var$withPublic;

});


parcelRequire.register("3vicP", function(module, exports) {

var $8NP2t = parcelRequire("8NP2t");

var $1us7W = parcelRequire("1us7W");

var $72llI = parcelRequire("72llI");

var $hOV2p = parcelRequire("hOV2p");

var $it3Jn = parcelRequire("it3Jn");

var $cv73a = parcelRequire("cv73a");

var $bbNQX = parcelRequire("bbNQX");

var $8k9oS = parcelRequire("8k9oS");
var $28d263a86c3e8397$require$Buffer = $8k9oS.Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $8NP2t(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new $hOV2p(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = $bbNQX(new $hOV2p(enc), key);
    else msg = $it3Jn(enc, key);
    var zBuffer = $28d263a86c3e8397$require$Buffer.alloc(k - msg.length);
    msg = $28d263a86c3e8397$require$Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return $28d263a86c3e8397$var$oaep(key, msg);
    else if (padding === 1) return $28d263a86c3e8397$var$pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function $28d263a86c3e8397$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = $cv73a('sha1').update($28d263a86c3e8397$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = $72llI(maskedSeed, $1us7W(maskedDb, hLen));
    var db = $72llI(maskedDb, $1us7W(seed, k - hLen - 1));
    if ($28d263a86c3e8397$var$compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function $28d263a86c3e8397$var$pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function $28d263a86c3e8397$var$compare(a, b) {
    a = $28d263a86c3e8397$require$Buffer.from(a);
    b = $28d263a86c3e8397$require$Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

});


parcelRequire.register("6kkrD", function(module, exports) {

$parcel$export(module.exports, "randomFill", function () { return $49b47840967a495a$export$bb1abf2ce84fc7e8; }, function (v) { return $49b47840967a495a$export$bb1abf2ce84fc7e8 = v; });
$parcel$export(module.exports, "randomFillSync", function () { return $49b47840967a495a$export$2f7171e78e524d5e; }, function (v) { return $49b47840967a495a$export$2f7171e78e524d5e = v; });
var $49b47840967a495a$export$bb1abf2ce84fc7e8;
var $49b47840967a495a$export$2f7171e78e524d5e;
'use strict';

var $36zFS = parcelRequire("36zFS");
function $49b47840967a495a$var$oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}

var $8k9oS = parcelRequire("8k9oS");

var $94o1H = parcelRequire("94o1H");
var $49b47840967a495a$var$Buffer = $8k9oS.Buffer;
var $49b47840967a495a$var$kBufferMaxLength = $8k9oS.kMaxLength;
var $49b47840967a495a$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
var $49b47840967a495a$var$kMaxUint32 = Math.pow(2, 32) - 1;
function $49b47840967a495a$var$assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > $49b47840967a495a$var$kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > $49b47840967a495a$var$kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function $49b47840967a495a$var$assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > $49b47840967a495a$var$kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > $49b47840967a495a$var$kBufferMaxLength) throw new RangeError('buffer too small');
}
if ($49b47840967a495a$var$crypto && $49b47840967a495a$var$crypto.getRandomValues || false) {
    $49b47840967a495a$export$bb1abf2ce84fc7e8 = $49b47840967a495a$var$randomFill;
    $49b47840967a495a$export$2f7171e78e524d5e = $49b47840967a495a$var$randomFillSync;
} else {
    $49b47840967a495a$export$bb1abf2ce84fc7e8 = $49b47840967a495a$var$oldBrowser;
    $49b47840967a495a$export$2f7171e78e524d5e = $49b47840967a495a$var$oldBrowser;
}
function $49b47840967a495a$var$randomFill(buf, offset, size, cb) {
    if (!$49b47840967a495a$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    $49b47840967a495a$var$assertOffset(offset, buf.length);
    $49b47840967a495a$var$assertSize(size, offset, buf.length);
    return $49b47840967a495a$var$actualFill(buf, offset, size, cb);
}
function $49b47840967a495a$var$actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    $49b47840967a495a$var$crypto.getRandomValues(uint);
    if (cb) {
        $36zFS.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        $94o1H(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes1 = $94o1H(size);
    bytes1.copy(buf, offset);
    return buf;
}
function $49b47840967a495a$var$randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!$49b47840967a495a$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    $49b47840967a495a$var$assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    $49b47840967a495a$var$assertSize(size, offset, buf.length);
    return $49b47840967a495a$var$actualFill(buf, offset, size);
}

});




parcelRequire.register("8V1uF", function(module, exports) {
'use strict';


// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    const https = (parcelRequire("jyaGj"));
    const http = (parcelRequire("hiRx5"));
    let moduleRef;
    let url;
    let logRequestErrors = true;
    const LOG_GET_GENERATED_WORK = false;
    let auth;
    /**
   * Sets an authorization string (http 'Authorization' header), useful if node requires api key.
   *
   * @memberof BananodeApi
   * @param {string} authString api key as a string\
   * @return {undefined} returns nothing.
   */ const setAuth = (authString)=>{
        auth = authString;
    };
    const sendRequest = async (formData)=>{
        /* istanbul ignore if */ if (formData == undefined) throw Error(`'formData' is a required parameter.`);
        return new Promise((resolve, reject)=>{
            // https://docs.nano.org/commands/rpc-protocol#accounts-balances
            const apiUrl = new URL(url);
            // console.log('apiUrl', apiUrl);
            const body = JSON.stringify(formData);
            //        console.log( 'sendRequest request', body );
            const options = {
                method: 'POST',
                hostname: apiUrl.hostname,
                path: apiUrl.pathname,
                port: apiUrl.port,
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': body.length
                },
                timeout: 30000
            };
            if (!!auth) options.headers['Authorization'] = auth;
            // console.log('url', url);
            // console.log('apiUrl.protocol', apiUrl.protocol);
            const req = moduleRef.request(options, (res)=>{
                // console.log('res.statusCode', res.statusCode);
                if (res.statusCode < 200 || res.statusCode > 299) {
                    // console.trace('error', res.statusCode);
                    let chunks = '';
                    res.on('data', (chunk)=>{
                        chunks += chunk;
                    });
                    res.on('end', ()=>{
                        // console.trace('error', res.statusCode);
                        reject(Error(JSON.stringify({
                            body: chunks,
                            statusCode: res.statusCode
                        })));
                    });
                } else {
                    // console.log(`statusCode: ${res.statusCode}`);
                    let chunks = '';
                    res.on('data', (chunk)=>{
                        chunks += chunk;
                    });
                    res.on('end', ()=>{
                        if (chunks.length == 0) resolve(undefined);
                        else try {
                            const json = JSON.parse(chunks);
                            resolve(json);
                        } catch (error) {
                            reject(error);
                        }
                    });
                }
            });
            req.on('error', (error)=>{
                /* istanbul ignore if */ if (logRequestErrors) console.log('sendRequest error', error, body);
                reject(Error(error));
            });
            req.write(body);
            req.end();
        });
    };
    const getAccountBalanceRaw = async (account)=>{
        const balances = await getAccountBalanceAndPendingRaw(account);
        if (balances) return balances.balance;
    };
    const getAccountBalanceAndPendingRaw = async (account)=>{
        /* istanbul ignore if */ if (account == undefined) throw Error(`'account' is a required parameter.`);
        const formData = {
            action: 'accounts_balances',
            accounts: [
                account
            ]
        };
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `accounts_balances error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                if (json == undefined) {
                    resolve();
                    return;
                }
                // console.log( 'accounts_balances json', json );
                if (json.balances == undefined) {
                    resolve();
                    return;
                }
                // console.log( 'accounts_balances json.balances', json.balances );
                resolve({
                    balance: json.balances[account].balance,
                    pending: json.balances[account].pending
                });
            });
        });
    };
    const getAccountsBalances = async (accounts)=>{
        /* istanbul ignore if */ if (accounts == undefined || !Array.isArray(accounts)) throw Error(`'accounts' is a required parameter.`);
        const formData = {
            action: 'accounts_balances',
            accounts: accounts
        };
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log(`accounts_balances error '${error.message}'`);
                reject(error);
            }).then((json)=>{
                if (json === undefined || json.balances === undefined) {
                    resolve();
                    return;
                }
                // console.log('accounts_balances json', json);
                resolve(json);
            });
        });
    };
    const getAccountRepresentative = async (account)=>{
        /* istanbul ignore if */ if (account == undefined) throw Error(`'account' is a required parameter.`);
        // https://docs.nano.org/commands/rpc-protocol#account-representative
        const formData = {
            action: 'account_representative',
            account: account
        };
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `account_representative error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                if (json === undefined) resolve('');
                else {
                    const representative = json.representative;
                    resolve(representative);
                }
            });
        });
    };
    const getPrevious = async (account)=>{
        /* istanbul ignore if */ if (account == undefined) throw Error(`'account' is a required parameter.`);
        // https://docs.nano.org/commands/rpc-protocol#frontiers
        const formData = {
            action: 'accounts_frontiers',
            accounts: [
                account
            ],
            count: 1
        };
        // console.log( `accounts_frontiers request ${account}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `accounts_frontiers error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `accounts_frontiers response ${JSON.stringify( json )}` );
                if (json === undefined) resolve('');
                else if (json.frontiers == undefined) // console.log( `accounts_frontiers response ${account}` );
                resolve('');
                else if (json.frontiers == '') // console.log( `accounts_frontiers response ${account}` );
                resolve('');
                else {
                    const previous = json.frontiers[account];
                    // console.log( `accounts_frontiers response ${account} ${previous}` );
                    resolve(previous);
                }
            });
        });
    };
    const getAccountHistory = async (account, count, head, raw)=>{
        /* istanbul ignore if */ if (account === undefined) throw Error(`'account' is a required parameter.`);
        /* istanbul ignore if */ if (count === undefined) throw Error(`'count' is a required parameter.`);
        // https://docs.nano.org/commands/rpc-protocol/#account_history
        const formData = {
            action: 'account_history',
            account: account,
            count: count
        };
        if (head !== undefined) formData.head = head;
        if (raw !== undefined) formData.raw = raw;
        // console.log( `account_history request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `account_history error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `account_history response ${JSON.stringify( json )}` );
                resolve(json);
            });
        });
    };
    const getAccountInfo = async (account, representativeFlag)=>{
        /* istanbul ignore if */ if (account === undefined) throw Error(`'account' is a required parameter.`);
        // https://docs.nano.org/commands/rpc-protocol/#account_info
        const formData = {
            action: 'account_info',
            account: account
        };
        if (representativeFlag !== undefined) {
            if (representativeFlag) formData.representative = 'true';
            else formData.representative = 'false';
        }
        // console.log( `account_info request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `account_info error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `account_info response ${JSON.stringify( json )}` );
                resolve(json);
            });
        });
    };
    const getBlocks = async (hashes, jsonBlock)=>{
        /* istanbul ignore if */ if (hashes === undefined) throw Error(`'hashes' is a required parameter.`);
        // https://github.com/nanocurrency/nano-node/wiki/RPC-protocol#retrieve-multiple-blocks
        const formData = {
            action: 'blocks',
            hashes: hashes
        };
        if (jsonBlock !== undefined) formData.json_block = jsonBlock;
        // console.log( `blocks request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `blocks error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `blocks response ${JSON.stringify( json )}` );
                resolve(json);
            });
        });
    };
    const process = async (block, subtype)=>{
        /* istanbul ignore if */ if (block == undefined) throw Error(`'block' is a required parameter.'`);
        /* istanbul ignore if */ if (subtype == undefined) throw Error(`'subtype' is a required parameter.'`);
        // https://docs.nano.org/commands/rpc-protocol/#process
        const formData = {
            action: 'process',
            json_block: 'true',
            subtype: subtype,
            block: block
        };
        // console.log( `process block`, block, block.work );
        if (block.work === undefined) formData.do_work = true;
        // console.log( `process request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `process error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `process response ${JSON.stringify( json )}` );
                if (json === undefined) resolve('');
                else if (json.hash === undefined) {
                    // console.log(`process hash undefined`);
                    if (json.error === undefined) {
                        // console.log(`process error undefined`);
                        const jsonStr = JSON.stringify(json);
                        // console.log(`process reject ${jsonStr}`);
                        reject(Error(jsonStr));
                    } else reject(Error(json.error));
                } else {
                    const hash = json.hash;
                    resolve(hash);
                }
            });
        });
    };
    const getGeneratedWork = async (hash)=>{
        // https://docs.nano.org/commands/rpc-protocol#work-generate
        const formData = {
            action: 'work_generate',
            hash: hash
        };
        /* istanbul ignore if */ if (LOG_GET_GENERATED_WORK) console.log(`STARTED getGeneratedWork request ${JSON.stringify(formData)}`);
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `getGeneratedWork error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                if (json === undefined) resolve('');
                else {
                    /* istanbul ignore if */ if (LOG_GET_GENERATED_WORK) console.log(`SUCCESS getGeneratedWork response ${JSON.stringify(json)}`);
                    const work = json.work;
                    resolve(work);
                }
            });
        });
    };
    const getAccountsPending = async (accounts, count, source)=>{
        /* istanbul ignore if */ if (accounts === undefined) throw Error('accounts is a required parameter.');
        /* istanbul ignore if */ if (count === undefined) throw Error('count is a required parameter.');
        // https://docs.nano.org/commands/rpc-protocol/#accounts_pending
        const formData = {
            action: 'accounts_pending',
            accounts: accounts,
            count: count,
            threshold: 1
        };
        if (source !== undefined) {
            if (source) formData.source = 'true';
            else formData.source = 'false';
        }
        // console.log( `accounts_pending request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `accounts_pending error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `accounts_pending response ${JSON.stringify( json )}` );
                resolve(json);
            });
        });
    };
    const getBlockAccount = async (hash)=>{
        /* istanbul ignore if */ if (hash === undefined) throw Error('hash is a required parameter.');
        // https://github.com/nanocurrency/nano-node/wiki/RPC-protocol#block-account
        const formData = {
            action: 'block_account',
            hash: hash
        };
        // console.log( `block_account request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `block_account error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `block_account response ${JSON.stringify( json )}` );
                resolve(json);
            });
        });
    };
    const getFrontiers = async (account, count)=>{
        /* istanbul ignore if */ if (account === undefined) throw Error('account is a required parameter.');
        /* istanbul ignore if */ if (count === undefined) throw Error('count is a required parameter.');
        // https://github.com/nanocurrency/nano-node/wiki/RPC-protocol#frontiers
        const formData = {
            action: 'frontiers',
            account: account,
            count: count
        };
        // console.log( `frontiers request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `frontiers error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `frontiers response ${JSON.stringify( json )}` );
                resolve(json);
            });
        });
    };
    const getBlockCount = async ()=>{
        // https://docs.nano.org/commands/rpc-protocol/#block_count
        const formData = {
            action: 'block_count'
        };
        // console.log( `block_count request ${JSON.stringify( formData )}` );
        return new Promise((resolve, reject)=>{
            sendRequest(formData).catch((error)=>{
                // console.log( `block_count error '${error.message}'` );
                reject(error);
            }).then((json)=>{
                // console.log( `block_count response ${JSON.stringify( json )}` );
                resolve(json);
            });
        });
    };
    const setUrl = (newUrl)=>{
        // console.log('started serUrl', newUrl);
        url = newUrl;
        if (url !== undefined) {
            if (url.startsWith('https')) moduleRef = https;
            else if (url.startsWith('http')) moduleRef = http;
        }
    // console.log('success serUrl', newUrl, url);
    };
    const setModuleRef = (newModuleRef)=>{
        moduleRef = newModuleRef;
    };
    const setLogRequestErrors = (newLogRequestErrors)=>{
        logRequestErrors = newLogRequestErrors;
    };
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.setUrl = setUrl;
        exports.setModuleRef = setModuleRef;
        exports.setLogRequestErrors = setLogRequestErrors;
        exports.getFrontiers = getFrontiers;
        exports.getBlockAccount = getBlockAccount;
        exports.getAccountsPending = getAccountsPending;
        exports.getAccountBalanceRaw = getAccountBalanceRaw;
        exports.getAccountBalanceAndPendingRaw = getAccountBalanceAndPendingRaw;
        exports.getAccountsBalances = getAccountsBalances;
        exports.getAccountRepresentative = getAccountRepresentative;
        exports.getPrevious = getPrevious;
        exports.process = process;
        exports.getGeneratedWork = getGeneratedWork;
        exports.getAccountHistory = getAccountHistory;
        exports.getAccountInfo = getAccountInfo;
        exports.getBlocks = getBlocks;
        exports.getBlockCount = getBlockCount;
        exports.sendRequest = sendRequest;
        exports.log = console.log;
        exports.trace = console.trace;
        exports.setAuth = setAuth;
        return exports;
    })();
    // istanbul ignore else
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.bananocoin.bananojs.bananodeApi = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});
parcelRequire.register("jyaGj", function(module, exports) {

var $hiRx5 = parcelRequire("hiRx5");

var $gc5oM = parcelRequire("gc5oM");
var $e3b97a67e10dd6ec$var$https = module.exports;
for(var $e3b97a67e10dd6ec$var$key in $hiRx5)if ($hiRx5.hasOwnProperty($e3b97a67e10dd6ec$var$key)) $e3b97a67e10dd6ec$var$https[$e3b97a67e10dd6ec$var$key] = $hiRx5[$e3b97a67e10dd6ec$var$key];
$e3b97a67e10dd6ec$var$https.request = function(params, cb) {
    params = $e3b97a67e10dd6ec$var$validateParams(params);
    return $hiRx5.request.call(this, params, cb);
};
$e3b97a67e10dd6ec$var$https.get = function(params, cb) {
    params = $e3b97a67e10dd6ec$var$validateParams(params);
    return $hiRx5.get.call(this, params, cb);
};
function $e3b97a67e10dd6ec$var$validateParams(params) {
    if (typeof params === 'string') params = $gc5oM.parse(params);
    if (!params.protocol) params.protocol = 'https:';
    if (params.protocol !== 'https:') throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
    return params;
}

});
parcelRequire.register("hiRx5", function(module, exports) {

var $aPRWx = parcelRequire("aPRWx");

var $bQT6e = parcelRequire("bQT6e");

var $lenvT = parcelRequire("lenvT");

var $dwYHo = parcelRequire("dwYHo");

var $gc5oM = parcelRequire("gc5oM");
var $c98da48f90f27fb3$var$http = module.exports;
$c98da48f90f27fb3$var$http.request = function(opts, cb) {
    if (typeof opts === 'string') opts = $gc5oM.parse(opts);
    else opts = $lenvT(opts);
    // Normally, the page is loaded from http or https, so not specifying a protocol
    // will result in a (valid) protocol-relative url. However, this won't work if
    // the protocol is something else, like 'file:'
    var defaultProtocol = $parcel$global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || '/';
    // Necessary for IPv6 addresses
    if (host && host.indexOf(':') !== -1) host = '[' + host + ']';
    // This may be a relative url. The browser should always be able to interpret it correctly.
    opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
    opts.method = (opts.method || 'GET').toUpperCase();
    opts.headers = opts.headers || {};
    // Also valid opts.auth, opts.mode
    var req = new $aPRWx(opts);
    if (cb) req.on('response', cb);
    return req;
};
$c98da48f90f27fb3$var$http.get = function get(opts, cb) {
    var req = $c98da48f90f27fb3$var$http.request(opts, cb);
    req.end();
    return req;
};
$c98da48f90f27fb3$var$http.ClientRequest = $aPRWx;
$c98da48f90f27fb3$var$http.IncomingMessage = $bQT6e.IncomingMessage;
$c98da48f90f27fb3$var$http.Agent = function() {};
$c98da48f90f27fb3$var$http.Agent.defaultMaxSockets = 4;
$c98da48f90f27fb3$var$http.globalAgent = new $c98da48f90f27fb3$var$http.Agent();
$c98da48f90f27fb3$var$http.STATUS_CODES = $dwYHo;
$c98da48f90f27fb3$var$http.METHODS = [
    'CHECKOUT',
    'CONNECT',
    'COPY',
    'DELETE',
    'GET',
    'HEAD',
    'LOCK',
    'M-SEARCH',
    'MERGE',
    'MKACTIVITY',
    'MKCOL',
    'MOVE',
    'NOTIFY',
    'OPTIONS',
    'PATCH',
    'POST',
    'PROPFIND',
    'PROPPATCH',
    'PURGE',
    'PUT',
    'REPORT',
    'SEARCH',
    'SUBSCRIBE',
    'TRACE',
    'UNLOCK',
    'UNSUBSCRIBE'
];

});
parcelRequire.register("aPRWx", function(module, exports) {

var $36zFS = parcelRequire("36zFS");

var $gGU47 = parcelRequire("gGU47");
var $7e3882cb56e3e1fe$require$Buffer = $gGU47.Buffer;

var $cihaj = parcelRequire("cihaj");

var $baEok = parcelRequire("baEok");

var $bQT6e = parcelRequire("bQT6e");

var $8jMh9 = parcelRequire("8jMh9");
var $7e3882cb56e3e1fe$var$IncomingMessage = $bQT6e.IncomingMessage;
var $7e3882cb56e3e1fe$var$rStates = $bQT6e.readyStates;
function $7e3882cb56e3e1fe$var$decideMode(preferBinary, useFetch) {
    if ($cihaj.fetch && useFetch) return 'fetch';
    else if ($cihaj.mozchunkedarraybuffer) return 'moz-chunked-arraybuffer';
    else if ($cihaj.msstream) return 'ms-stream';
    else if ($cihaj.arraybuffer && preferBinary) return 'arraybuffer';
    else return 'text';
}
var $7e3882cb56e3e1fe$var$ClientRequest = module.exports = function(opts) {
    var self = this;
    $8jMh9.Writable.call(self);
    self._opts = opts;
    self._body = [];
    self._headers = {};
    if (opts.auth) self.setHeader('Authorization', 'Basic ' + $7e3882cb56e3e1fe$require$Buffer.from(opts.auth).toString('base64'));
    Object.keys(opts.headers).forEach(function(name) {
        self.setHeader(name, opts.headers[name]);
    });
    var preferBinary;
    var useFetch = true;
    if (opts.mode === 'disable-fetch' || 'requestTimeout' in opts && !$cihaj.abortController) {
        // If the use of XHR should be preferred. Not typically needed.
        useFetch = false;
        preferBinary = true;
    } else if (opts.mode === 'prefer-streaming') // If streaming is a high priority but binary compatibility and
    // the accuracy of the 'content-type' header aren't
    preferBinary = false;
    else if (opts.mode === 'allow-wrong-content-type') // If streaming is more important than preserving the 'content-type' header
    preferBinary = !$cihaj.overrideMimeType;
    else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') // Use binary if text streaming may corrupt data or the content-type header, or for speed
    preferBinary = true;
    else throw new Error('Invalid value for opts.mode');
    self._mode = $7e3882cb56e3e1fe$var$decideMode(preferBinary, useFetch);
    self._fetchTimer = null;
    self._socketTimeout = null;
    self._socketTimer = null;
    self.on('finish', function() {
        self._onFinish();
    });
};
$baEok($7e3882cb56e3e1fe$var$ClientRequest, $8jMh9.Writable);
$7e3882cb56e3e1fe$var$ClientRequest.prototype.setHeader = function(name, value) {
    var self = this;
    var lowerName = name.toLowerCase();
    // This check is not necessary, but it prevents warnings from browsers about setting unsafe
    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
    // http-browserify did it, so I will too.
    if ($7e3882cb56e3e1fe$var$unsafeHeaders.indexOf(lowerName) !== -1) return;
    self._headers[lowerName] = {
        name: name,
        value: value
    };
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.getHeader = function(name) {
    var header = this._headers[name.toLowerCase()];
    if (header) return header.value;
    return null;
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.removeHeader = function(name) {
    var self = this;
    delete self._headers[name.toLowerCase()];
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype._onFinish = function() {
    var self = this;
    if (self._destroyed) return;
    var opts = self._opts;
    if ('timeout' in opts && opts.timeout !== 0) self.setTimeout(opts.timeout);
    var headersObj = self._headers;
    var body = null;
    if (opts.method !== 'GET' && opts.method !== 'HEAD') body = new Blob(self._body, {
        type: (headersObj['content-type'] || {}).value || ''
    });
    // create flattened list of headers
    var headersList = [];
    Object.keys(headersObj).forEach(function(keyName) {
        var name = headersObj[keyName].name;
        var value = headersObj[keyName].value;
        if (Array.isArray(value)) value.forEach(function(v) {
            headersList.push([
                name,
                v
            ]);
        });
        else headersList.push([
            name,
            value
        ]);
    });
    if (self._mode === 'fetch') {
        var signal = null;
        if ($cihaj.abortController) {
            var controller = new AbortController();
            signal = controller.signal;
            self._fetchAbortController = controller;
            if ('requestTimeout' in opts && opts.requestTimeout !== 0) self._fetchTimer = $parcel$global.setTimeout(function() {
                self.emit('requestTimeout');
                if (self._fetchAbortController) self._fetchAbortController.abort();
            }, opts.requestTimeout);
        }
        $parcel$global.fetch(self._opts.url, {
            method: self._opts.method,
            headers: headersList,
            body: body || undefined,
            mode: 'cors',
            credentials: opts.withCredentials ? 'include' : 'same-origin',
            signal: signal
        }).then(function(response) {
            self._fetchResponse = response;
            self._resetTimers(false);
            self._connect();
        }, function(reason) {
            self._resetTimers(true);
            if (!self._destroyed) self.emit('error', reason);
        });
    } else {
        var xhr = self._xhr = new $parcel$global.XMLHttpRequest();
        try {
            xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
            $36zFS.nextTick(function() {
                self.emit('error', err);
            });
            return;
        }
        // Can't set responseType on really old browsers
        if ('responseType' in xhr) xhr.responseType = self._mode;
        if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;
        if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');
        if ('requestTimeout' in opts) {
            xhr.timeout = opts.requestTimeout;
            xhr.ontimeout = function() {
                self.emit('requestTimeout');
            };
        }
        headersList.forEach(function(header) {
            xhr.setRequestHeader(header[0], header[1]);
        });
        self._response = null;
        xhr.onreadystatechange = function() {
            switch(xhr.readyState){
                case $7e3882cb56e3e1fe$var$rStates.LOADING:
                case $7e3882cb56e3e1fe$var$rStates.DONE:
                    self._onXHRProgress();
                    break;
            }
        };
        // Necessary for streaming in Firefox, since xhr.response is ONLY defined
        // in onprogress, not in onreadystatechange with xhr.readyState = 3
        if (self._mode === 'moz-chunked-arraybuffer') xhr.onprogress = function() {
            self._onXHRProgress();
        };
        xhr.onerror = function() {
            if (self._destroyed) return;
            self._resetTimers(true);
            self.emit('error', new Error('XHR error'));
        };
        try {
            xhr.send(body);
        } catch (err1) {
            $36zFS.nextTick(function() {
                self.emit('error', err1);
            });
            return;
        }
    }
};
/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */ function $7e3882cb56e3e1fe$var$statusValid(xhr) {
    try {
        var status = xhr.status;
        return status !== null && status !== 0;
    } catch (e) {
        return false;
    }
}
$7e3882cb56e3e1fe$var$ClientRequest.prototype._onXHRProgress = function() {
    var self = this;
    self._resetTimers(false);
    if (!$7e3882cb56e3e1fe$var$statusValid(self._xhr) || self._destroyed) return;
    if (!self._response) self._connect();
    self._response._onXHRProgress(self._resetTimers.bind(self));
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype._connect = function() {
    var self = this;
    if (self._destroyed) return;
    self._response = new $7e3882cb56e3e1fe$var$IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self));
    self._response.on('error', function(err) {
        self.emit('error', err);
    });
    self.emit('response', self._response);
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype._write = function(chunk, encoding, cb) {
    var self = this;
    self._body.push(chunk);
    cb();
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype._resetTimers = function(done) {
    var self = this;
    $parcel$global.clearTimeout(self._socketTimer);
    self._socketTimer = null;
    if (done) {
        $parcel$global.clearTimeout(self._fetchTimer);
        self._fetchTimer = null;
    } else if (self._socketTimeout) self._socketTimer = $parcel$global.setTimeout(function() {
        self.emit('timeout');
    }, self._socketTimeout);
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.abort = $7e3882cb56e3e1fe$var$ClientRequest.prototype.destroy = function(err) {
    var self = this;
    self._destroyed = true;
    self._resetTimers(true);
    if (self._response) self._response._destroyed = true;
    if (self._xhr) self._xhr.abort();
    else if (self._fetchAbortController) self._fetchAbortController.abort();
    if (err) self.emit('error', err);
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.end = function(data, encoding, cb) {
    var self = this;
    if (typeof data === 'function') {
        cb = data;
        data = undefined;
    }
    $8jMh9.Writable.prototype.end.call(self, data, encoding, cb);
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.setTimeout = function(timeout, cb) {
    var self = this;
    if (cb) self.once('timeout', cb);
    self._socketTimeout = timeout;
    self._resetTimers(false);
};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.flushHeaders = function() {};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.setNoDelay = function() {};
$7e3882cb56e3e1fe$var$ClientRequest.prototype.setSocketKeepAlive = function() {};
// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var $7e3882cb56e3e1fe$var$unsafeHeaders = [
    'accept-charset',
    'accept-encoding',
    'access-control-request-headers',
    'access-control-request-method',
    'connection',
    'content-length',
    'cookie',
    'cookie2',
    'date',
    'dnt',
    'expect',
    'host',
    'keep-alive',
    'origin',
    'referer',
    'te',
    'trailer',
    'transfer-encoding',
    'upgrade',
    'via'
];

});
parcelRequire.register("cihaj", function(module, exports) {

$parcel$export(module.exports, "fetch", function () { return $8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3; }, function (v) { return $8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3 = v; });
$parcel$export(module.exports, "writableStream", function () { return $8f347b2c38a8a9de$export$37489d82087dc5d1; }, function (v) { return $8f347b2c38a8a9de$export$37489d82087dc5d1 = v; });
$parcel$export(module.exports, "abortController", function () { return $8f347b2c38a8a9de$export$f137bf8a46425a6f; }, function (v) { return $8f347b2c38a8a9de$export$f137bf8a46425a6f = v; });
$parcel$export(module.exports, "arraybuffer", function () { return $8f347b2c38a8a9de$export$724c4efdc2b90612; }, function (v) { return $8f347b2c38a8a9de$export$724c4efdc2b90612 = v; });
$parcel$export(module.exports, "msstream", function () { return $8f347b2c38a8a9de$export$a9aa1e45c4448986; }, function (v) { return $8f347b2c38a8a9de$export$a9aa1e45c4448986 = v; });
$parcel$export(module.exports, "mozchunkedarraybuffer", function () { return $8f347b2c38a8a9de$export$4c3c163e941f6ba3; }, function (v) { return $8f347b2c38a8a9de$export$4c3c163e941f6ba3 = v; });
$parcel$export(module.exports, "overrideMimeType", function () { return $8f347b2c38a8a9de$export$8f1269d6d73f87ef; }, function (v) { return $8f347b2c38a8a9de$export$8f1269d6d73f87ef = v; });
var $8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3;
var $8f347b2c38a8a9de$export$37489d82087dc5d1;
var $8f347b2c38a8a9de$export$f137bf8a46425a6f;
// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
var $8f347b2c38a8a9de$export$724c4efdc2b90612;
// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
var $8f347b2c38a8a9de$export$a9aa1e45c4448986;
var $8f347b2c38a8a9de$export$4c3c163e941f6ba3;
// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
var $8f347b2c38a8a9de$export$8f1269d6d73f87ef;
$8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3 = $8f347b2c38a8a9de$var$isFunction($parcel$global.fetch) && $8f347b2c38a8a9de$var$isFunction($parcel$global.ReadableStream);
$8f347b2c38a8a9de$export$37489d82087dc5d1 = $8f347b2c38a8a9de$var$isFunction($parcel$global.WritableStream);
$8f347b2c38a8a9de$export$f137bf8a46425a6f = $8f347b2c38a8a9de$var$isFunction($parcel$global.AbortController);
// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var $8f347b2c38a8a9de$var$xhr;
function $8f347b2c38a8a9de$var$getXHR() {
    // Cache the xhr value
    if ($8f347b2c38a8a9de$var$xhr !== undefined) return $8f347b2c38a8a9de$var$xhr;
    if ($parcel$global.XMLHttpRequest) {
        $8f347b2c38a8a9de$var$xhr = new $parcel$global.XMLHttpRequest();
        // If XDomainRequest is available (ie only, where xhr might not work
        // cross domain), use the page location. Otherwise use example.com
        // Note: this doesn't actually make an http request.
        try {
            $8f347b2c38a8a9de$var$xhr.open('GET', $parcel$global.XDomainRequest ? '/' : 'https://example.com');
        } catch (e) {
            $8f347b2c38a8a9de$var$xhr = null;
        }
    } else // Service workers don't have XHR
    $8f347b2c38a8a9de$var$xhr = null;
    return $8f347b2c38a8a9de$var$xhr;
}
function $8f347b2c38a8a9de$var$checkTypeSupport(type) {
    var xhr = $8f347b2c38a8a9de$var$getXHR();
    if (!xhr) return false;
    try {
        xhr.responseType = type;
        return xhr.responseType === type;
    } catch (e) {}
    return false;
}
$8f347b2c38a8a9de$export$724c4efdc2b90612 = $8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3 || $8f347b2c38a8a9de$var$checkTypeSupport('arraybuffer');
$8f347b2c38a8a9de$export$a9aa1e45c4448986 = !$8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3 && $8f347b2c38a8a9de$var$checkTypeSupport('ms-stream');
$8f347b2c38a8a9de$export$4c3c163e941f6ba3 = !$8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3 && $8f347b2c38a8a9de$var$checkTypeSupport('moz-chunked-arraybuffer');
$8f347b2c38a8a9de$export$8f1269d6d73f87ef = $8f347b2c38a8a9de$export$e7aa7bc5c1b3cfb3 || ($8f347b2c38a8a9de$var$getXHR() ? $8f347b2c38a8a9de$var$isFunction($8f347b2c38a8a9de$var$getXHR().overrideMimeType) : false);
function $8f347b2c38a8a9de$var$isFunction(value) {
    return typeof value === 'function';
}
$8f347b2c38a8a9de$var$xhr = null // Help gc
;

});

parcelRequire.register("bQT6e", function(module, exports) {

$parcel$export(module.exports, "readyStates", function () { return $8a0f4aa787c3ef50$export$8e4da25483e314e6; }, function (v) { return $8a0f4aa787c3ef50$export$8e4da25483e314e6 = v; });
$parcel$export(module.exports, "IncomingMessage", function () { return $8a0f4aa787c3ef50$export$9d4333345ffa4fd6; }, function (v) { return $8a0f4aa787c3ef50$export$9d4333345ffa4fd6 = v; });
var $8a0f4aa787c3ef50$export$8e4da25483e314e6;
var $8a0f4aa787c3ef50$export$9d4333345ffa4fd6;

var $36zFS = parcelRequire("36zFS");

var $gGU47 = parcelRequire("gGU47");
var $8a0f4aa787c3ef50$require$Buffer = $gGU47.Buffer;

var $cihaj = parcelRequire("cihaj");

var $baEok = parcelRequire("baEok");

var $8jMh9 = parcelRequire("8jMh9");
var $8a0f4aa787c3ef50$var$rStates = $8a0f4aa787c3ef50$export$8e4da25483e314e6 = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
};
var $8a0f4aa787c3ef50$var$IncomingMessage = $8a0f4aa787c3ef50$export$9d4333345ffa4fd6 = function(xhr, response, mode, resetTimers) {
    var self = this;
    $8jMh9.Readable.call(self);
    self._mode = mode;
    self.headers = {};
    self.rawHeaders = [];
    self.trailers = {};
    self.rawTrailers = [];
    // Fake the 'close' event, but only once 'end' fires
    self.on('end', function() {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        $36zFS.nextTick(function() {
            self.emit('close');
        });
    });
    if (mode === 'fetch') {
        self._fetchResponse = response;
        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
        response.headers.forEach(function(header, key) {
            self.headers[key.toLowerCase()] = header;
            self.rawHeaders.push(key, header);
        });
        if ($cihaj.writableStream) {
            var writable = new WritableStream({
                write: function(chunk) {
                    resetTimers(false);
                    return new Promise(function(resolve, reject) {
                        if (self._destroyed) reject();
                        else if (self.push($8a0f4aa787c3ef50$require$Buffer.from(chunk))) resolve();
                        else self._resumeFetch = resolve;
                    });
                },
                close: function() {
                    resetTimers(true);
                    if (!self._destroyed) self.push(null);
                },
                abort: function(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit('error', err);
                }
            });
            try {
                response.body.pipeTo(writable).catch(function(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit('error', err);
                });
                return;
            } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
        }
        // fallback for when writableStream or pipeTo aren't available
        var reader = response.body.getReader();
        function read() {
            reader.read().then(function(result) {
                if (self._destroyed) return;
                resetTimers(result.done);
                if (result.done) {
                    self.push(null);
                    return;
                }
                self.push($8a0f4aa787c3ef50$require$Buffer.from(result.value));
                read();
            }).catch(function(err) {
                resetTimers(true);
                if (!self._destroyed) self.emit('error', err);
            });
        }
        read();
    } else {
        self._xhr = xhr;
        self._pos = 0;
        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
            var matches = header.match(/^([^:]+):\s*(.*)/);
            if (matches) {
                var key = matches[1].toLowerCase();
                if (key === 'set-cookie') {
                    if (self.headers[key] === undefined) self.headers[key] = [];
                    self.headers[key].push(matches[2]);
                } else if (self.headers[key] !== undefined) self.headers[key] += ', ' + matches[2];
                else self.headers[key] = matches[2];
                self.rawHeaders.push(matches[1], matches[2]);
            }
        });
        self._charset = 'x-user-defined';
        if (!$cihaj.overrideMimeType) {
            var mimeType = self.rawHeaders['mime-type'];
            if (mimeType) {
                var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
                if (charsetMatch) self._charset = charsetMatch[1].toLowerCase();
            }
            if (!self._charset) self._charset = 'utf-8' // best guess
            ;
        }
    }
};
$baEok($8a0f4aa787c3ef50$var$IncomingMessage, $8jMh9.Readable);
$8a0f4aa787c3ef50$var$IncomingMessage.prototype._read = function() {
    var self = this;
    var resolve = self._resumeFetch;
    if (resolve) {
        self._resumeFetch = null;
        resolve();
    }
};
$8a0f4aa787c3ef50$var$IncomingMessage.prototype._onXHRProgress = function(resetTimers) {
    var self = this;
    var xhr = self._xhr;
    var response = null;
    switch(self._mode){
        case 'text':
            response = xhr.responseText;
            if (response.length > self._pos) {
                var newData = response.substr(self._pos);
                if (self._charset === 'x-user-defined') {
                    var buffer = $8a0f4aa787c3ef50$require$Buffer.alloc(newData.length);
                    for(var i = 0; i < newData.length; i++)buffer[i] = newData.charCodeAt(i) & 0xff;
                    self.push(buffer);
                } else self.push(newData, self._charset);
                self._pos = response.length;
            }
            break;
        case 'arraybuffer':
            if (xhr.readyState !== $8a0f4aa787c3ef50$var$rStates.DONE || !xhr.response) break;
            response = xhr.response;
            self.push($8a0f4aa787c3ef50$require$Buffer.from(new Uint8Array(response)));
            break;
        case 'moz-chunked-arraybuffer':
            response = xhr.response;
            if (xhr.readyState !== $8a0f4aa787c3ef50$var$rStates.LOADING || !response) break;
            self.push($8a0f4aa787c3ef50$require$Buffer.from(new Uint8Array(response)));
            break;
        case 'ms-stream':
            response = xhr.response;
            if (xhr.readyState !== $8a0f4aa787c3ef50$var$rStates.LOADING) break;
            var reader = new $parcel$global.MSStreamReader();
            reader.onprogress = function() {
                if (reader.result.byteLength > self._pos) {
                    self.push($8a0f4aa787c3ef50$require$Buffer.from(new Uint8Array(reader.result.slice(self._pos))));
                    self._pos = reader.result.byteLength;
                }
            };
            reader.onload = function() {
                resetTimers(true);
                self.push(null);
            };
            // reader.onerror = ??? // TODO: this
            reader.readAsArrayBuffer(response);
            break;
    }
    // The ms-stream case handles end separately in reader.onload()
    if (self._xhr.readyState === $8a0f4aa787c3ef50$var$rStates.DONE && self._mode !== 'ms-stream') {
        resetTimers(true);
        self.push(null);
    }
};

});


parcelRequire.register("lenvT", function(module, exports) {
module.exports = $f74d2512cc42c35f$var$extend;
var $f74d2512cc42c35f$var$hasOwnProperty = Object.prototype.hasOwnProperty;
function $f74d2512cc42c35f$var$extend() {
    var target = {};
    for(var i = 0; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source)if ($f74d2512cc42c35f$var$hasOwnProperty.call(source, key)) target[key] = source[key];
    }
    return target;
}

});

parcelRequire.register("dwYHo", function(module, exports) {
module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
};

});

parcelRequire.register("gc5oM", function(module, exports) {

$parcel$export(module.exports, "parse", function () { return $bca1f46183471e6b$export$98e6a39c04603d36; }, function (v) { return $bca1f46183471e6b$export$98e6a39c04603d36 = v; });
var $bca1f46183471e6b$export$98e6a39c04603d36;
var $bca1f46183471e6b$export$f7ad0328861e2f03;
var $bca1f46183471e6b$export$7daf1a5d2f4dd018;
var $bca1f46183471e6b$export$d9468344d3651243;
var $bca1f46183471e6b$export$59d795186a5d3f58;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $27m14 = parcelRequire("27m14");

var $86BhX = parcelRequire("86BhX");
$bca1f46183471e6b$export$98e6a39c04603d36 = $bca1f46183471e6b$var$urlParse;
$bca1f46183471e6b$export$f7ad0328861e2f03 = $bca1f46183471e6b$var$urlResolve;
$bca1f46183471e6b$export$7daf1a5d2f4dd018 = $bca1f46183471e6b$var$urlResolveObject;
$bca1f46183471e6b$export$d9468344d3651243 = $bca1f46183471e6b$var$urlFormat;
$bca1f46183471e6b$export$59d795186a5d3f58 = $bca1f46183471e6b$var$Url;
function $bca1f46183471e6b$var$Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var $bca1f46183471e6b$var$protocolPattern = /^([a-z0-9.+-]+:)/i, $bca1f46183471e6b$var$portPattern = /:[0-9]*$/, // Special case for a simple path URL
$bca1f46183471e6b$var$simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
$bca1f46183471e6b$var$delims = [
    '<',
    '>',
    '"',
    '`',
    ' ',
    '\r',
    '\n',
    '\t'
], // RFC 2396: characters not allowed for various reasons.
$bca1f46183471e6b$var$unwise = [
    '{',
    '}',
    '|',
    '\\',
    '^',
    '`'
].concat($bca1f46183471e6b$var$delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
$bca1f46183471e6b$var$autoEscape = [
    '\''
].concat($bca1f46183471e6b$var$unwise), // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
$bca1f46183471e6b$var$nonHostChars = [
    '%',
    '/',
    '?',
    ';',
    '#'
].concat($bca1f46183471e6b$var$autoEscape), $bca1f46183471e6b$var$hostEndingChars = [
    '/',
    '?',
    '#'
], $bca1f46183471e6b$var$hostnameMaxLen = 255, $bca1f46183471e6b$var$hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, $bca1f46183471e6b$var$hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
$bca1f46183471e6b$var$unsafeProtocol = {
    'javascript': true,
    'javascript:': true
}, // protocols that never have a hostname.
$bca1f46183471e6b$var$hostlessProtocol = {
    'javascript': true,
    'javascript:': true
}, // protocols that always contain a // bit.
$bca1f46183471e6b$var$slashedProtocol = {
    'http': true,
    'https': true,
    'ftp': true,
    'gopher': true,
    'file': true,
    'http:': true,
    'https:': true,
    'ftp:': true,
    'gopher:': true,
    'file:': true
};

var $fZNLP = parcelRequire("fZNLP");
function $bca1f46183471e6b$var$urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && $86BhX.isObject(url) && url instanceof $bca1f46183471e6b$var$Url) return url;
    var u = new $bca1f46183471e6b$var$Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
$bca1f46183471e6b$var$Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!$86BhX.isString(url)) throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'), splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#', uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);
    var rest = url;
    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();
    if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = $bca1f46183471e6b$var$simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = $fZNLP.parse(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = '';
                this.query = {};
            }
            return this;
        }
    }
    var proto = $bca1f46183471e6b$var$protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && $bca1f46183471e6b$var$hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!$bca1f46183471e6b$var$hostlessProtocol[proto] && (slashes || proto && !$bca1f46183471e6b$var$slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < $bca1f46183471e6b$var$hostEndingChars.length; i++){
            var hec = rest.indexOf($bca1f46183471e6b$var$hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
        else // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < $bca1f46183471e6b$var$nonHostChars.length; i++){
            var hec = rest.indexOf($bca1f46183471e6b$var$nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || '';
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match($bca1f46183471e6b$var$hostnamePartPattern)) {
                    var newpart = '';
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += 'x';
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match($bca1f46183471e6b$var$hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match($bca1f46183471e6b$var$hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = '/' + notHost.join('.') + rest;
                        this.hostname = validParts.join('.');
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > $bca1f46183471e6b$var$hostnameMaxLen) this.hostname = '';
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        this.hostname = $27m14.toASCII(this.hostname);
        var p = this.port ? ':' + this.port : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host;
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== '/') rest = '/' + rest;
        }
    }
    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!$bca1f46183471e6b$var$unsafeProtocol[lowerProto]) // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for(var i = 0, l = $bca1f46183471e6b$var$autoEscape.length; i < l; i++){
        var ae = $bca1f46183471e6b$var$autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = $fZNLP.parse(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = '';
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if ($bca1f46183471e6b$var$slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = '/';
    //to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function $bca1f46183471e6b$var$urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if ($86BhX.isString(obj)) obj = $bca1f46183471e6b$var$urlParse(obj);
    if (!(obj instanceof $bca1f46183471e6b$var$Url)) return $bca1f46183471e6b$var$Url.prototype.format.call(obj);
    return obj.format();
}
$bca1f46183471e6b$var$Url.prototype.format = function() {
    var auth = this.auth || '';
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
    }
    var protocol = this.protocol || '', pathname = this.pathname || '', hash = this.hash || '', host = false, query = '';
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
        if (this.port) host += ':' + this.port;
    }
    if (this.query && $86BhX.isObject(this.query) && Object.keys(this.query).length) query = $fZNLP.stringify(this.query);
    var search = this.search || query && '?' + query || '';
    if (protocol && protocol.substr(-1) !== ':') protocol += ':';
    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes || (!protocol || $bca1f46183471e6b$var$slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) host = '';
    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');
    return protocol + host + pathname + search + hash;
};
function $bca1f46183471e6b$var$urlResolve(source, relative) {
    return $bca1f46183471e6b$var$urlParse(source, false, true).resolve(relative);
}
$bca1f46183471e6b$var$Url.prototype.resolve = function(relative) {
    return this.resolveObject($bca1f46183471e6b$var$urlParse(relative, false, true)).format();
};
function $bca1f46183471e6b$var$urlResolveObject(source, relative) {
    if (!source) return relative;
    return $bca1f46183471e6b$var$urlParse(source, false, true).resolveObject(relative);
}
$bca1f46183471e6b$var$Url.prototype.resolveObject = function(relative) {
    if ($86BhX.isString(relative)) {
        var rel = new $bca1f46183471e6b$var$Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new $bca1f46183471e6b$var$Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== 'protocol') result[rkey] = relative[rkey];
        }
        //urlParse appends trailing / to urls like http://www.example.com
        if ($bca1f46183471e6b$var$slashedProtocol[result.protocol] && result.hostname && !result.pathname) result.path = result.pathname = '/';
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!$bca1f46183471e6b$var$slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !$bca1f46183471e6b$var$hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || '').split('/');
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = '';
            if (!relative.hostname) relative.hostname = '';
            if (relPath[0] !== '') relPath.unshift('');
            if (relPath.length < 2) relPath.unshift('');
            result.pathname = relPath.join('/');
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || '';
            var s = result.search || '';
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/', isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/', mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split('/') || [], relPath = relative.pathname && relative.pathname.split('/') || [], psychotic = result.protocol && !$bca1f46183471e6b$var$slashedProtocol[result.protocol];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
        result.hostname = '';
        result.port = null;
        if (result.host) {
            if (srcPath[0] === '') srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = '';
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === '') relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === '' ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (!$86BhX.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!$86BhX.isNull(result.pathname) || !$86BhX.isNull(result.search)) result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) result.path = '/' + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';
    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === '.') srcPath.splice(i, 1);
        else if (last === '..') {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--;)srcPath.unshift('..');
    if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) srcPath.unshift('');
    if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') srcPath.push('');
    var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';
    // put the host back
    if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift('');
    if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
    } else result.pathname = srcPath.join('/');
    //to support request.http
    if (!$86BhX.isNull(result.pathname) || !$86BhX.isNull(result.search)) result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
$bca1f46183471e6b$var$Url.prototype.parseHost = function() {
    var host = this.host;
    var port = $bca1f46183471e6b$var$portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ':') this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};

});
parcelRequire.register("27m14", function(module, exports) {
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof $parcel$global == 'object' && $parcel$global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = '-', /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        'overflow': 'Overflow: input needs wider integers to process',
        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
        'invalid-input': 'Invalid input'
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + '@';
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, '\x2E');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = '';
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join('');
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error('not-basic');
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error('invalid-input');
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error('overflow');
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error('overflow');
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error('overflow');
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error('overflow');
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error('overflow');
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join('');
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ 'version': '1.3.2',
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ 'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) define('punycode', function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) freeModule.exports = punycode;
        else for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else root.punycode = punycode;
})(this);

});

parcelRequire.register("86BhX", function(module, exports) {
'use strict';
module.exports = {
    isString: function(arg) {
        return typeof arg === 'string';
    },
    isObject: function(arg) {
        return typeof arg === 'object' && arg !== null;
    },
    isNull: function(arg) {
        return arg === null;
    },
    isNullOrUndefined: function(arg) {
        return arg == null;
    }
};

});

parcelRequire.register("fZNLP", function(module, exports) {

$parcel$export(module.exports, "parse", function () { return $ba5328e9a0694f7d$export$98e6a39c04603d36; }, function (v) { return $ba5328e9a0694f7d$export$98e6a39c04603d36 = v; });
$parcel$export(module.exports, "stringify", function () { return $ba5328e9a0694f7d$export$fac44ee5b035f737; }, function (v) { return $ba5328e9a0694f7d$export$fac44ee5b035f737 = v; });
var $ba5328e9a0694f7d$export$2f872c0f2117be69;
var $ba5328e9a0694f7d$export$98e6a39c04603d36;
var $ba5328e9a0694f7d$export$c564cdbbe6da493;
var $ba5328e9a0694f7d$export$fac44ee5b035f737;
'use strict';

$ba5328e9a0694f7d$export$2f872c0f2117be69 = $ba5328e9a0694f7d$export$98e6a39c04603d36 = (parcelRequire("fkHjw"));

$ba5328e9a0694f7d$export$c564cdbbe6da493 = $ba5328e9a0694f7d$export$fac44ee5b035f737 = (parcelRequire("g5lyZ"));

});
parcelRequire.register("fkHjw", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function $b29a527f58a5cd3e$var$hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};
    if (typeof qs !== 'string' || qs.length === 0) return obj;
    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') maxKeys = options.maxKeys;
    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) len = maxKeys;
    for(var i = 0; i < len; ++i){
        var x = qs[i].replace(regexp, '%20'), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
        } else {
            kstr = x;
            vstr = '';
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!$b29a527f58a5cd3e$var$hasOwnProperty(obj, k)) obj[k] = v;
        else if ($b29a527f58a5cd3e$var$isArray(obj[k])) obj[k].push(v);
        else obj[k] = [
            obj[k],
            v
        ];
    }
    return obj;
};
var $b29a527f58a5cd3e$var$isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

});

parcelRequire.register("g5lyZ", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $bb5dd6ff6910a976$var$stringifyPrimitive = function(v) {
    switch(typeof v){
        case 'string':
            return v;
        case 'boolean':
            return v ? 'true' : 'false';
        case 'number':
            return isFinite(v) ? v : '';
        default:
            return '';
    }
};
module.exports = function(obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) obj = undefined;
    if (typeof obj === 'object') return $bb5dd6ff6910a976$var$map($bb5dd6ff6910a976$var$objectKeys(obj), function(k) {
        var ks = encodeURIComponent($bb5dd6ff6910a976$var$stringifyPrimitive(k)) + eq;
        if ($bb5dd6ff6910a976$var$isArray(obj[k])) return $bb5dd6ff6910a976$var$map(obj[k], function(v) {
            return ks + encodeURIComponent($bb5dd6ff6910a976$var$stringifyPrimitive(v));
        }).join(sep);
        else return ks + encodeURIComponent($bb5dd6ff6910a976$var$stringifyPrimitive(obj[k]));
    }).join(sep);
    if (!name) return '';
    return encodeURIComponent($bb5dd6ff6910a976$var$stringifyPrimitive(name)) + eq + encodeURIComponent($bb5dd6ff6910a976$var$stringifyPrimitive(obj));
};
var $bb5dd6ff6910a976$var$isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};
function $bb5dd6ff6910a976$var$map(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for(var i = 0; i < xs.length; i++)res.push(f(xs[i], i));
    return res;
}
var $bb5dd6ff6910a976$var$objectKeys = Object.keys || function(obj) {
    var res = [];
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    return res;
};

});






parcelRequire.register("5H3z6", function(module, exports) {
'use strict';



// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    const nacl = (parcelRequire("aEibP"));
    const bananoUtil = (parcelRequire("5GmJx"));
    const blake = (parcelRequire("E2LX7"));
    const LOG_SWEEP_SEED_TO_INDEX = false;
    const LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO = false;
    const LOG_SEND = false;
    const LOG_RECEIVE = false;
    /**
   * Gets the camo public key from a private key.
   *
   * a normal banano public key is used in ECDSA.
   *
   * a camo public key is used in ECDH.
   *
   * this is why the derivation is different for the two keys.
   *
   * @memberof CamoUtil
   * @param {string} privateKey the private key.
   * @return {string} the camo public key.
   */ const getCamoPublicKey = (privateKey)=>{
        const privateKeyBytes = bananoUtil.hexToBytes(privateKey);
        const camoPublicKeyBytes = getCamoPublicKeyBytes(privateKeyBytes);
        const camoPublicKey = bananoUtil.bytesToHex(camoPublicKeyBytes);
        return camoPublicKey;
    };
    const getCamoPublicKeyBytes = (privateKeyBytes)=>{
        const camoPrivateKeyBytes = nacl.camo.hashsecret(privateKeyBytes);
        const camoPublicKeyBytes = nacl.camo.scalarMult.base(camoPrivateKeyBytes);
        return camoPublicKeyBytes;
    };
    const getSharedSecretBytes = (privateKeyBytes, publicKeyBytes)=>{
        const camoPrivateKeyBytes = nacl.camo.hashsecret(privateKeyBytes);
        const secretBytes = nacl.camo.scalarMult(camoPrivateKeyBytes, publicKeyBytes);
        const context = blake.blake2bInit(32);
        blake.blake2bUpdate(context, secretBytes);
        const hashedSecretBytes = blake.blake2bFinal(context);
        return hashedSecretBytes;
    };
    /**
   * Gets the shared secret from a camo public key and a private key.
   *
   * @memberof CamoUtil
   * @param {string} privateKey the private key.
   * @param {string} publicKey the public key.
   * @return {string} the shared secret.
   */ const getSharedSecret = (privateKey, publicKey)=>{
        const privateKeyBytes = bananoUtil.hexToBytes(privateKey);
        const publicKeyBytes = bananoUtil.hexToBytes(publicKey);
        const secretBytes = getSharedSecretBytes(privateKeyBytes, publicKeyBytes);
        const secret = bananoUtil.bytesToHex(secretBytes);
        return secret;
    };
    const isUnopenedPrivateKeyInSeed = async (bananodeApi, seed, seedIx, amountPrefix)=>{
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        return await isUnopenedPrivateKey(bananodeApi, privateKey, amountPrefix);
    };
    const isUnopenedPrivateKey = async (bananodeApi, privateKey, amountPrefix)=>{
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        const account = bananoUtil.getAccount(publicKey, amountPrefix);
        // console.log( 'account', account );
        const history = await bananodeApi.getAccountHistory(account, 1);
        // console.log( 'history', JSON.stringify( history, undefined, '  ' ) );
        const historyHistory = history.history;
        // console.log( 'historyHistory', JSON.stringify( historyHistory, undefined, '  ' ) );
        const historyHistoryLength = historyHistory.length;
        // console.log( 'historyHistoryLength', historyHistoryLength );
        const historyHistoryLengthIsZero = historyHistoryLength == 0;
        // console.log( 'isUnopenedPrivateKey', account, historyHistoryLengthIsZero );
        return historyHistoryLengthIsZero;
    };
    const getFirstUnopenedPrivateKey = async (bananodeApi, seed, amountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (seed === undefined) throw Error('seed is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        let seedIx = 0;
        let isUnopenedPrivateKeyFlag = await isUnopenedPrivateKeyInSeed(bananodeApi, seed, seedIx, amountPrefix);
        while(!isUnopenedPrivateKeyFlag){
            seedIx++;
            isUnopenedPrivateKeyFlag = await isUnopenedPrivateKeyInSeed(bananodeApi, seed, seedIx, amountPrefix);
        }
        //    console.log( 'getFirstUnopenedPrivateKey', seed, seedIx );
        return bananoUtil.getPrivateKey(seed, seedIx);
    };
    const receiveSeed = async (bananodeApi, seed1, amountPrefix)=>{
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (seed1 === undefined) throw Error('seed is a required parameter.');
        const unopenedAccounts = [];
        const privateKeyByAccount = {};
        const publicKeyByAccount = {};
        const representativeByAccount = {};
        const getAccount = async (seed, seedIx)=>{
            const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
            const publicKey = await bananoUtil.getPublicKey(privateKey);
            const account = bananoUtil.getAccount(publicKey, amountPrefix);
            const camoPublicKey = getCamoPublicKey(privateKey);
            const camoAccount = bananoUtil.getAccount(camoPublicKey, amountPrefix);
            privateKeyByAccount[account] = privateKey;
            publicKeyByAccount[account] = publicKey;
            representativeByAccount[account] = camoAccount;
            return account;
        };
        let seedIx1 = 0;
        let isUnopenedPrivateKeyFlag = await isUnopenedPrivateKeyInSeed(bananodeApi, seed1, seedIx1, amountPrefix);
        unopenedAccounts.push(await getAccount(seed1, seedIx1, amountPrefix));
        while(!isUnopenedPrivateKeyFlag){
            /* istanbul ignore if */ if (LOG_RECEIVE) console.log('INTERIM camo.receiveSeed', 'unopenedAccounts', 'seedIx', seedIx1);
            seedIx1++;
            unopenedAccounts.push(await getAccount(seed1, seedIx1));
            isUnopenedPrivateKeyFlag = await isUnopenedPrivateKeyInSeed(bananodeApi, seed1, seedIx1, amountPrefix);
        }
        /* istanbul ignore if */ if (LOG_RECEIVE) console.log('accountsPending request', unopenedAccounts);
        const accountsPending = await bananodeApi.getAccountsPending(unopenedAccounts, -1);
        /* istanbul ignore if */ if (LOG_RECEIVE) console.log('accountsPending response', accountsPending);
        const accounts = Object.keys(accountsPending.blocks);
        const accountOpenAndReceiveBlocks = [];
        for(let accountIx = 0; accountIx < accounts.length; accountIx++){
            const account = accounts[accountIx];
            const privateKey = privateKeyByAccount[account];
            const publicKey = publicKeyByAccount[account];
            const representative = representativeByAccount[account];
            let isAccountOpenFlag = await bananoUtil.isAccountOpen(bananodeApi, account);
            const pendingBlockHashs = Object.keys(accountsPending.blocks[account]);
            for(let pendingBlockHashIx = 0; pendingBlockHashIx < pendingBlockHashs.length; pendingBlockHashIx++){
                const pendingBlockHash = pendingBlockHashs[pendingBlockHashIx];
                const pendingValueRaw = accountsPending.blocks[account][pendingBlockHash];
                if (pendingBlockHashIx !== 0) isAccountOpenFlag = false;
                const blockHash = await receiveBlock(bananodeApi, isAccountOpenFlag, account, privateKey, publicKey, representative, pendingBlockHash, pendingValueRaw, amountPrefix);
                accountOpenAndReceiveBlocks.push(blockHash);
            }
        }
        return accountOpenAndReceiveBlocks;
    };
    const receiveBlock = async (bananodeApi, isAccountOpenFlag, account, privateKey, publicKey, representative, pendingBlockHash, pendingValueRaw, amountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (isAccountOpenFlag === undefined) throw Error('isAccountOpenFlag is a required parameter.');
        /* istanbul ignore if */ if (account === undefined) throw Error('account is a required parameter.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (publicKey === undefined) throw Error('publicKey is a required parameter.');
        /* istanbul ignore if */ if (representative === undefined) throw Error('representative is a required parameter.');
        /* istanbul ignore if */ if (pendingBlockHash === undefined) throw Error('pendingBlockHash is a required parameter.');
        /* istanbul ignore if */ if (pendingValueRaw === undefined) throw Error('pendingValueRaw is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const frontiers = await bananodeApi.getFrontiers(account, 1);
        if (isAccountOpenFlag) {
            const previous = frontiers.frontiers[account];
            const hash = pendingBlockHash;
            const valueRaw = pendingValueRaw;
            const receiveBlockHash = await bananoUtil.receive(bananodeApi, privateKey, publicKey, representative, previous, hash, valueRaw, amountPrefix);
            /* istanbul ignore if */ if (LOG_SWEEP_SEED_TO_INDEX) console.log(`accountsPending receiveBlockHash[${accountIx}]`, account, receiveBlockHash);
            return receiveBlockHash;
        } else {
            const pending = pendingBlockHash;
            const openBlockHash = await bananoUtil.open(bananodeApi, privateKey, publicKey, representative, pending, pendingValueRaw, amountPrefix);
            /* istanbul ignore if */ if (LOG_SWEEP_SEED_TO_INDEX) console.log(`accountsPending openBlockHash[${accountIx}]`, account, openBlockHash);
            return openBlockHash;
        }
    };
    const getSharedSecretFromRepresentative = async (bananodeApi, toPrivateKey, fromPublicKey, amountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (toPrivateKey === undefined) throw Error('toPrivateKey is a required parameter.');
        /* istanbul ignore if */ if (fromPublicKey === undefined) throw Error('fromPublicKey is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const fromAccount = bananoUtil.getAccount(fromPublicKey, amountPrefix);
        const fromRepresentative = await bananodeApi.getAccountRepresentative(fromAccount);
        if (fromRepresentative) {
            const fromCamoPublicKey = bananoUtil.getAccountPublicKey(fromRepresentative);
            const sharedSecret = getSharedSecret(toPrivateKey, fromCamoPublicKey);
            return sharedSecret;
        } else return undefined;
    };
    const getBalanceRaw = async (bananodeApi, toPrivateKey, fromPublicKey, amountPrefix)=>{
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const sharedSecret = await getSharedSecretFromRepresentative(bananodeApi, toPrivateKey, fromPublicKey, amountPrefix);
        const seed = sharedSecret;
        const ZERO = BigInt(0);
        let balanceRaw = ZERO;
        let seedIx = 0;
        let accountHasBalance = true;
        while(accountHasBalance){
            const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
            const publicKey = await bananoUtil.getPublicKey(privateKey);
            const account = bananoUtil.getAccount(publicKey, amountPrefix);
            const accountBalanceRaw = await bananodeApi.getAccountBalanceRaw(account);
            const accountBalanceRawBigInt = BigInt(accountBalanceRaw);
            // console.log( 'getBalanceRaw', account, accountBalanceRawBigInt);
            if (accountBalanceRawBigInt == ZERO) accountHasBalance = false;
            else {
                balanceRaw += accountBalanceRawBigInt;
                seedIx++;
            }
        }
        return balanceRaw.toString();
    };
    // def myfunc(x):
    //    powers = []
    //    i = 1
    //    while i <= x:
    //        if i & x:
    //            powers.append(i)
    //        i <<= 1
    //    return powers
    const splitBigIntIntoPowersOfTwo = (value)=>{
        // const ZERO = BigInt( 0 );
        const ONE = BigInt(1);
        /* istanbul ignore if */ if (LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO) console.log('STARTED splitBigIntIntoPowersOfTwo', 'value', value);
        const powersOfTwo = [];
        let divisor = ONE;
        /* istanbul ignore if */ if (LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO) console.log(`INTERIM splitBigIntIntoPowersOfTwo`, 'value', value, 'divisor', divisor);
        while(divisor <= value){
            /* istanbul ignore if */ if (LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO) console.log(`INTERIM splitBigIntIntoPowersOfTwo`, 'while ( divisor <= value )', 'value', value, 'divisor', divisor);
            if (divisor & value) {
                /* istanbul ignore if */ if (LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO) console.log(`INTERIM splitBigIntIntoPowersOfTwo`, '(divisor & value)=true', 'value', value, 'divisor', divisor);
                powersOfTwo.push(divisor);
            } else /* istanbul ignore if */ if (LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO) console.log(`INTERIM splitBigIntIntoPowersOfTwo`, '(divisor & value)=false', 'value', value, 'divisor', divisor);
            divisor <<= ONE;
            /* istanbul ignore if */ if (LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO) console.log(`INTERIM splitBigIntIntoPowersOfTwo`, value, divisor);
        }
        /* istanbul ignore if */ if (LOG_SPLIT_BIG_INT_INTO_POWERS_OF_TWO) console.log('SUCCESS splitBigIntIntoPowersOfTwo', value, powersOfTwo);
        return powersOfTwo;
    };
    const send = async (bananodeApi, fundingPrivateKey, fromPrivateKey, toPublicKey, amountRaw, amountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (fundingPrivateKey === undefined) throw Error('fundingPrivateKey is a required parameter.');
        /* istanbul ignore if */ if (fromPrivateKey === undefined) throw Error('fromPrivateKey is a required parameter.');
        /* istanbul ignore if */ if (toPublicKey === undefined) throw Error('toPublicKey is a required parameter.');
        /* istanbul ignore if */ if (amountRaw === undefined) throw Error('amountRaw is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        /* istanbul ignore if */ if (LOG_SEND) console.log('camo.send.amountRaw', amountRaw);
        const bananoParts = bananoUtil.getAmountPartsFromRaw(amountRaw, amountPrefix);
        /* istanbul ignore if */ if (LOG_SEND) console.log('camo.send.bananoParts', bananoParts);
        const powersOfTwoBigInts = splitBigIntIntoPowersOfTwo(BigInt(bananoParts[bananoParts.majorName]));
        /* istanbul ignore if */ if (LOG_SEND) console.log('camo.send.powersOfTwoBigInts', powersOfTwoBigInts);
        const amounts = [];
        if (bananoParts[bananoParts.minorName] !== '0') {
            /* istanbul ignore if */ if (LOG_SEND) console.log('camo.send.bananoParts[bananoParts.minorName]', bananoParts[bananoParts.minorName]);
            const banoshiRaw = bananoUtil.getRawStrFromMinorAmountStr(bananoParts[bananoParts.minorName], amountPrefix);
            /* istanbul ignore if */ if (LOG_SEND) console.log('camo.send.banoshiRaw', banoshiRaw);
            amounts.push(banoshiRaw);
        }
        if (bananoParts.raw !== '0') {
            /* istanbul ignore if */ if (LOG_SEND) console.log('camo.send.raw', bananoParts.raw);
            amounts.push(bananoParts.raw);
        }
        for(let powersOfTwoBigIntIx = 0; powersOfTwoBigIntIx < powersOfTwoBigInts.length; powersOfTwoBigIntIx++){
            const powersOfTwoBigInt = powersOfTwoBigInts[powersOfTwoBigIntIx];
            const powersOfTwoRaw = bananoUtil.getRawStrFromMajorAmountStr(powersOfTwoBigInt.toString(), amountPrefix);
            /* istanbul ignore if */ if (LOG_SEND) console.log(`camo.send.powersOfTwoRaw[${powersOfTwoBigIntIx}]`, powersOfTwoRaw);
            amounts.push(powersOfTwoRaw);
        }
        const sharedSecret = await getSharedSecretFromRepresentative(bananodeApi, fromPrivateKey, toPublicKey, amountPrefix);
        /* istanbul ignore if */ if (LOG_SEND) console.log('camo.send.sharedSecret', sharedSecret);
        const destSeed = sharedSecret;
        const hashes = [];
        let previous;
        for(let amountIx = 0; amountIx < amounts.length; amountIx++){
            const amount = amounts[amountIx];
            const amountRaw = amount;
            const destSeedIx = amountIx;
            const destPrivateKey = bananoUtil.getPrivateKey(destSeed, destSeedIx);
            const destPublicKey = await bananoUtil.getPublicKey(destPrivateKey);
            const destAccount = bananoUtil.getAccount(destPublicKey, amountPrefix);
            /* istanbul ignore if */ if (LOG_SEND) console.log(`STARTED camo.send[${destSeedIx}]`, fundingPrivateKey, destAccount, amountRaw);
            const hash = await bananoUtil.sendFromPrivateKeyWithRepresentativeAndPrevious(bananodeApi, fundingPrivateKey, destAccount, amountRaw, undefined, previous, amountPrefix);
            /* istanbul ignore if */ if (LOG_SEND) console.log(`SUCCESS camo.send[${destSeedIx}]`, 'destPrivateKey', destPrivateKey, 'hash', hash);
            previous = hash;
            hashes.push(hash);
        }
        return hashes;
    };
    const receive = async (bananodeApi, toPrivateKey, fromPublicKey, amountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (toPrivateKey === undefined) throw Error('toPrivateKey is a required parameter.');
        /* istanbul ignore if */ if (fromPublicKey === undefined) throw Error('fromPublicKey is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        /* istanbul ignore if */ if (LOG_RECEIVE) console.log('STARTED camo.receive', toPrivateKey, fromPublicKey);
        const sharedSecret = await getSharedSecretFromRepresentative(bananodeApi, toPrivateKey, fromPublicKey, amountPrefix);
        /* istanbul ignore if */ if (LOG_RECEIVE) console.log('INTERIM camo.receive', 'sharedSecret', sharedSecret);
        const seed = sharedSecret;
        const returnValue = await receiveSeed(bananodeApi, seed, amountPrefix);
        /* istanbul ignore if */ if (LOG_RECEIVE) console.log('SUCCESS camo.receive', returnValue);
        return returnValue;
    };
    /**
   * Get the camo account for a given camo public key.
   *
   * @memberof CamoUtil
   * @param {string} camoPublicKey the camo public key.
   * @return {string} the camo account.
   */ const getCamoAccount = (camoPublicKey)=>{
        const accountSuffix = bananoUtil.getAccountSuffix(camoPublicKey);
        return `camo_${accountSuffix}`;
    };
    /**
   * @memberof CamoUtil
   * checks if a camo account is valid.
   * @param {string} camoAccount the camo account.
   * @return {boolean} true if the camo account is valid.
   */ const isCamoAccountValid = (camoAccount)=>{
        if (!camoAccount.startsWith('camo_1') && !camoAccount.startsWith('camo_3')) {
            const retval = {};
            retval.valid = false;
            retval.message = `Invalid CAMO BANANO Account prefix '${camoAccount}'`;
            return retval;
        }
        if (camoAccount.length !== 65) {
            const retval = {};
            retval.valid = false;
            retval.message = `Invalid CAMO BANANO Account length ${camoAccount.length} of '${camoAccount}'`;
            return retval;
        }
        const accountSuffix = camoAccount.substring(5, 65);
        const isSuffixValid = bananoUtil.isAccountSuffixValid(accountSuffix);
        if (!isSuffixValid.valid) {
            const retval = {};
            retval.valid = false;
            retval.message = `Invalid CAMO BANANO Account '${camoAccount}', ${isSuffixValid.message}`;
            return retval;
        }
        const retval = {};
        retval.valid = true;
        retval.message = '';
        return retval;
    };
    const getSharedAccountData = async (bananodeApi, privateKey, publicKey, sharedSeedIx, amountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is a required parameter.');
        /* istanbul ignore if */ if (publicKey === undefined) throw Error('publicKey is a required parameter.');
        /* istanbul ignore if */ if (sharedSeedIx === undefined) throw Error('sharedSeedIx is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const sharedSecret = await getSharedSecretFromRepresentative(bananodeApi, privateKey, publicKey, amountPrefix);
        if (sharedSecret) {
            const sharedSeed = sharedSecret;
            const sharedPrivateKey = bananoUtil.getPrivateKey(sharedSeed, sharedSeedIx);
            const sharedPublicKey = await bananoUtil.getPublicKey(sharedPrivateKey);
            const sharedAccount = bananoUtil.getAccount(sharedPublicKey, amountPrefix);
            const data = {};
            data.sharedSeed = sharedSeed;
            data.sharedPrivateKey = sharedPrivateKey;
            data.sharedPublicKey = sharedPublicKey;
            data.sharedAccount = sharedAccount;
            return data;
        } else return undefined;
    };
    const getAccountsPending = async (bananodeApi, toPrivateKey, fromPublicKey, sharedSeedIx, count, amountPrefix)=>{
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is a required parameter.');
        /* istanbul ignore if */ if (toPrivateKey === undefined) throw Error('toPrivateKey is a required parameter.');
        /* istanbul ignore if */ if (fromPublicKey === undefined) throw Error('fromPublicKey is a required parameter.');
        /* istanbul ignore if */ if (sharedSeedIx === undefined) throw Error('sharedSeedIx is a required parameter.');
        /* istanbul ignore if */ if (count === undefined) throw Error('count is a required parameter.');
        /* istanbul ignore if */ if (amountPrefix == undefined) throw Error('amountPrefix is a required parameter.');
        const accountData = await getSharedAccountData(bananodeApi, toPrivateKey, fromPublicKey, sharedSeedIx, amountPrefix);
        if (accountData) {
            const accounts = [
                accountData.sharedAccount
            ];
            return bananodeApi.getAccountsPending(accounts, count);
        }
    };
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.receiveSeed = receiveSeed;
        exports.receive = receive;
        exports.send = send;
        exports.getBalanceRaw = getBalanceRaw;
        // exports.isHashInPendingOfPrivateKey = isHashInPendingOfPrivateKey;
        // exports.sweepSeedToIndex = sweepSeedToIndex;
        exports.getSharedSecret = getSharedSecret;
        exports.getSharedSecretBytes = getSharedSecretBytes;
        exports.getCamoPublicKey = getCamoPublicKey;
        exports.getCamoPublicKeyBytes = getCamoPublicKeyBytes;
        // exports.getSharedSeed = getSharedSeed;
        exports.getFirstUnopenedPrivateKey = getFirstUnopenedPrivateKey;
        // exports.openAccountWithPrivateKey = openAccountWithPrivateKey;
        exports.getCamoAccount = getCamoAccount;
        exports.isCamoAccountValid = isCamoAccountValid;
        exports.getAccountsPending = getAccountsPending;
        exports.getSharedAccountData = getSharedAccountData;
        exports.receiveBlock = receiveBlock;
        exports.getSharedSecretFromRepresentative = getSharedSecretFromRepresentative;
        return exports;
    })();
    // istanbul ignore else
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.bananocoin.bananojs.camoUtil = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});

parcelRequire.register("1fcyF", function(module, exports) {
'use strict';

// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    const bananoUtil = (parcelRequire("5GmJx"));
    const MAX_ACCOUNTS_PENDING = 10;
    const LOG_SWEEP = false;
    const receive = async (loggingUtil, bananodeApi, account, privateKey, representative, specificPendingBlockHash, accountPrefix)=>{
        /* istanbul ignore if */ if (loggingUtil === undefined) throw Error('loggingUtil is required.');
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is required.');
        /* istanbul ignore if */ if (account === undefined) throw Error('account is required.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is required.');
        /* istanbul ignore if */ if (representative === undefined) throw Error('representative is required.');
        /* istanbul ignore if */ if (accountPrefix === undefined) throw Error('accountPrefix is required.');
        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log('STARTED receive account', account);
        const pending = await bananodeApi.getAccountsPending([
            account
        ], MAX_ACCOUNTS_PENDING);
        const response = {};
        response.pendingCount = 0;
        response.pendingBlocks = [];
        response.receiveCount = 0;
        response.receiveBlocks = [];
        response.pendingMessage = '';
        response.receiveMessage = '';
        if (pending !== undefined && pending.blocks !== undefined && pending.blocks[account] !== undefined) {
            const pendingHashes = Object.keys(pending.blocks[account]);
            response.pendingMessage = `pending ${pendingHashes.length} blocks, of max ${MAX_ACCOUNTS_PENDING}.`;
            response.pendingCount = pendingHashes.length;
            response.pendingBlocks = pendingHashes;
            /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log('INTERIM receive pendingHashes', pendingHashes);
            if (pendingHashes.length > 0) {
                const sweepBlocks = await sweep(loggingUtil, bananodeApi, privateKey, representative, specificPendingBlockHash, accountPrefix);
                response.receiveMessage = `received ${sweepBlocks.length} blocks.`;
                response.receiveCount = sweepBlocks.length;
                response.receiveBlocks = sweepBlocks;
            }
        } else response.pendingMessage = `pending unknown blocks, of max ${MAX_ACCOUNTS_PENDING}.`;
        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log('SUCCESS receive account', account);
        return response;
    };
    const sweep = async (loggingUtil, bananodeApi, privateKey, representative, specificPendingBlockHash, accountPrefix)=>{
        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log('STARTED sweep');
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        const account = bananoUtil.getAccount(publicKey, accountPrefix);
        const accountsPending = await bananodeApi.getAccountsPending([
            account
        ], MAX_ACCOUNTS_PENDING);
        const history = await bananodeApi.getAccountHistory(account, 1);
        const historyHistory = history.history;
        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM sweep accountsPending`, accountsPending);
        const accountOpenAndReceiveBlocks = [];
        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM sweep historyHistory.length`, historyHistory.length);
        if (historyHistory.length == 0) {
            let isFirstPending = true;
            const pendingBlockHashs = Object.keys(accountsPending.blocks[account]);
            /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM sweep pendingBlockHashs`, pendingBlockHashs);
            for(let pendingBlockHashIx = 0; pendingBlockHashIx < pendingBlockHashs.length; pendingBlockHashIx++){
                const pendingBlockHash = pendingBlockHashs[pendingBlockHashIx];
                if (specificPendingBlockHash == undefined || specificPendingBlockHash == pendingBlockHash) {
                    const pendingValueRaw = accountsPending.blocks[account][pendingBlockHash];
                    if (isFirstPending) {
                        const pending = pendingBlockHash;
                        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM STARTED sweep openBlockHash pending`, pending);
                        const openBlockHash = await bananoUtil.open(bananodeApi, privateKey, publicKey, account, pending, pendingValueRaw, accountPrefix);
                        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM SUCCESS sweep openBlockHash`, account, openBlockHash);
                        accountOpenAndReceiveBlocks.push(openBlockHash);
                        isFirstPending = false;
                    } else {
                        const frontiers = await bananodeApi.getFrontiers(account, 1);
                        const previous = frontiers.frontiers[account];
                        const hash = pendingBlockHash;
                        const valueRaw = pendingValueRaw;
                        const receiveBlockHash = await bananoUtil.receive(bananodeApi, privateKey, publicKey, representative, previous, hash, valueRaw, accountPrefix);
                        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM sweep receiveBlockHash`, account, receiveBlockHash);
                        accountOpenAndReceiveBlocks.push(receiveBlockHash);
                    }
                }
            }
        } else {
            const pendingBlockHashs = Object.keys(accountsPending.blocks[account]);
            for(let pendingBlockHashIx = 0; pendingBlockHashIx < pendingBlockHashs.length; pendingBlockHashIx++){
                const pendingBlockHash = pendingBlockHashs[pendingBlockHashIx];
                if (specificPendingBlockHash == undefined || specificPendingBlockHash == pendingBlockHash) {
                    const pendingValueRaw = accountsPending.blocks[account][pendingBlockHash];
                    const frontiers = await bananodeApi.getFrontiers(account, 1);
                    /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM sweep hasHistory frontiers`, frontiers);
                    const accountBalanceRaw = await bananodeApi.getAccountBalanceRaw(account, accountPrefix);
                    const previous = frontiers.frontiers[account];
                    const hash = pendingBlockHash;
                    const valueRaw = (BigInt(pendingValueRaw) + BigInt(accountBalanceRaw)).toString();
                    const receiveBlockHash = await bananoUtil.receive(bananodeApi, privateKey, publicKey, representative, previous, hash, valueRaw, accountPrefix);
                    /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM sweep hasHistory receiveBlockHash`, account, receiveBlockHash);
                    accountOpenAndReceiveBlocks.push(receiveBlockHash);
                }
            }
            /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log(`INTERIM sweep hasHistory`, account, historyHistory.length, accountsPending.blocks[account]);
        }
        /* istanbul ignore if */ if (LOG_SWEEP) loggingUtil.log('SUCCESS sweep', accountOpenAndReceiveBlocks);
        return accountOpenAndReceiveBlocks;
    };
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.receive = receive;
        return exports;
    })();
    // istanbul ignore else
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.bananocoin.bananojs.depositUtil = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});

parcelRequire.register("9hjWP", function(module, exports) {
'use strict';

// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    const bananoUtil = (parcelRequire("5GmJx"));
    const LOG_WITHDRAW = false;
    const withdraw = async (loggingUtil, bananodeApi, privateKey, toAccount, amountBananos, accountPrefix, representative, previous)=>{
        /* istanbul ignore if */ if (loggingUtil === undefined) throw Error('loggingUtil is required.');
        /* istanbul ignore if */ if (bananodeApi === undefined) throw Error('bananodeApi is required.');
        /* istanbul ignore if */ if (privateKey === undefined) throw Error('privateKey is required.');
        /* istanbul ignore if */ if (toAccount === undefined) throw Error('toAccount is required.');
        /* istanbul ignore if */ if (amountBananos === undefined) throw Error('amountBananos is required.');
        /* istanbul ignore if */ if (accountPrefix === undefined) throw Error('accountPrefix is required.');
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        const fromAccount = bananoUtil.getAccount(publicKey, accountPrefix);
        const amountRaw = bananoUtil.getRawStrFromMajorAmountStr(amountBananos.toString(), accountPrefix);
        /* istanbul ignore if */ if (LOG_WITHDRAW) loggingUtil.log('STARTED withdraw fromAccount', fromAccount, 'toAccount', toAccount, 'amountRaw', amountRaw);
        const response = await bananoUtil.sendFromPrivateKeyWithRepresentativeAndPrevious(bananodeApi, privateKey, toAccount, amountRaw, representative, previous, accountPrefix);
        /* istanbul ignore if */ if (LOG_WITHDRAW) loggingUtil.log('SUCCESS withdraw fromAccount', fromAccount, 'toAccount', toAccount, 'amountRaw', amountRaw, 'response', response);
        return response;
    };
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.withdraw = withdraw;
        return exports;
    })();
    // istanbul ignore else
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.bananocoin.bananojs.withdrawUtil = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});

parcelRequire.register("4V3Fj", function(module, exports) {
'use strict';
// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        const exports = {};
        exports.log = console.log;
        exports.trace = console.trace;
        return exports;
    })();
    // istanbul ignore else
    if (typeof module.exports !== 'undefined') module.exports = exports1;
    else window.bananocoin.bananojs.loggingUtil = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack

});

var $bbc0b920ee7945e8$exports = {};




/*!
  * Bootstrap modal.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ (function(global, factory) {
    $bbc0b920ee7945e8$exports = factory((parcelRequire("jXMeB")), (parcelRequire("fuvDV")), (parcelRequire("3QEeg")), (parcelRequire("hGOAQ")));
})($bbc0b920ee7945e8$exports, function(EventHandler, Manipulator, SelectorEngine, BaseComponent) {
    'use strict';
    const _interopDefaultLegacy = (e)=>e && typeof e === 'object' && 'default' in e ? e : {
            default: e
        }
    ;
    const EventHandler__default = /*#__PURE__*/ _interopDefaultLegacy(EventHandler);
    const Manipulator__default = /*#__PURE__*/ _interopDefaultLegacy(Manipulator);
    const SelectorEngine__default = /*#__PURE__*/ _interopDefaultLegacy(SelectorEngine);
    const BaseComponent__default = /*#__PURE__*/ _interopDefaultLegacy(BaseComponent);
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const MILLISECONDS_MULTIPLIER = 1000;
    const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)
    const toType = (obj)=>{
        if (obj === null || obj === undefined) return `${obj}`;
        return ({}).toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
    };
    const getSelector = (element)=>{
        let selector = element.getAttribute('data-bs-target');
        if (!selector || selector === '#') {
            let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
            // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
            // `document.querySelector` will rightfully complain it is invalid.
            // See https://github.com/twbs/bootstrap/issues/32273
            if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) return null;
             // Just in case some CMS puts out a full URL with the anchor appended
            if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) hrefAttr = `#${hrefAttr.split('#')[1]}`;
            selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
        }
        return selector;
    };
    const getElementFromSelector = (element)=>{
        const selector = getSelector(element);
        return selector ? document.querySelector(selector) : null;
    };
    const getTransitionDurationFromElement = (element)=>{
        if (!element) return 0;
         // Get transition-duration of the element
        let { transitionDuration: transitionDuration , transitionDelay: transitionDelay  } = window.getComputedStyle(element);
        const floatTransitionDuration = Number.parseFloat(transitionDuration);
        const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found
        if (!floatTransitionDuration && !floatTransitionDelay) return 0;
         // If multiple durations are defined, take the first
        transitionDuration = transitionDuration.split(',')[0];
        transitionDelay = transitionDelay.split(',')[0];
        return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    };
    const triggerTransitionEnd = (element)=>{
        element.dispatchEvent(new Event(TRANSITION_END));
    };
    const isElement = (obj)=>{
        if (!obj || typeof obj !== 'object') return false;
        if (typeof obj.jquery !== 'undefined') obj = obj[0];
        return typeof obj.nodeType !== 'undefined';
    };
    const getElement = (obj)=>{
        if (isElement(obj)) // it's a jQuery object or a node element
        return obj.jquery ? obj[0] : obj;
        if (typeof obj === 'string' && obj.length > 0) return document.querySelector(obj);
        return null;
    };
    const typeCheckConfig = (componentName, config, configTypes)=>{
        Object.keys(configTypes).forEach((property)=>{
            const expectedTypes = configTypes[property];
            const value = config[property];
            const valueType = value && isElement(value) ? 'element' : toType(value);
            if (!new RegExp(expectedTypes).test(valueType)) throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
        });
    };
    const isVisible = (element)=>{
        if (!isElement(element) || element.getClientRects().length === 0) return false;
        return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
    };
    const isDisabled = (element)=>{
        if (!element || element.nodeType !== Node.ELEMENT_NODE) return true;
        if (element.classList.contains('disabled')) return true;
        if (typeof element.disabled !== 'undefined') return element.disabled;
        return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
    };
    /**
   * Trick to restart an element's animation
   *
   * @param {HTMLElement} element
   * @return void
   *
   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
   */ const reflow = (element)=>{
        // eslint-disable-next-line no-unused-expressions
        element.offsetHeight;
    };
    const getjQuery = ()=>{
        const { jQuery: jQuery  } = window;
        if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) return jQuery;
        return null;
    };
    const DOMContentLoadedCallbacks = [];
    const onDOMContentLoaded = (callback1)=>{
        if (document.readyState === 'loading') {
            // add listener on the first call when the document is in loading state
            if (!DOMContentLoadedCallbacks.length) document.addEventListener('DOMContentLoaded', ()=>{
                DOMContentLoadedCallbacks.forEach((callback)=>callback()
                );
            });
            DOMContentLoadedCallbacks.push(callback1);
        } else callback1();
    };
    const isRTL = ()=>document.documentElement.dir === 'rtl'
    ;
    const defineJQueryPlugin = (plugin)=>{
        onDOMContentLoaded(()=>{
            const $ = getjQuery();
            /* istanbul ignore if */ if ($) {
                const name = plugin.NAME;
                const JQUERY_NO_CONFLICT = $.fn[name];
                $.fn[name] = plugin.jQueryInterface;
                $.fn[name].Constructor = plugin;
                $.fn[name].noConflict = ()=>{
                    $.fn[name] = JQUERY_NO_CONFLICT;
                    return plugin.jQueryInterface;
                };
            }
        });
    };
    const execute = (callback)=>{
        if (typeof callback === 'function') callback();
    };
    const executeAfterTransition = (callback, transitionElement, waitForTransition = true)=>{
        if (!waitForTransition) {
            execute(callback);
            return;
        }
        const durationPadding = 5;
        const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
        let called = false;
        const handler = ({ target: target  })=>{
            if (target !== transitionElement) return;
            called = true;
            transitionElement.removeEventListener(TRANSITION_END, handler);
            execute(callback);
        };
        transitionElement.addEventListener(TRANSITION_END, handler);
        setTimeout(()=>{
            if (!called) triggerTransitionEnd(transitionElement);
        }, emulatedDuration);
    };
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
    const SELECTOR_STICKY_CONTENT = '.sticky-top';
    class ScrollBarHelper {
        getWidth() {
            // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
            const documentWidth = document.documentElement.clientWidth;
            return Math.abs(window.innerWidth - documentWidth);
        }
        hide() {
            const width = this.getWidth();
            this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width
            this._setElementAttributes(this._element, 'paddingRight', (calculatedValue)=>calculatedValue + width
            ); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth
            this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', (calculatedValue)=>calculatedValue + width
            );
            this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', (calculatedValue)=>calculatedValue - width
            );
        }
        _disableOverFlow() {
            this._saveInitialAttribute(this._element, 'overflow');
            this._element.style.overflow = 'hidden';
        }
        _setElementAttributes(selector, styleProp, callback) {
            const scrollbarWidth = this.getWidth();
            const manipulationCallBack = (element)=>{
                if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) return;
                this._saveInitialAttribute(element, styleProp);
                const calculatedValue = window.getComputedStyle(element)[styleProp];
                element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;
            };
            this._applyManipulationCallback(selector, manipulationCallBack);
        }
        reset() {
            this._resetElementAttributes(this._element, 'overflow');
            this._resetElementAttributes(this._element, 'paddingRight');
            this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');
            this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');
        }
        _saveInitialAttribute(element, styleProp) {
            const actualValue = element.style[styleProp];
            if (actualValue) Manipulator__default.default.setDataAttribute(element, styleProp, actualValue);
        }
        _resetElementAttributes(selector, styleProp) {
            const manipulationCallBack = (element)=>{
                const value = Manipulator__default.default.getDataAttribute(element, styleProp);
                if (typeof value === 'undefined') element.style.removeProperty(styleProp);
                else {
                    Manipulator__default.default.removeDataAttribute(element, styleProp);
                    element.style[styleProp] = value;
                }
            };
            this._applyManipulationCallback(selector, manipulationCallBack);
        }
        _applyManipulationCallback(selector, callBack) {
            if (isElement(selector)) callBack(selector);
            else SelectorEngine__default.default.find(selector, this._element).forEach(callBack);
        }
        isOverflowing() {
            return this.getWidth() > 0;
        }
        constructor(){
            this._element = document.body;
        }
    }
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const Default$2 = {
        className: 'modal-backdrop',
        isVisible: true,
        // if false, we use the backdrop helper without adding any element to the dom
        isAnimated: false,
        rootElement: 'body',
        // give the choice to place backdrop under different elements
        clickCallback: null
    };
    const DefaultType$2 = {
        className: 'string',
        isVisible: 'boolean',
        isAnimated: 'boolean',
        rootElement: '(element|string)',
        clickCallback: '(function|null)'
    };
    const NAME$2 = 'backdrop';
    const CLASS_NAME_FADE$1 = 'fade';
    const CLASS_NAME_SHOW$1 = 'show';
    const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$2}`;
    class Backdrop {
        show(callback) {
            if (!this._config.isVisible) {
                execute(callback);
                return;
            }
            this._append();
            if (this._config.isAnimated) reflow(this._getElement());
            this._getElement().classList.add(CLASS_NAME_SHOW$1);
            this._emulateAnimation(()=>{
                execute(callback);
            });
        }
        hide(callback) {
            if (!this._config.isVisible) {
                execute(callback);
                return;
            }
            this._getElement().classList.remove(CLASS_NAME_SHOW$1);
            this._emulateAnimation(()=>{
                this.dispose();
                execute(callback);
            });
        }
        _getElement() {
            if (!this._element) {
                const backdrop = document.createElement('div');
                backdrop.className = this._config.className;
                if (this._config.isAnimated) backdrop.classList.add(CLASS_NAME_FADE$1);
                this._element = backdrop;
            }
            return this._element;
        }
        _getConfig(config) {
            config = {
                ...Default$2,
                ...typeof config === 'object' ? config : {}
            }; // use getElement() with the default "body" to get a fresh Element on each instantiation
            config.rootElement = getElement(config.rootElement);
            typeCheckConfig(NAME$2, config, DefaultType$2);
            return config;
        }
        _append() {
            if (this._isAppended) return;
            this._config.rootElement.append(this._getElement());
            EventHandler__default.default.on(this._getElement(), EVENT_MOUSEDOWN, ()=>{
                execute(this._config.clickCallback);
            });
            this._isAppended = true;
        }
        dispose() {
            if (!this._isAppended) return;
            EventHandler__default.default.off(this._element, EVENT_MOUSEDOWN);
            this._element.remove();
            this._isAppended = false;
        }
        _emulateAnimation(callback) {
            executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
        }
        constructor(config){
            this._config = this._getConfig(config);
            this._isAppended = false;
            this._element = null;
        }
    }
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/focustrap.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const Default$1 = {
        trapElement: null,
        // The element to trap focus inside of
        autofocus: true
    };
    const DefaultType$1 = {
        trapElement: 'element',
        autofocus: 'boolean'
    };
    const NAME$1 = 'focustrap';
    const DATA_KEY$1 = 'bs.focustrap';
    const EVENT_KEY$1 = `.${DATA_KEY$1}`;
    const EVENT_FOCUSIN = `focusin${EVENT_KEY$1}`;
    const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$1}`;
    const TAB_KEY = 'Tab';
    const TAB_NAV_FORWARD = 'forward';
    const TAB_NAV_BACKWARD = 'backward';
    class FocusTrap {
        activate() {
            const { trapElement: trapElement , autofocus: autofocus  } = this._config;
            if (this._isActive) return;
            if (autofocus) trapElement.focus();
            EventHandler__default.default.off(document, EVENT_KEY$1); // guard against infinite focus loop
            EventHandler__default.default.on(document, EVENT_FOCUSIN, (event)=>this._handleFocusin(event)
            );
            EventHandler__default.default.on(document, EVENT_KEYDOWN_TAB, (event)=>this._handleKeydown(event)
            );
            this._isActive = true;
        }
        deactivate() {
            if (!this._isActive) return;
            this._isActive = false;
            EventHandler__default.default.off(document, EVENT_KEY$1);
        }
        _handleFocusin(event) {
            const { target: target  } = event;
            const { trapElement: trapElement  } = this._config;
            if (target === document || target === trapElement || trapElement.contains(target)) return;
            const elements = SelectorEngine__default.default.focusableChildren(trapElement);
            if (elements.length === 0) trapElement.focus();
            else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) elements[elements.length - 1].focus();
            else elements[0].focus();
        }
        _handleKeydown(event) {
            if (event.key !== TAB_KEY) return;
            this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
        }
        _getConfig(config) {
            config = {
                ...Default$1,
                ...typeof config === 'object' ? config : {}
            };
            typeCheckConfig(NAME$1, config, DefaultType$1);
            return config;
        }
        constructor(config){
            this._config = this._getConfig(config);
            this._isActive = false;
            this._lastTabNavDirection = null;
        }
    }
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/component-functions.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const enableDismissTrigger = (component, method = 'hide')=>{
        const clickEvent = `click.dismiss${component.EVENT_KEY}`;
        const name = component.NAME;
        EventHandler__default.default.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
            if ([
                'A',
                'AREA'
            ].includes(this.tagName)) event.preventDefault();
            if (isDisabled(this)) return;
            const target = getElementFromSelector(this) || this.closest(`.${name}`);
            const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method
            instance[method]();
        });
    };
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME = 'modal';
    const DATA_KEY = 'bs.modal';
    const EVENT_KEY = `.${DATA_KEY}`;
    const DATA_API_KEY = '.data-api';
    const ESCAPE_KEY = 'Escape';
    const Default = {
        backdrop: true,
        keyboard: true,
        focus: true
    };
    const DefaultType = {
        backdrop: '(boolean|string)',
        keyboard: 'boolean',
        focus: 'boolean'
    };
    const EVENT_HIDE = `hide${EVENT_KEY}`;
    const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`;
    const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
    const EVENT_SHOW = `show${EVENT_KEY}`;
    const EVENT_SHOWN = `shown${EVENT_KEY}`;
    const EVENT_RESIZE = `resize${EVENT_KEY}`;
    const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY}`;
    const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`;
    const EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${EVENT_KEY}`;
    const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY}`;
    const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
    const CLASS_NAME_OPEN = 'modal-open';
    const CLASS_NAME_FADE = 'fade';
    const CLASS_NAME_SHOW = 'show';
    const CLASS_NAME_STATIC = 'modal-static';
    const OPEN_SELECTOR = '.modal.show';
    const SELECTOR_DIALOG = '.modal-dialog';
    const SELECTOR_MODAL_BODY = '.modal-body';
    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="modal"]';
    /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Modal extends BaseComponent__default.default {
        static get Default() {
            return Default;
        }
        static get NAME() {
            return NAME;
        }
        toggle(relatedTarget) {
            return this._isShown ? this.hide() : this.show(relatedTarget);
        }
        show(relatedTarget) {
            if (this._isShown || this._isTransitioning) return;
            const showEvent = EventHandler__default.default.trigger(this._element, EVENT_SHOW, {
                relatedTarget: relatedTarget
            });
            if (showEvent.defaultPrevented) return;
            this._isShown = true;
            if (this._isAnimated()) this._isTransitioning = true;
            this._scrollBar.hide();
            document.body.classList.add(CLASS_NAME_OPEN);
            this._adjustDialog();
            this._setEscapeEvent();
            this._setResizeEvent();
            EventHandler__default.default.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, ()=>{
                EventHandler__default.default.one(this._element, EVENT_MOUSEUP_DISMISS, (event)=>{
                    if (event.target === this._element) this._ignoreBackdropClick = true;
                });
            });
            this._showBackdrop(()=>this._showElement(relatedTarget)
            );
        }
        hide() {
            if (!this._isShown || this._isTransitioning) return;
            const hideEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE);
            if (hideEvent.defaultPrevented) return;
            this._isShown = false;
            const isAnimated = this._isAnimated();
            if (isAnimated) this._isTransitioning = true;
            this._setEscapeEvent();
            this._setResizeEvent();
            this._focustrap.deactivate();
            this._element.classList.remove(CLASS_NAME_SHOW);
            EventHandler__default.default.off(this._element, EVENT_CLICK_DISMISS);
            EventHandler__default.default.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);
            this._queueCallback(()=>this._hideModal()
            , this._element, isAnimated);
        }
        dispose() {
            [
                window,
                this._dialog
            ].forEach((htmlElement)=>EventHandler__default.default.off(htmlElement, EVENT_KEY)
            );
            this._backdrop.dispose();
            this._focustrap.deactivate();
            super.dispose();
        }
        handleUpdate() {
            this._adjustDialog();
        }
        _initializeBackDrop() {
            return new Backdrop({
                isVisible: Boolean(this._config.backdrop),
                // 'static' option will be translated to true, and booleans will keep their value
                isAnimated: this._isAnimated()
            });
        }
        _initializeFocusTrap() {
            return new FocusTrap({
                trapElement: this._element
            });
        }
        _getConfig(config) {
            config = {
                ...Default,
                ...Manipulator__default.default.getDataAttributes(this._element),
                ...typeof config === 'object' ? config : {}
            };
            typeCheckConfig(NAME, config, DefaultType);
            return config;
        }
        _showElement(relatedTarget) {
            const isAnimated = this._isAnimated();
            const modalBody = SelectorEngine__default.default.findOne(SELECTOR_MODAL_BODY, this._dialog);
            if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) // Don't move modal's DOM position
            document.body.append(this._element);
            this._element.style.display = 'block';
            this._element.removeAttribute('aria-hidden');
            this._element.setAttribute('aria-modal', true);
            this._element.setAttribute('role', 'dialog');
            this._element.scrollTop = 0;
            if (modalBody) modalBody.scrollTop = 0;
            if (isAnimated) reflow(this._element);
            this._element.classList.add(CLASS_NAME_SHOW);
            const transitionComplete = ()=>{
                if (this._config.focus) this._focustrap.activate();
                this._isTransitioning = false;
                EventHandler__default.default.trigger(this._element, EVENT_SHOWN, {
                    relatedTarget: relatedTarget
                });
            };
            this._queueCallback(transitionComplete, this._dialog, isAnimated);
        }
        _setEscapeEvent() {
            if (this._isShown) EventHandler__default.default.on(this._element, EVENT_KEYDOWN_DISMISS, (event)=>{
                if (this._config.keyboard && event.key === ESCAPE_KEY) {
                    event.preventDefault();
                    this.hide();
                } else if (!this._config.keyboard && event.key === ESCAPE_KEY) this._triggerBackdropTransition();
            });
            else EventHandler__default.default.off(this._element, EVENT_KEYDOWN_DISMISS);
        }
        _setResizeEvent() {
            if (this._isShown) EventHandler__default.default.on(window, EVENT_RESIZE, ()=>this._adjustDialog()
            );
            else EventHandler__default.default.off(window, EVENT_RESIZE);
        }
        _hideModal() {
            this._element.style.display = 'none';
            this._element.setAttribute('aria-hidden', true);
            this._element.removeAttribute('aria-modal');
            this._element.removeAttribute('role');
            this._isTransitioning = false;
            this._backdrop.hide(()=>{
                document.body.classList.remove(CLASS_NAME_OPEN);
                this._resetAdjustments();
                this._scrollBar.reset();
                EventHandler__default.default.trigger(this._element, EVENT_HIDDEN);
            });
        }
        _showBackdrop(callback) {
            EventHandler__default.default.on(this._element, EVENT_CLICK_DISMISS, (event)=>{
                if (this._ignoreBackdropClick) {
                    this._ignoreBackdropClick = false;
                    return;
                }
                if (event.target !== event.currentTarget) return;
                if (this._config.backdrop === true) this.hide();
                else if (this._config.backdrop === 'static') this._triggerBackdropTransition();
            });
            this._backdrop.show(callback);
        }
        _isAnimated() {
            return this._element.classList.contains(CLASS_NAME_FADE);
        }
        _triggerBackdropTransition() {
            const hideEvent = EventHandler__default.default.trigger(this._element, EVENT_HIDE_PREVENTED);
            if (hideEvent.defaultPrevented) return;
            const { classList: classList , scrollHeight: scrollHeight , style: style  } = this._element;
            const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed
            if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) return;
            if (!isModalOverflowing) style.overflowY = 'hidden';
            classList.add(CLASS_NAME_STATIC);
            this._queueCallback(()=>{
                classList.remove(CLASS_NAME_STATIC);
                if (!isModalOverflowing) this._queueCallback(()=>{
                    style.overflowY = '';
                }, this._dialog);
            }, this._dialog);
            this._element.focus();
        }
        // the following methods are used to handle overflowing modals
        // ----------------------------------------------------------------------
        _adjustDialog() {
            const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
            const scrollbarWidth = this._scrollBar.getWidth();
            const isBodyOverflowing = scrollbarWidth > 0;
            if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) this._element.style.paddingLeft = `${scrollbarWidth}px`;
            if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) this._element.style.paddingRight = `${scrollbarWidth}px`;
        }
        _resetAdjustments() {
            this._element.style.paddingLeft = '';
            this._element.style.paddingRight = '';
        }
        static jQueryInterface(config, relatedTarget) {
            return this.each(function() {
                const data = Modal.getOrCreateInstance(this, config);
                if (typeof config !== 'string') return;
                if (typeof data[config] === 'undefined') throw new TypeError(`No method named "${config}"`);
                data[config](relatedTarget);
            });
        }
        constructor(element, config){
            super(element);
            this._config = this._getConfig(config);
            this._dialog = SelectorEngine__default.default.findOne(SELECTOR_DIALOG, this._element);
            this._backdrop = this._initializeBackDrop();
            this._focustrap = this._initializeFocusTrap();
            this._isShown = false;
            this._ignoreBackdropClick = false;
            this._isTransitioning = false;
            this._scrollBar = new ScrollBarHelper();
        }
    }
    /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
        const target = getElementFromSelector(this);
        if ([
            'A',
            'AREA'
        ].includes(this.tagName)) event.preventDefault();
        EventHandler__default.default.one(target, EVENT_SHOW, (showEvent)=>{
            if (showEvent.defaultPrevented) // only register focus restorer if modal will actually get shown
            return;
            EventHandler__default.default.one(target, EVENT_HIDDEN, ()=>{
                if (isVisible(this)) this.focus();
            });
        }); // avoid conflict when clicking moddal toggler while another one is open
        const allReadyOpen = SelectorEngine__default.default.findOne(OPEN_SELECTOR);
        if (allReadyOpen) Modal.getInstance(allReadyOpen).hide();
        const data = Modal.getOrCreateInstance(target);
        data.toggle(this);
    });
    enableDismissTrigger(Modal);
    /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Modal to jQuery only if jQuery is present
   */ defineJQueryPlugin(Modal);
    return Modal;
});


var $9ef67ba6cdecd106$exports = {};


/*!
  * Bootstrap button.js v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */ (function(global, factory) {
    $9ef67ba6cdecd106$exports = factory((parcelRequire("jXMeB")), (parcelRequire("hGOAQ")));
})($9ef67ba6cdecd106$exports, function(EventHandler, BaseComponent) {
    'use strict';
    const _interopDefaultLegacy = (e)=>e && typeof e === 'object' && 'default' in e ? e : {
            default: e
        }
    ;
    const EventHandler__default = /*#__PURE__*/ _interopDefaultLegacy(EventHandler);
    const BaseComponent__default = /*#__PURE__*/ _interopDefaultLegacy(BaseComponent);
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ const getjQuery = ()=>{
        const { jQuery: jQuery  } = window;
        if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) return jQuery;
        return null;
    };
    const DOMContentLoadedCallbacks = [];
    const onDOMContentLoaded = (callback1)=>{
        if (document.readyState === 'loading') {
            // add listener on the first call when the document is in loading state
            if (!DOMContentLoadedCallbacks.length) document.addEventListener('DOMContentLoaded', ()=>{
                DOMContentLoadedCallbacks.forEach((callback)=>callback()
                );
            });
            DOMContentLoadedCallbacks.push(callback1);
        } else callback1();
    };
    const defineJQueryPlugin = (plugin)=>{
        onDOMContentLoaded(()=>{
            const $ = getjQuery();
            /* istanbul ignore if */ if ($) {
                const name = plugin.NAME;
                const JQUERY_NO_CONFLICT = $.fn[name];
                $.fn[name] = plugin.jQueryInterface;
                $.fn[name].Constructor = plugin;
                $.fn[name].noConflict = ()=>{
                    $.fn[name] = JQUERY_NO_CONFLICT;
                    return plugin.jQueryInterface;
                };
            }
        });
    };
    /**
   * --------------------------------------------------------------------------
   * Bootstrap (v5.1.3): button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */ const NAME = 'button';
    const DATA_KEY = 'bs.button';
    const EVENT_KEY = `.${DATA_KEY}`;
    const DATA_API_KEY = '.data-api';
    const CLASS_NAME_ACTIVE = 'active';
    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="button"]';
    const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
    /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */ class Button extends BaseComponent__default.default {
        // Getters
        static get NAME() {
            return NAME;
        }
        toggle() {
            // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
            this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE));
        }
        static jQueryInterface(config) {
            return this.each(function() {
                const data = Button.getOrCreateInstance(this);
                if (config === 'toggle') data[config]();
            });
        }
    }
    /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */ EventHandler__default.default.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, (event)=>{
        event.preventDefault();
        const button = event.target.closest(SELECTOR_DATA_TOGGLE);
        const data = Button.getOrCreateInstance(button);
        data.toggle();
    });
    /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   * add .Button to jQuery only if jQuery is present
   */ defineJQueryPlugin(Button);
    return Button;
});



var $1aee3c8d4d72086d$exports = {};
'use strict';






// STARTED TOP nodejs/browser hack
(function() {
    // FINISHED TOP nodejs/browser hack
    const bananoUtil = (parcelRequire("5GmJx"));
    const realBananodeApi = (parcelRequire("8V1uF"));
    const camoUtil = (parcelRequire("5H3z6"));
    const depositUtil = (parcelRequire("1fcyF"));
    const withdrawUtil = (parcelRequire("9hjWP"));
    const loggingUtil = (parcelRequire("4V3Fj"));
    const BANANO_PREFIX = 'ban_';
    const NANO_PREFIX = 'nano_';
    let bananodeApi = realBananodeApi;
    /**
   * Sets the Bananode Api (useful for overriding some methods)
   * @memberof Main
   * @param {string} _bananodeApi the new bananodeApi
   * @return {undefined} returns nothing.
   */ const setBananodeApi = (_bananodeApi)=>{
        bananodeApi = _bananodeApi;
    };
    /**
   * Sets the Bananode Api Authorization
   * @memberof Main
   * @param {string} auth the new authorization
   * @return {undefined} returns nothing.
   */ const setAuth = (auth)=>{
        if (bananodeApi !== undefined) bananodeApi.setAuth(auth);
    };
    /**
   * converts amount from decimal to bananoParts.
   * @memberof BananoUtil
   * @param {string} decimalAmount the decimal amount of bananos.
   * @return {BananoParts} returns the banano parts of the decimal amount.
   */ const getBananoPartsFromDecimal = (decimalAmount)=>{
        const raw = getBananoDecimalAmountAsRaw(decimalAmount);
        const bananoParts = getBananoPartsFromRaw(raw);
        return bananoParts;
    };
    /**
   * converts amount from bananoParts to decimal.
   * @memberof BananoUtil
   * @param {BananoParts} bananoParts the banano parts to describe.
   * @return {string} returns the decimal amount of bananos.
   */ const getBananoPartsAsDecimal = (bananoParts)=>{
        let bananoDecimal = '';
        const banano = bananoParts[bananoParts.majorName];
        if (banano !== undefined) bananoDecimal += banano;
        else bananoDecimal += '0';
        const banoshi = bananoParts[bananoParts.minorName];
        if (banoshi !== undefined || bananoParts.raw !== undefined) bananoDecimal += '.';
        if (banoshi !== undefined) {
            if (banoshi.length == 1) bananoDecimal += '0';
            bananoDecimal += banoshi;
        }
        if (bananoParts.raw !== undefined) {
            if (banoshi === undefined) bananoDecimal += '00';
            const count = 27 - bananoParts.raw.length;
            if (count < 0) throw Error(`too many numbers in bananoParts.raw '${bananoParts.raw}', remove ${-count} of them.`);
            bananoDecimal += '0'.repeat(count);
            bananoDecimal += bananoParts.raw;
        }
        return bananoDecimal;
    };
    /**
   * converts amount from decimal to raw.
   * @memberof BananoUtil
   * @param {string} amount the decimal amount.
   * @return {string} returns amount in raw.
   */ const getBananoDecimalAmountAsRaw = (amount)=>{
        const amountStr = amount.toString();
        const decimal = amountStr.indexOf('.');
        let bananoBigInt;
        if (decimal < 0) bananoBigInt = BigInt(getRawStrFromBananoStr(amountStr));
        else bananoBigInt = BigInt(getRawStrFromBananoStr(amountStr.substring(0, decimal)));
        let banoshiBigInt;
        if (decimal < 0) banoshiBigInt = BigInt(0);
        else {
            let banoshiRaw = amountStr.substring(decimal + 1);
            // console.log('banoshiRaw', banoshiRaw);
            // console.log('banoshiRaw.length', banoshiRaw.length);
            const count = 29 - banoshiRaw.length;
            if (count < 0) throw Error(`too many numbers past the decimal in '${amountStr}', remove ${-count} of them.`);
            banoshiRaw += '0'.repeat(count);
            banoshiBigInt = BigInt(banoshiRaw);
        }
        const rawBigInt = banoshiBigInt + bananoBigInt;
        const rawStr = rawBigInt.toString(10);
        return rawStr;
    };
    /**
   * describes the banano parts in an english description.
   * @memberof BananoUtil
   * @param {BananoParts} bananoParts the banano parts to describe.
   * @return {string} returns the description of the banano parts.
   */ const getBananoPartsDescription = (bananoParts)=>{
        const numberWithCommas = (x)=>{
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        };
        let bananoAmountDesc = '';
        if (bananoParts[bananoParts.majorName] !== '0') {
            bananoAmountDesc += numberWithCommas(bananoParts[bananoParts.majorName]);
            bananoAmountDesc += ' ';
            bananoAmountDesc += bananoParts.majorName;
        }
        if (bananoParts[bananoParts.minorName] !== '0') {
            if (bananoAmountDesc.length > 0) bananoAmountDesc += ' ';
            bananoAmountDesc += bananoParts[bananoParts.minorName];
            bananoAmountDesc += ' ';
            bananoAmountDesc += bananoParts.minorName;
        }
        if (bananoParts.raw !== '0') {
            if (bananoAmountDesc.length > 0) bananoAmountDesc += ' ';
            bananoAmountDesc += numberWithCommas(bananoParts.raw);
            bananoAmountDesc += ' raw';
        }
        if (bananoAmountDesc.length === 0) {
            bananoAmountDesc = '0 ';
            bananoAmountDesc += bananoParts.majorName;
        }
        return bananoAmountDesc;
    };
    /**
   * Sends the amount to the account with an optional representative and
   * previous block hash.
   * If the representative is not sent, it will be pulled from the api.
   * If the previous is not sent, it will be pulled from the api.
   * Be very careful with previous, as setting it incorrectly
   * can cause an incorrect amount of funds to be sent.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} destAccount the destination account.
   * @param {string} amountRaw the amount to send, in raw.
   * @param {string} representative the representative (optional).
   * @param {string} previousHash the previous hash (optional).
   * @return {Promise<string>} returns the hash returned by the send.
   */ const sendAmountToBananoAccountWithRepresentativeAndPrevious = async (seed, seedIx, destAccount, amountRaw, representative, previousHash)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const hash = await bananoUtil.sendFromPrivateKeyWithRepresentativeAndPrevious(bananodeApi, privateKey, destAccount, amountRaw, representative, previousHash, BANANO_PREFIX);
        return hash;
    };
    /**
   * Sends the amount to the account with an optional representative and
   * previous block hash.
   * If the representative is not sent, it will be pulled from the api.
   * If the previous is not sent, it will be pulled from the api.
   * Be very careful with previous, as setting it incorrectly
   * can cause an incorrect amount of funds to be sent.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} destAccount the destination account.
   * @param {string} amountRaw the amount to send, in raw.
   * @param {string} representative the representative (optional).
   * @param {string} previousHash the previous hash (optional).
   * @return {Promise<string>} returns the hash returned by the send.
   */ const sendAmountToNanoAccountWithRepresentativeAndPrevious = async (seed, seedIx, destAccount, amountRaw, representative, previousHash)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const hash = await bananoUtil.sendFromPrivateKeyWithRepresentativeAndPrevious(bananodeApi, privateKey, destAccount, amountRaw, representative, previousHash, NANO_PREFIX);
        return hash;
    };
    /**
   * Sends the amount to the banano account with a callback for success and failure.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} destAccount the destination account.
   * @param {string} amountRaw the amount to send, in raw.
   * @param {string} successCallback the callback to call upon success.
   * @param {string} failureCallback the callback to call upon failure.
   * @return {Promise<string>} returns the hash returned by the send.
   */ const sendAmountToBananoAccount = async (seed, seedIx, destAccount, amountRaw, successCallback, failureCallback)=>{
        return await bananoUtil.send(bananodeApi, seed, seedIx, destAccount, amountRaw, successCallback, failureCallback, BANANO_PREFIX).catch((error)=>{
            // console.trace(error);
            throw Error(error);
        });
    };
    /**
   * Sends the amount to the nano account with a callback for success and failure.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} destAccount the destination account.
   * @param {string} amountRaw the amount to send, in raw.
   * @param {string} successCallback the callback to call upon success.
   * @param {string} failureCallback the callback to call upon failure.
   * @return {Promise<string>} returns the hash returned by the send.
   */ const sendAmountToNanoAccount = async (seed, seedIx, destAccount, amountRaw, successCallback, failureCallback)=>{
        return await bananoUtil.send(bananodeApi, seed, seedIx, destAccount, amountRaw, successCallback, failureCallback, NANO_PREFIX).catch((error)=>{
            // console.trace(error);
            throw Error(error);
        });
    };
    /**
   * Sets the rep for an account with a given seed.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} representative the representative.
   * @return {Promise<string>} returns the hash returned by the change.
   */ const changeBananoRepresentativeForSeed = async (seed, seedIx, representative)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const response = await bananoUtil.change(bananodeApi, privateKey, representative, BANANO_PREFIX);
        return response;
    };
    /**
   * Sets the rep for an account with a given seed.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} representative the representative.
   * @return {Promise<string>} returns the hash returned by the change.
   */ const changeNanoRepresentativeForSeed = async (seed, seedIx, representative)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const response = await bananoUtil.change(bananodeApi, privateKey, representative, NANO_PREFIX);
        return response;
    };
    /**
   * Recieve deposits for a nano account with a given seed.
   * @memberof DepositUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} representative the representative.
   * @param {string} specificPendingBlockHash a specific block hash to receive (optional).
   * @return {Promise<object>} returns the response returned by the receive.
   */ const receiveNanoDepositsForSeed = async (seed, seedIx, representative, specificPendingBlockHash)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        const account = bananoUtil.getAccount(publicKey, NANO_PREFIX);
        const response = await depositUtil.receive(loggingUtil, bananodeApi, account, privateKey, representative, specificPendingBlockHash, NANO_PREFIX);
        return response;
    };
    /**
   * Recieve deposits for a banano account with a given seed.
   * @memberof DepositUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} representative the representative.
   * @param {string} specificPendingBlockHash a specific block hash to receive (optional).
   * @return {Promise<object>} returns the response returned by the receive.
   */ const receiveBananoDepositsForSeed = async (seed, seedIx, representative, specificPendingBlockHash)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        const account = bananoUtil.getAccount(publicKey, BANANO_PREFIX);
        const response = await depositUtil.receive(loggingUtil, bananodeApi, account, privateKey, representative, specificPendingBlockHash, BANANO_PREFIX);
        return response;
    };
    /**
   * Send a withdrawal from a banano account with a given seed.
   * @memberof WithdrawUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} toAccount the account to send to.
   * @param {string} amountBananos the amount of bananos.
   * @param {string} representative the new representative (optional).
   * @param {string} previous the new previous (optional).
   * @return {Promise<object>} returns the response returned by the withdraw.
   */ const sendBananoWithdrawalFromSeed = async (seed, seedIx, toAccount, amountBananos, representative, previous)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const response = withdrawUtil.withdraw(loggingUtil, bananodeApi, privateKey, toAccount, amountBananos, BANANO_PREFIX, representative, previous);
        return response;
    };
    /**
   * Send a withdrawal from a nano account with a given seed.
   * @memberof WithdrawUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} toAccount the account to send to.
   * @param {string} amountBananos the amount of bananos.
   * @param {string} representative the new representative (optional).
   * @param {string} previous the new previous (optional).
   * @return {Promise<object>} returns the response returned by the withdraw.
   */ const sendNanoWithdrawalFromSeed = async (seed, seedIx, toAccount, amountBananos, representative, previous)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const response = withdrawUtil.withdraw(loggingUtil, bananodeApi, privateKey, toAccount, amountBananos, NANO_PREFIX, representative, previous);
        return response;
    };
    /**
   * Get the balance, in raw, for an account.
   *
   * (use other methods like getBananoPartsFromRaw to convert to banano or banoshi)
   *
   * Calls {@link https://docs.nano.org/commands/rpc-protocol/#accounts_balances}
   * @memberof BananodeApi
   * @param {string} account the account to use.
   * @return {Promise<string>} the account's balance, in raw.
   */ const getAccountBalanceRaw = async (account)=>{
        return await bananodeApi.getAccountBalanceRaw(account);
    };
    /**
   * Get the balance and pending values, in raw, as an object like this one:
   * { balance: '123', pending: '123' } for an account.
   *
   * (use other methods like getBananoPartsFromRaw to convert to banano or banoshi)
   *
   * Calls {@link https://docs.nano.org/commands/rpc-protocol/#accounts_balances}
   * @memberof BananodeApi
   * @param {string} account the account to use.
   * @return {Promise<object>} the account's balances, in raw.
   */ const getAccountBalanceAndPendingRaw = async (account)=>{
        return await bananodeApi.getAccountBalanceAndPendingRaw(account);
    };
    /**
   * Get the balances and pending values, in raw, as an object for all given account. Returns the Node object without transformation.
   *
   * (use other methods like getBananoPartsFromRaw to convert to banano or banoshi)
   *
   * Calls {@link https://docs.nano.org/commands/rpc-protocol/#accounts_balances}
   * @memberof BananodeApi
   * @param {string_array} accounts the account to use.
   * @return {Promise<object>} the account's balances, in raw.
   */ const getAccountsBalances = async (accounts)=>{
        return await bananodeApi.getAccountsBalances(accounts);
    };
    /**
   * Get the history for an account.
   *
   * Calls {@link https://docs.nano.org/commands/rpc-protocol/#account_history}
   * @memberof BananodeApi
   * @param {string} account the account to use.
   * @param {number} count the count to use (use -1 for all).
   * @param {string} head the head to start at (optional).
   * @param {string} raw if true, return raw history (optional).
   * @return {Promise<object>} the account's history.
   */ const getAccountHistory = async (account, count, head, raw)=>{
        return await bananodeApi.getAccountHistory(account, count, head, raw);
    };
    /**
   * Get the banano account with a given seed and index.
   *
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @return {Promise<string>} the account.
   */ const getBananoAccountFromSeed = async (seed, seedIx)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        const account = bananoUtil.getAccount(publicKey, BANANO_PREFIX);
        return account;
    };
    /**
   * Get the banano account with a given seed and index.
   *
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @return {Promise<string>} the account.
   */ const getNanoAccountFromSeed = async (seed, seedIx)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        const account = bananoUtil.getAccount(publicKey, NANO_PREFIX);
        return account;
    };
    /**
   * Sets the URL to use for the node behind the Bananode Api
   * @memberof Main
   * @param {string} url the new url
   * @return {undefined} returns nothing.
   */ const setBananodeApiUrl = (url)=>{
        bananodeApi.setUrl(url);
    };
    /**
   * Get the account info for an account.
   *
   * Calls {@link https://docs.nano.org/commands/rpc-protocol/#account_info}
   * @memberof BananodeApi
   * @param {string} account the account to use.
   * @param {boolean} representativeFlag the representativeFlag to use (optional).
   * @return {Promise<object>} the account's info.
   */ const getAccountInfo = async (account, representativeFlag)=>{
        return await bananodeApi.getAccountInfo(account, representativeFlag);
    };
    /**
   * Get the network block count.
   *
   * Calls {@link https://docs.nano.org/commands/rpc-protocol/#block_count}
   * @memberof BananodeApi
   * @return {Promise<object>} the block count.
   */ const getBlockCount = async ()=>{
        return await bananodeApi.getBlockCount();
    };
    /**
   * Open a banano account with a given seed.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} representative the representative.
   * @param {string} pendingBlockHash the pending block hash.
   * @param {string} pendingValueRaw the pending block hash.
   * @return {Promise<string>} returns the hash returned by the open.
   */ const openBananoAccountFromSeed = async (seed, seedIx, representative, pendingBlockHash, pendingValueRaw)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        return await bananoUtil.open(bananodeApi, privateKey, publicKey, representative, pendingBlockHash, pendingValueRaw, BANANO_PREFIX);
    };
    /**
   * Open a nano account with a given seed.
   * @memberof BananoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} representative the representative.
   * @param {string} pendingBlockHash the pending block hash.
   * @param {string} pendingValueRaw the pending block hash.
   * @return {Promise<string>} returns the hash returned by the open.
   */ const openNanoAccountFromSeed = async (seed, seedIx, representative, pendingBlockHash, pendingValueRaw)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = await bananoUtil.getPublicKey(privateKey);
        return await bananoUtil.open(bananodeApi, privateKey, publicKey, representative, pendingBlockHash, pendingValueRaw, NANO_PREFIX);
    };
    /**
   * Get the hash for a given block.
   *
   * @memberof BananoUtil
   * @param {string} block the seed to use to find the account.
   * @return {string} the block's hash.
   */ const getBlockHash = (block)=>{
        return bananoUtil.hash(block);
    };
    /**
   * signs a hash.
   *
   * @memberof BananoUtil
   * @param {string} privateKey the private key to use to sign.
   * @param {string} hash the hash to sign.
   * @return {string} the block's hash.
   */ const signHash = (privateKey, hash)=>{
        return bananoUtil.signHash(privateKey, hash);
    };
    /**
   * verifys a hash.
   *
   * @memberof BananoUtil
   * @param {string} hash the hash to verify.
   * @param {string} signature the signature to verify.
   * @param {string} publicKey the public key to use to sign.
   * @return {string} true if verification passed.
   */ const verify = (hash, signature, publicKey)=>{
        return bananoUtil.verify(hash, signature, publicKey);
    };
    /**
   * Get the signature for a given block (gets the hash of the block, and signs the hash).
   *
   * @memberof BananoUtil
   * @param {string} privateKey the private key used to sign the block.
   * @param {string} block the block to sign.
   * @return {string} the block's signature.
   */ const getSignature = (privateKey, block)=>{
        return bananoUtil.sign(privateKey, block);
    };
    /**
   * Converts a hex string to bytes in a Uint8Array.
   *
   * @memberof BananoUtil
   * @param {string} hex the hex string to use.
   * @return {Uint8Array} the bytes in a Uint8Array.
   */ const getBytesFromHex = (hex)=>{
        return bananoUtil.hexToBytes(hex);
    };
    /**
   * Converts bytes in a Uint8Array to a hex string.
   *
   * @memberof BananoUtil
   * @param {Uint8Array} bytes the bytes to use.
   * @return {string} the hex string.
   */ const getHexFromBytes = (bytes)=>{
        return bananoUtil.bytesToHex(bytes);
    };
    /**
   * gets work bytes using the CPU.
   *
   * @memberof BananoUtil
   * @param {string} hash the hash to use to calculate work bytes.
   * @param {Uint8Array} workBytes the Uint8Array(8) used to store temporary calculations.
   * @return {string} the work bytes as a hex string.
   */ const getWorkUsingCpu = (hash, workBytes)=>{
        return bananoUtil.getHashCPUWorker(hash, workBytes);
    };
    /**
   * receives banano funds at a camo address.
   *
   * @memberof CamoUtil
   * @param {string} toPrivateKey the private key that receives the funds.
   * @param {string} fromPublicKey the public key that sent the funds.
   * @return {Promise<string_array>} the received hashes in an array.
   */ const camoBananoReceive = async (toPrivateKey, fromPublicKey)=>{
        return await camoUtil.receive(bananodeApi, toPrivateKey, fromPublicKey, BANANO_PREFIX);
    };
    /**
   * receives nano funds at a camo address.
   *
   * @memberof CamoUtil
   * @param {string} toPrivateKey the private key that receives the funds.
   * @param {string} fromPublicKey the public key that sent the funds.
   * @return {Promise<string_array>} the received hashes in an array.
   */ const camoNanoReceive = async (toPrivateKey, fromPublicKey)=>{
        return await camoUtil.receive(bananodeApi, toPrivateKey, fromPublicKey, NANO_PREFIX);
    };
    /**
   * finds a new private key to recieve more banano funds. the key would have no history.
   *
   * @memberof CamoUtil
   * @param {string} seed the seed to use to find the account.
   * @return {Promise<string>} the private key to use.
   */ const getCamoBananoNextPrivateKeyForReceive = async (seed)=>{
        return await camoUtil.getFirstUnopenedPrivateKey(bananodeApi, seed, BANANO_PREFIX);
    };
    /**
   * finds a new private key to recieve more banano funds. the key would have no history.
   *
   * @memberof CamoUtil
   * @param {string} seed the seed to use to find the account.
   * @return {Promise<string>} the private key to use.
   */ const getCamoNanoNextPrivateKeyForReceive = async (seed)=>{
        return await camoUtil.getFirstUnopenedPrivateKey(bananodeApi, seed, NANO_PREFIX);
    };
    /**
   * sends banano funds to a camo address.
   *
   * @memberof CamoUtil
   * @param {string} fundingPrivateKey the private key that sends the funds.
   * @param {string} fromCamoPrivateKey the private key used to generate the shared seed.
   * @param {string} toCamoPublicKey the public key that receives the funds.
   * @param {string} amountBananos the amount of bananos.
   * @return {Promise<string_array>} the sent hashes in an array.
   */ const camoBananoSend = async (fundingPrivateKey, fromCamoPrivateKey, toCamoPublicKey, amountBananos)=>{
        const amountRaw = getRawStrFromBananoStr(amountBananos);
        return await camoUtil.send(bananodeApi, fundingPrivateKey, fromCamoPrivateKey, toCamoPublicKey, amountRaw, BANANO_PREFIX);
    };
    /**
   * sends camo funds to a camo address.
   *
   * @memberof CamoUtil
   * @param {string} fundingPrivateKey the private key that sends the funds.
   * @param {string} fromCamoPrivateKey the private key used to generate the shared seed.
   * @param {string} toCamoPublicKey the public key that receives the funds.
   * @param {string} amountBananos the amount of bananos.
   * @return {Promise<string_array>} the sent hashes in an array.
   */ const camoNanoSend = async (fundingPrivateKey, fromCamoPrivateKey, toCamoPublicKey, amountBananos)=>{
        const amountRaw = getRawStrFromNanoStr(amountBananos);
        return await camoUtil.send(bananodeApi, fundingPrivateKey, fromCamoPrivateKey, toCamoPublicKey, amountRaw, NANO_PREFIX);
    };
    /**
   * sends banano funds to a camo account.
   * This function uses seed index 0 to generate the shared secret,
   * and seed index "seedIx" to get the private key that contains funds to send.
   *
   * @memberof CamoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} toAccount the account to send to.
   * @param {string} amountBananos the amount of bananos.
   * @return {Promise<string_array>} the sent hashes in an array.
   */ const camoBananoSendWithdrawalFromSeed = async (seed, seedIx, toAccount, amountBananos)=>{
        const accountValid = getCamoAccountValidationInfo(toAccount);
        if (!accountValid.valid) throw Error(accountValid.message);
        const fundingPrivateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const fromCamoPrivateKey = bananoUtil.getPrivateKey(seed, 0);
        const toCamoPublicKey = bananoUtil.getAccountPublicKey(toAccount);
        return await camoBananoSend(fundingPrivateKey, fromCamoPrivateKey, toCamoPublicKey, amountBananos);
    };
    /**
   * sends nano funds to a camo account.
   * This function uses seed index 0 to generate the shared secret,
   * and seed index "seedIx" to get the private key that contains funds to send.
   *
   * @memberof CamoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} toAccount the account to send to.
   * @param {string} amountBananos the amount of bananos.
   * @return {Promise<string_array>} the sent hashes in an array.
   */ const camoNanoSendWithdrawalFromSeed = async (seed, seedIx, toAccount, amountBananos)=>{
        const accountValid = getCamoAccountValidationInfo(toAccount);
        if (!accountValid.valid) throw Error(accountValid.message);
        const fundingPrivateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const fromCamoPrivateKey = bananoUtil.getPrivateKey(seed, 0);
        const toCamoPublicKey = bananoUtil.getAccountPublicKey(toAccount);
        return await camoNanoSend(fundingPrivateKey, fromCamoPrivateKey, toCamoPublicKey, amountBananos);
    };
    /**
   * get the pending blocks for the camo banano account.
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} fromAccount the account to recieve from.
   * @param {number} sharedSeedIx the index to use with the shared seed.
   * @param {number} count the max count to get.
   * @return {Promise<string_array>} the pending hashes in an array.
   */ const camoBananoGetAccountsPending = async (seed, seedIx, fromAccount, sharedSeedIx, count)=>{
        const accountValid = getCamoAccountValidationInfo(fromAccount);
        if (!accountValid.valid) throw Error(accountValid.message);
        const toPrivateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const fromPublicKey = bananoUtil.getAccountPublicKey(fromAccount);
        return await camoUtil.getAccountsPending(bananodeApi, toPrivateKey, fromPublicKey, sharedSeedIx, count, BANANO_PREFIX);
    };
    /**
   * get the pending blocks for the camo nano account.
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} fromAccount the account to recieve from.
   * @param {number} sharedSeedIx the index to use with the shared seed.
   * @param {number} count the max count to get.
   * @return {Promise<string_array>} the pending hashes in an array.
   */ const camoNanoGetAccountsPending = async (seed, seedIx, fromAccount, sharedSeedIx, count)=>{
        const accountValid = getCamoAccountValidationInfo(fromAccount);
        if (!accountValid.valid) throw Error(accountValid.message);
        const toPrivateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const fromPublicKey = bananoUtil.getAccountPublicKey(fromAccount);
        return await camoUtil.getAccountsPending(bananodeApi, toPrivateKey, fromPublicKey, sharedSeedIx, count, NANO_PREFIX);
    };
    /**
   * returns data on whether a camo account is valid or not, and why.
   * @param {string} account the account to check.
   * @return {object} the account validity data.
   */ const getCamoAccountValidationInfo = (account)=>{
        const accountValid = camoUtil.isCamoAccountValid(account);
        return accountValid;
    };
    /**
   * get the banano shared account, used as an intermediary to send finds between the seed and the camo account.
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} account the camo account to send or recieve from.
   * @param {string} sharedSeedIx the index to use with the shared seed.
   * @return {Promise<string>} the shared account.
   */ const getCamoBananoSharedAccountData = async (seed, seedIx, account, sharedSeedIx)=>{
        const accountValid = getCamoAccountValidationInfo(account);
        if (!accountValid.valid) throw Error(accountValid.message);
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = bananoUtil.getAccountPublicKey(account);
        return await camoUtil.getSharedAccountData(bananodeApi, privateKey, publicKey, sharedSeedIx, BANANO_PREFIX);
    };
    /**
   * get the nano shared account, used as an intermediary to send finds between the seed and the camo account.
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} account the camo account to send or recieve from.
   * @param {string} sharedSeedIx the index to use with the shared seed.
   * @return {Promise<string>} the shared account.
   */ const getCamoNanoSharedAccountData = async (seed, seedIx, account, sharedSeedIx)=>{
        const accountValid = getCamoAccountValidationInfo(account);
        if (!accountValid.valid) throw Error(accountValid.message);
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = bananoUtil.getAccountPublicKey(account);
        return await camoUtil.getSharedAccountData(bananodeApi, privateKey, publicKey, sharedSeedIx, NANO_PREFIX);
    };
    /**
   * Recieve banano deposits for a camo account with a given seed.
   * @memberof CamoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} account the camo account to send or recieve from.
   * @param {string} sharedSeedIx the index to use with the shared seed.
   * @param {string} specificPendingBlockHash the pending block to recieve.
   * @return {Promise<string>} the response from receiving the block.
   */ const receiveCamoBananoDepositsForSeed = async (seed, seedIx, account, sharedSeedIx, specificPendingBlockHash)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = bananoUtil.getAccountPublicKey(account);
        const sharedSecret = await camoUtil.getSharedSecretFromRepresentative(bananodeApi, privateKey, publicKey, BANANO_PREFIX);
        if (sharedSecret) {
            const sharedSeed = sharedSecret;
            const privateKey = bananoUtil.getPrivateKey(sharedSeed, sharedSeedIx);
            const camoPublicKey = await camoUtil.getCamoPublicKey(privateKey);
            const camoRepresentative = await camoUtil.getCamoAccount(camoPublicKey);
            const repPublicKey = await bananoUtil.getAccountPublicKey(camoRepresentative);
            const representative = await bananoUtil.getAccount(repPublicKey, BANANO_PREFIX);
            const response = await receiveBananoDepositsForSeed(sharedSeed, sharedSeedIx, representative, specificPendingBlockHash);
            return response;
        } else return undefined;
    };
    /**
   * Recieve nano deposits for a camo account with a given seed.
   * @memberof CamoUtil
   * @param {string} seed the seed to use to find the account.
   * @param {string} seedIx the index to use with the seed.
   * @param {string} account the camo account to send or recieve from.
   * @param {string} sharedSeedIx the index to use with the shared seed.
   * @param {string} specificPendingBlockHash the pending block to recieve.
   * @return {Promise<string>} the response from receiving the block.
   */ const receiveCamoNanoDepositsForSeed = async (seed, seedIx, account, sharedSeedIx, specificPendingBlockHash)=>{
        const privateKey = bananoUtil.getPrivateKey(seed, seedIx);
        const publicKey = bananoUtil.getAccountPublicKey(account);
        const sharedSecret = await camoUtil.getSharedSecretFromRepresentative(bananodeApi, privateKey, publicKey, NANO_PREFIX);
        if (sharedSecret) {
            const sharedSeed = sharedSecret;
            const privateKey = bananoUtil.getPrivateKey(sharedSeed, sharedSeedIx);
            const camoPublicKey = await camoUtil.getCamoPublicKey(privateKey);
            const camoRepresentative = await camoUtil.getCamoAccount(camoPublicKey);
            const repPublicKey = await bananoUtil.getAccountPublicKey(camoRepresentative);
            const representative = await bananoUtil.getAccount(repPublicKey, NANO_PREFIX);
            const response = await receiveNanoDepositsForSeed(sharedSeed, sharedSeedIx, representative, specificPendingBlockHash);
            return response;
        } else return undefined;
    };
    /**
   * gets the total banano account balance, in raw.
   *
   * @memberof CamoUtil
   * @param {string} toPrivateKey the private key that receives the funds.
   * @param {string} fromPublicKey the public key that sent the funds.
   * @return {Promise<string>} the account balance, in raw.
   */ const getCamoBananoAccountBalanceRaw = async (toPrivateKey, fromPublicKey)=>{
        return await camoUtil.getBalanceRaw(bananodeApi, toPrivateKey, fromPublicKey, BANANO_PREFIX);
    };
    /**
   * gets the total nano account balance, in raw.
   *
   * @memberof CamoUtil
   * @param {string} toPrivateKey the private key that receives the funds.
   * @param {string} fromPublicKey the public key that sent the funds.
   * @return {Promise<string>} the account balance, in raw.
   */ const getCamoNanoAccountBalanceRaw = async (toPrivateKey, fromPublicKey)=>{
        return await camoUtil.getBalanceRaw(bananodeApi, toPrivateKey, fromPublicKey, NANO_PREFIX);
    };
    /**
   * Get the pending blocks for the account.
   *
   * Calls {@link https://docs.nano.org/commands/rpc-protocol/#accounts_pending}
   * @memberof BananodeApi
   * @param {string_array} accounts the array of pending accounts.
   * @param {number} count the max count to get.
   * @param {string} source if true, get source.
   * @return {Promise<object>} the account's pending blocks.
   */ const getAccountsPending = async (accounts, count, source)=>{
        return await bananodeApi.getAccountsPending(accounts, count, source);
    };
    /**
   * Converts an amount into a raw amount.
   *
   * @memberof BananoUtil
   * @param {string} amountStr the amount, as a string.
   * @param {string} amountPrefix the amount, as a string.
   * @return {string} the banano as a raw value.
   */ const getRawStrFromBananoStr = (amountStr)=>{
        return bananoUtil.getRawStrFromMajorAmountStr(amountStr, BANANO_PREFIX);
    };
    /**
   * Converts an amount into a raw amount.
   *
   * @memberof BananoUtil
   * @param {string} amountStr the amount, as a string.
   * @param {string} amountPrefix the amount, as a string.
   * @return {string} the banano as a raw value.
   */ const getRawStrFromBanoshiStr = (amountStr)=>{
        return bananoUtil.getRawStrFromMinorAmountStr(amountStr, BANANO_PREFIX);
    };
    /**
   * Converts an amount into a raw amount.
   *
   * @memberof BananoUtil
   * @param {string} amountStr the amount, as a string.
   * @param {string} amountPrefix the amount, as a string.
   * @return {string} the banano as a raw value.
   */ const getRawStrFromNanoStr = (amountStr)=>{
        return bananoUtil.getRawStrFromMajorAmountStr(amountStr, NANO_PREFIX);
    };
    /**
   * Converts an amount into a raw amount.
   *
   * @memberof BananoUtil
   * @param {string} amountStr the amount, as a string.
   * @param {string} amountPrefix the amount, as a string.
   * @return {string} the banano as a raw value.
   */ const getRawStrFromNanoshiStr = (amountStr)=>{
        return bananoUtil.getRawStrFromMinorAmountStr(amountStr, NANO_PREFIX);
    };
    /**
   * Get the banano account for a given public key.
   *
   * @memberof BananoUtil
   * @param {string} publicKey the public key.
   * @return {string} the account.
   */ const getBananoAccount = (publicKey)=>{
        return bananoUtil.getAccount(publicKey, BANANO_PREFIX);
    };
    /**
   * Get the banano account for a given public key.
   *
   * @memberof BananoUtil
   * @param {string} publicKey the public key.
   * @return {string} the account.
   */ const getNanoAccount = (publicKey)=>{
        return bananoUtil.getAccount(publicKey, NANO_PREFIX);
    };
    /**
   * Get the banano parts (banano, banoshi, raw) for a given raw value.
   *
   * @memberof BananoUtil
   * @param {string} amountRawStr the raw amount, as a string.
   * @return {BananoParts} the banano parts.
   */ const getBananoPartsFromRaw = (amountRawStr)=>{
        return bananoUtil.getAmountPartsFromRaw(amountRawStr, BANANO_PREFIX);
    };
    /**
   * Get the nano parts nano, nanoshi, raw) for a given raw value.
   *
   * @memberof BananoUtil
   * @param {string} amountRawStr the raw amount, as a string.
   * @return {BananoParts} the banano parts.
   */ const getNanoPartsFromRaw = (amountRawStr)=>{
        return bananoUtil.getAmountPartsFromRaw(amountRawStr, NANO_PREFIX);
    };
    // STARTED BOTTOM nodejs/browser hack
    const exports1 = (()=>{
        // istanbul ignore if
        if (typeof BigInt === 'undefined') return;
        const exports = {};
        exports.BANANO_PREFIX = BANANO_PREFIX;
        exports.NANO_PREFIX = NANO_PREFIX;
        exports.PREFIXES = [
            BANANO_PREFIX,
            NANO_PREFIX
        ];
        exports.sendNanoWithdrawalFromSeed = sendNanoWithdrawalFromSeed;
        exports.sendBananoWithdrawalFromSeed = sendBananoWithdrawalFromSeed;
        exports.getAccountsPending = getAccountsPending;
        exports.getBananoAccountFromSeed = getBananoAccountFromSeed;
        exports.getNanoAccountFromSeed = getNanoAccountFromSeed;
        exports.getAccountInfo = getAccountInfo;
        exports.getBlockCount = getBlockCount;
        exports.bananoUtil = bananoUtil;
        exports.bananodeApi = bananodeApi;
        exports.camoUtil = camoUtil;
        exports.depositUtil = depositUtil;
        exports.withdrawUtil = withdrawUtil;
        exports.loggingUtil = loggingUtil;
        exports.realBananodeApi = realBananodeApi;
        exports.setBananodeApi = setBananodeApi;
        exports.setAuth = setAuth;
        exports.getBananoPartsFromDecimal = getBananoPartsFromDecimal;
        exports.getBananoPartsAsDecimal = getBananoPartsAsDecimal;
        exports.getBananoDecimalAmountAsRaw = getBananoDecimalAmountAsRaw;
        exports.getBananoPartsDescription = getBananoPartsDescription;
        exports.getAccountHistory = getAccountHistory;
        exports.openBananoAccountFromSeed = openBananoAccountFromSeed;
        exports.openNanoAccountFromSeed = openNanoAccountFromSeed;
        exports.getBlockHash = getBlockHash;
        exports.getAccountBalanceRaw = getAccountBalanceRaw;
        exports.getAccountBalanceAndPendingRaw = getAccountBalanceAndPendingRaw;
        exports.getAccountsBalances = getAccountsBalances;
        exports.getBananoPartsFromRaw = getBananoPartsFromRaw;
        exports.getNanoPartsFromRaw = getNanoPartsFromRaw;
        exports.getPrivateKey = bananoUtil.getPrivateKey;
        exports.getPublicKey = bananoUtil.getPublicKey;
        exports.getAccount = bananoUtil.getAccount;
        exports.getNanoAccount = getNanoAccount;
        exports.getBananoAccount = getBananoAccount;
        exports.getAccountPublicKey = bananoUtil.getAccountPublicKey;
        exports.sendAmountToNanoAccount = sendAmountToNanoAccount;
        exports.sendAmountToBananoAccount = sendAmountToBananoAccount;
        exports.sendAmountToBananoAccountWithRepresentativeAndPrevious = sendAmountToBananoAccountWithRepresentativeAndPrevious;
        exports.sendAmountToNanoAccountWithRepresentativeAndPrevious = sendAmountToNanoAccountWithRepresentativeAndPrevious;
        exports.changeBananoRepresentativeForSeed = changeBananoRepresentativeForSeed;
        exports.changeNanoRepresentativeForSeed = changeNanoRepresentativeForSeed;
        exports.getSignature = getSignature;
        exports.signHash = signHash;
        exports.verify = verify;
        exports.getBytesFromHex = getBytesFromHex;
        exports.getHexFromBytes = getHexFromBytes;
        exports.getWorkUsingCpu = getWorkUsingCpu;
        exports.getZeroedWorkBytes = bananoUtil.getZeroedWorkBytes;
        exports.isWorkValid = bananoUtil.isWorkValid;
        exports.getNanoAccountValidationInfo = bananoUtil.getNanoAccountValidationInfo;
        exports.getBananoAccountValidationInfo = bananoUtil.getBananoAccountValidationInfo;
        exports.receiveBananoDepositsForSeed = receiveBananoDepositsForSeed;
        exports.receiveNanoDepositsForSeed = receiveNanoDepositsForSeed;
        exports.getRawStrFromBananoStr = getRawStrFromBananoStr;
        exports.getRawStrFromBanoshiStr = getRawStrFromBanoshiStr;
        exports.getRawStrFromNanoStr = getRawStrFromNanoStr;
        exports.getRawStrFromNanoshiStr = getRawStrFromNanoshiStr;
        exports.setBananodeApiUrl = setBananodeApiUrl;
        exports.getCamoPublicKey = camoUtil.getCamoPublicKey;
        exports.getSharedSecret = camoUtil.getSharedSecret;
        exports.camoBananoReceive = camoBananoReceive;
        exports.camoNanoReceive = camoNanoReceive;
        exports.camoBananoSend = camoBananoSend;
        exports.camoNanoSend = camoNanoSend;
        exports.camoBananoSendWithdrawalFromSeed = camoBananoSendWithdrawalFromSeed;
        exports.camoNanoSendWithdrawalFromSeed = camoNanoSendWithdrawalFromSeed;
        exports.getCamoAccount = camoUtil.getCamoAccount;
        exports.getCamoBananoAccountBalanceRaw = getCamoBananoAccountBalanceRaw;
        exports.getCamoNanoAccountBalanceRaw = getCamoNanoAccountBalanceRaw;
        exports.getCamoBananoNextPrivateKeyForReceive = getCamoBananoNextPrivateKeyForReceive;
        exports.getCamoNanoNextPrivateKeyForReceive = getCamoNanoNextPrivateKeyForReceive;
        exports.camoBananoGetAccountsPending = camoBananoGetAccountsPending;
        exports.camoNanoGetAccountsPending = camoNanoGetAccountsPending;
        exports.getCamoBananoSharedAccountData = getCamoBananoSharedAccountData;
        exports.getCamoNanoSharedAccountData = getCamoNanoSharedAccountData;
        exports.receiveCamoBananoDepositsForSeed = receiveCamoBananoDepositsForSeed;
        exports.receiveCamoNanoDepositsForSeed = receiveCamoNanoDepositsForSeed;
        exports.getCamoAccountValidationInfo = getCamoAccountValidationInfo;
        return exports;
    })();
    // istanbul ignore else
    if (typeof $1aee3c8d4d72086d$exports !== 'undefined') $1aee3c8d4d72086d$exports = exports1;
    else window.bananocoinBananojs = exports1;
})(); // FINISHED BOTTOM nodejs/browser hack


$1aee3c8d4d72086d$exports.setBananodeApiUrl("https://kaliumapi.appditto.com/api");
function $0d2e77df16cef4ac$var$formHandler() {
    publicKey = $0d2e77df16cef4ac$var$getAccountDetails();
    document.getElementById("infoModalHeaderH5").innerHTML = publicKey;
    document.getElementById("infoModalBody").innerHTML = "<p>Hello World!</p>";
    new (/*@__PURE__*/$parcel$interopDefault($bbc0b920ee7945e8$exports))(document.getElementById("infoModal")).show();
}
document.getElementById("submitButton").onclick = function() {
    $0d2e77df16cef4ac$var$formHandler();
};
function $0d2e77df16cef4ac$var$getAccountDetails() {
    account = $1aee3c8d4d72086d$exports.getBananoAccount(document.getElementById("textAreaInput"));
    console.log(account);
    console.log($1aee3c8d4d72086d$exports.getAccountBalanceRaw(account));
    return account;
}

})();
//# sourceMappingURL=index.156918d0.js.map
